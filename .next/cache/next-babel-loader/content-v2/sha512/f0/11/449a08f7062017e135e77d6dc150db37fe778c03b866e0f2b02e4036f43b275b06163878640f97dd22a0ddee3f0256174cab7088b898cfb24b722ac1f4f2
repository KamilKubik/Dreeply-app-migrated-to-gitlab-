{"ast":null,"code":"import _defineProperty from \"C:/off-saas/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"C:/off-saas/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\off-saas\\\\components\\\\dashboard\\\\startup\\\\project\\\\business-app\\\\SectionManager.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component, useEffect, useState, useMemo } from 'react';\nimport SectionManagerItem from './SectionManagerItem';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { useWindowSize } from '../../../../../utils/useWindowSize';\n\nvar SectionManager = function SectionManager(_ref) {\n  _s();\n\n  var selectedSection = _ref.selectedSection,\n      reorderSections = _ref.reorderSections,\n      field = _ref.field,\n      selectSectionPage = _ref.selectSectionPage,\n      deleteSectionPage = _ref.deleteSectionPage,\n      newSectionPage = _ref.newSectionPage,\n      sections = _ref.sections,\n      selectedSectionIndex = _ref.selectedSectionIndex;\n\n  var _useState = useState(null),\n      title = _useState[0],\n      setTitle = _useState[1];\n\n  var _useState2 = useState(false),\n      addingSection = _useState2[0],\n      setAddingSection = _useState2[1];\n\n  var size = useWindowSize();\n\n  var onNewSectionAdd = function onNewSectionAdd() {\n    setTitle(null);\n    setAddingSection(!addingSection);\n  };\n\n  var updateTitle = function updateTitle(titleValue) {\n    setTitle(titleValue);\n  };\n\n  var onParticularSectionAdd = function onParticularSectionAdd() {\n    newSectionPage(title);\n    setTitle(null);\n    setAddingSection(false);\n  };\n\n  var selectSection = function selectSection(section, index) {\n    selectSectionPage(section, index);\n    console.log('select section');\n  };\n\n  var deleteSection = function deleteSection(section) {\n    deleteSectionPage(section);\n    console.log('delete section');\n  }; // Problem występuje przy zmianie sekcji. Dane, które wprowadzimy w danej sekcji, przy zmianie na inną, a później przy powrocie, zostają usunięte z firebase'a\n  // useEffect(() => {\n  //   console.log('SECTIONS --> ', sections);\n  //   console.log('SECTIONS ARRAY --> ', sectionsArray);\n  //   if (!sectionsArray && sections) {\n  //     console.log('Its running...');\n  //     setSectionsArray(sections);\n  //     return;\n  //   }\n  // }, [sections]);\n  // useEffect(() => {\n  //   if (sections && sectionsArray) {\n  //     if (sections.length !== sectionsArray.length) {\n  //       console.log('Is this running twice?');\n  //       console.log(sections);\n  //       console.log(sectionsArray);\n  //       setSectionsArray(sections);\n  //       console.log(sections);\n  //     }\n  //   }\n  // }, [sections]);\n\n\n  useEffect(function () {\n    if (sectionsArray !== sections) {\n      setSectionsArray(sections);\n    }\n  }, [sections]);\n\n  var _useState3 = useState(null),\n      sectionsArray = _useState3[0],\n      setSectionsArray = _useState3[1];\n\n  var handleOnDragEnd = function handleOnDragEnd(result) {\n    if (!result.destination) return;\n    var items = Array.from(sections);\n\n    var _items$splice = items.splice(result.source.index, 1),\n        _items$splice2 = _slicedToArray(_items$splice, 1),\n        reorderedItem = _items$splice2[0];\n\n    items.splice(result.destination.index, 0, reorderedItem);\n    console.log(result);\n    setSectionsArray(items);\n    reorderSections(items);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mt-12\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full mt-1 bg-white flex flex-col py-5 px-4 rounded-2xl\",\n      children: [/*#__PURE__*/_jsxDEV(DragDropContext, {\n        onDragEnd: handleOnDragEnd,\n        children: /*#__PURE__*/_jsxDEV(Droppable, {\n          droppableId: \"sections\",\n          children: function children(provided) {\n            return /*#__PURE__*/_jsxDEV(\"div\", _objectSpread(_objectSpread({\n              className: \"sections\"\n            }, provided.droppableProps), {}, {\n              ref: provided.innerRef,\n              children: [sectionsArray && sectionsArray.map(function (_section, _index) {\n                console.log(_section);\n                return /*#__PURE__*/_jsxDEV(Draggable, {\n                  draggableId: _section.id,\n                  index: _index,\n                  children: function children(provided) {\n                    return /*#__PURE__*/_jsxDEV(SectionManagerItem, {\n                      provided: provided,\n                      _section: _section,\n                      _index: _index,\n                      selectedSectionIndex: selectedSectionIndex,\n                      selectSection: selectSection,\n                      deleteSection: deleteSection\n                    }, _index, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 103,\n                      columnNumber: 27\n                    }, _this);\n                  }\n                }, _section.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 101,\n                  columnNumber: 23\n                }, _this);\n              }), provided.placeholder]\n            }), void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 15\n            }, _this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"h-10 rounded-2xl flex justify-around items-center\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onNewSectionAdd,\n          className: \"hover:bg-primary hover:text-white dark:hover:bg-primarydark dark:hover:text-background focus:outline-none border border-primary text-primary dark:text-primarydark dark:border-primarydark text-sm font-light py-2 px-6 rounded-2xl\",\n          children: addingSection ? '...whoops, cancel' : 'Add new section'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-col justify-center items-center place-content-center place-items-center\",\n        children: addingSection ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex flex-col justify-center items-center place-content-center place-items-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            autoComplete: \"off\",\n            type: \"text\",\n            placeholder: \"Enter section title\",\n            onKeyUp: function onKeyUp(e) {\n              return updateTitle(e.target.value);\n            },\n            id: \"section-placeholder\",\n            className: \"focus:outline-none text-primarydark bg-white pb-4 pt-4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 15\n          }, _this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: onParticularSectionAdd,\n            className: \"hover:bg-primary hover:text-white dark:hover:bg-primarydark dark:hover:text-background focus:outline-none border border-primary text-primary dark:text-primarydark dark:border-primarydark text-sm font-light py-2 px-6 rounded-2xl\",\n            children: \"Add new section\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 15\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }, _this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(SectionManager, \"d7cXLlf9wDBN0BHEcOoBUTS7fuc=\", false, function () {\n  return [useWindowSize];\n});\n\n_c = SectionManager;\nexport default SectionManager; // Class based component\n// class SectionManager extends Component {\n//   constructor() {\n//     super();\n//     this.state = {\n//       addingSection: false,\n//       title: null\n//     };\n//   }\n//   render() {\n//     const { sections, selectedSectionIndex } = this.props;\n//     if(notes) {\n//       return(\n//         <div className={classes.sidebarContainer}>\n//           <Button\n//             onClick={this.newNoteBtnClick}\n//             className={classes.newNoteBtn}>{this.state.addingNote ? 'Cancel' : 'New Note'}</Button>\n//             {\n//               this.state.addingNote ?\n//               <div>\n//                 <input type='text'\n//                   className={classes.newNoteInput}\n//                   placeholder='Enter note title'\n//                   onKeyUp={(e) => this.updateTitle(e.target.value)}>\n//                 </input>\n//                 <Button\n//                   className={classes.newNoteSubmitBtn}\n//                   onClick={this.newNote}>Submit Note</Button>\n//               </div> :\n//               null\n//             }\n//             <List>\n//               {\n//                 notes.map((_note, _index) => {\n//                   return(\n//                     <div key={_index}>\n//                       <SidebarItemComponent\n//                         _note={_note}\n//                         _index={_index}\n//                         selectedNoteIndex={selectedNoteIndex}\n//                         selectNote={this.selectNote}\n//                         deleteNote={this.deleteNote}>\n//                       </SidebarItemComponent>\n//                       <Divider></Divider>\n//                     </div>\n//                   )\n//                 })\n//               }\n//             </List>\n//         </div>\n//       );\n//     } else {\n//       return(<div></div>);\n//     }\n//   }\n//   newNoteBtnClick = () => {\n//     this.setState({ title: null, addingNote: !this.state.addingNote });\n//   }\n//   updateTitle = (txt) => {\n//     this.setState({ title: txt });\n//   }\n//   newNote = () => {\n//     this.props.newNote(this.state.title);\n//     this.setState({ title: null, addingNote: false });\n//   }\n//   selectNote = (n, i) => this.props.selectNote(n, i);\n//   deleteNote = (note) => this.props.deleteNote(note);\n// }\n// export default SectionManager;\n\nvar _c;\n\n$RefreshReg$(_c, \"SectionManager\");","map":{"version":3,"sources":["C:/off-saas/components/dashboard/startup/project/business-app/SectionManager.js"],"names":["React","Component","useEffect","useState","useMemo","SectionManagerItem","DragDropContext","Droppable","Draggable","useWindowSize","SectionManager","selectedSection","reorderSections","field","selectSectionPage","deleteSectionPage","newSectionPage","sections","selectedSectionIndex","title","setTitle","addingSection","setAddingSection","size","onNewSectionAdd","updateTitle","titleValue","onParticularSectionAdd","selectSection","section","index","console","log","deleteSection","sectionsArray","setSectionsArray","handleOnDragEnd","result","destination","items","Array","from","splice","source","reorderedItem","provided","droppableProps","innerRef","map","_section","_index","id","placeholder","e","target","value"],"mappings":"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CE,YAAA,OAAO,EAAE5B,sBADX;AAEE,YAAA,SAAS,EAAC,qOAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBATF;AAAA;AAAA;AAAA;AAAA;AAAA,iBADY,GAiBV;AAlBN;AAAA;AAAA;AAAA;AAAA,eArCF;AAAA;AAAA;AAAA;AAAA;AAAA;AAJF;AAAA;AAAA;AAAA;AAAA,WADF;AAiED,CAlJD;;GAAMjB,c;UAYSD,a;;;KAZTC,c;AAoJN,eAAeA,cAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA","sourcesContent":["import React, { Component, useEffect, useState, useMemo } from 'react';\r\nimport SectionManagerItem from './SectionManagerItem';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport { useWindowSize } from '../../../../../utils/useWindowSize';\r\n\r\nconst SectionManager = ({\r\n  selectedSection,\r\n  reorderSections,\r\n  field,\r\n  selectSectionPage,\r\n  deleteSectionPage,\r\n  newSectionPage,\r\n  sections,\r\n  selectedSectionIndex,\r\n}) => {\r\n  const [title, setTitle] = useState(null);\r\n  const [addingSection, setAddingSection] = useState(false);\r\n  const size = useWindowSize();\r\n\r\n  const onNewSectionAdd = () => {\r\n    setTitle(null);\r\n    setAddingSection(!addingSection);\r\n  };\r\n\r\n  const updateTitle = (titleValue) => {\r\n    setTitle(titleValue);\r\n  };\r\n\r\n  const onParticularSectionAdd = () => {\r\n    newSectionPage(title);\r\n    setTitle(null);\r\n    setAddingSection(false);\r\n  };\r\n\r\n  const selectSection = (section, index) => {\r\n    selectSectionPage(section, index);\r\n    console.log('select section');\r\n  };\r\n\r\n  const deleteSection = (section) => {\r\n    deleteSectionPage(section);\r\n    console.log('delete section');\r\n  };\r\n\r\n  // Problem występuje przy zmianie sekcji. Dane, które wprowadzimy w danej sekcji, przy zmianie na inną, a później przy powrocie, zostają usunięte z firebase'a\r\n  // useEffect(() => {\r\n  //   console.log('SECTIONS --> ', sections);\r\n  //   console.log('SECTIONS ARRAY --> ', sectionsArray);\r\n  //   if (!sectionsArray && sections) {\r\n  //     console.log('Its running...');\r\n  //     setSectionsArray(sections);\r\n  //     return;\r\n  //   }\r\n  // }, [sections]);\r\n\r\n  // useEffect(() => {\r\n  //   if (sections && sectionsArray) {\r\n  //     if (sections.length !== sectionsArray.length) {\r\n  //       console.log('Is this running twice?');\r\n  //       console.log(sections);\r\n  //       console.log(sectionsArray);\r\n  //       setSectionsArray(sections);\r\n\r\n  //       console.log(sections);\r\n  //     }\r\n  //   }\r\n  // }, [sections]);\r\n  useEffect(() => {\r\n    if (sectionsArray !== sections) {\r\n      setSectionsArray(sections);\r\n    }\r\n  }, [sections]);\r\n\r\n  const [sectionsArray, setSectionsArray] = useState(null);\r\n\r\n  const handleOnDragEnd = (result) => {\r\n    if (!result.destination) return;\r\n    const items = Array.from(sections);\r\n    const [reorderedItem] = items.splice(result.source.index, 1);\r\n    items.splice(result.destination.index, 0, reorderedItem);\r\n\r\n    console.log(result);\r\n    setSectionsArray(items);\r\n    reorderSections(items);\r\n  };\r\n\r\n  return (\r\n    <div className=\"mt-12\">\r\n      {/* <h1 className='ml-4 text-primarydark text-base dark:text-background'>\r\n        Manage your sections\r\n      </h1> */}\r\n      <div className=\"w-full mt-1 bg-white flex flex-col py-5 px-4 rounded-2xl\">\r\n        <DragDropContext onDragEnd={handleOnDragEnd}>\r\n          <Droppable droppableId=\"sections\">\r\n            {(provided) => (\r\n              <div className=\"sections\" {...provided.droppableProps} ref={provided.innerRef}>\r\n                {sectionsArray &&\r\n                  sectionsArray.map((_section, _index) => {\r\n                    console.log(_section);\r\n                    return (\r\n                      <Draggable key={_section.id} draggableId={_section.id} index={_index}>\r\n                        {(provided) => (\r\n                          <SectionManagerItem\r\n                            provided={provided}\r\n                            key={_index}\r\n                            _section={_section}\r\n                            _index={_index}\r\n                            selectedSectionIndex={selectedSectionIndex}\r\n                            selectSection={selectSection}\r\n                            deleteSection={deleteSection}\r\n                          />\r\n                        )}\r\n                      </Draggable>\r\n                    );\r\n                  })}\r\n                {provided.placeholder}\r\n              </div>\r\n            )}\r\n          </Droppable>\r\n        </DragDropContext>\r\n        <div className=\"h-10 rounded-2xl flex justify-around items-center\">\r\n          <button\r\n            onClick={onNewSectionAdd}\r\n            className=\"hover:bg-primary hover:text-white dark:hover:bg-primarydark dark:hover:text-background focus:outline-none border border-primary text-primary dark:text-primarydark dark:border-primarydark text-sm font-light py-2 px-6 rounded-2xl\"\r\n          >\r\n            {addingSection ? '...whoops, cancel' : 'Add new section'}\r\n          </button>\r\n        </div>\r\n        <div className=\"flex flex-col justify-center items-center place-content-center place-items-center\">\r\n          {addingSection ? (\r\n            <div className=\"flex flex-col justify-center items-center place-content-center place-items-center\">\r\n              <input\r\n                autoComplete=\"off\"\r\n                type=\"text\"\r\n                placeholder=\"Enter section title\"\r\n                onKeyUp={(e) => updateTitle(e.target.value)}\r\n                id=\"section-placeholder\"\r\n                className=\"focus:outline-none text-primarydark bg-white pb-4 pt-4\"\r\n              ></input>\r\n              <button\r\n                onClick={onParticularSectionAdd}\r\n                className=\"hover:bg-primary hover:text-white dark:hover:bg-primarydark dark:hover:text-background focus:outline-none border border-primary text-primary dark:text-primarydark dark:border-primarydark text-sm font-light py-2 px-6 rounded-2xl\"\r\n              >\r\n                Add new section\r\n              </button>\r\n            </div>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SectionManager;\r\n\r\n// Class based component\r\n// class SectionManager extends Component {\r\n//   constructor() {\r\n//     super();\r\n//     this.state = {\r\n//       addingSection: false,\r\n//       title: null\r\n//     };\r\n//   }\r\n//   render() {\r\n\r\n//     const { sections, selectedSectionIndex } = this.props;\r\n\r\n//     if(notes) {\r\n//       return(\r\n//         <div className={classes.sidebarContainer}>\r\n//           <Button\r\n//             onClick={this.newNoteBtnClick}\r\n//             className={classes.newNoteBtn}>{this.state.addingNote ? 'Cancel' : 'New Note'}</Button>\r\n//             {\r\n//               this.state.addingNote ?\r\n//               <div>\r\n//                 <input type='text'\r\n//                   className={classes.newNoteInput}\r\n//                   placeholder='Enter note title'\r\n//                   onKeyUp={(e) => this.updateTitle(e.target.value)}>\r\n//                 </input>\r\n//                 <Button\r\n//                   className={classes.newNoteSubmitBtn}\r\n//                   onClick={this.newNote}>Submit Note</Button>\r\n//               </div> :\r\n//               null\r\n//             }\r\n//             <List>\r\n//               {\r\n//                 notes.map((_note, _index) => {\r\n//                   return(\r\n//                     <div key={_index}>\r\n//                       <SidebarItemComponent\r\n//                         _note={_note}\r\n//                         _index={_index}\r\n//                         selectedNoteIndex={selectedNoteIndex}\r\n//                         selectNote={this.selectNote}\r\n//                         deleteNote={this.deleteNote}>\r\n//                       </SidebarItemComponent>\r\n//                       <Divider></Divider>\r\n//                     </div>\r\n//                   )\r\n//                 })\r\n//               }\r\n//             </List>\r\n//         </div>\r\n//       );\r\n//     } else {\r\n//       return(<div></div>);\r\n//     }\r\n//   }\r\n\r\n//   newNoteBtnClick = () => {\r\n//     this.setState({ title: null, addingNote: !this.state.addingNote });\r\n//   }\r\n//   updateTitle = (txt) => {\r\n//     this.setState({ title: txt });\r\n//   }\r\n//   newNote = () => {\r\n//     this.props.newNote(this.state.title);\r\n//     this.setState({ title: null, addingNote: false });\r\n//   }\r\n//   selectNote = (n, i) => this.props.selectNote(n, i);\r\n//   deleteNote = (note) => this.props.deleteNote(note);\r\n\r\n// }\r\n\r\n// export default SectionManager;\r\n"]},"metadata":{},"sourceType":"module"}