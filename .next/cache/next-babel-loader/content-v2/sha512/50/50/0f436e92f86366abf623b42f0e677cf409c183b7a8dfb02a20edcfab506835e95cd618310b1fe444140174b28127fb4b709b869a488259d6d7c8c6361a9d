{"ast":null,"code":"// import React, { useRef, useCallback, useMemo, useState, useEffect } from 'react';\n// import dynamic from 'next/dynamic';\n// // const { Bar } = dynamic(() => import('react-chartjs-2'), { ssr: true });\n// // import { Bubble } from 'react-chartjs-2';\n// import {\n//   BarChart,\n//   Bar,\n//   ResponsiveContainer,\n//   Cell,\n//   XAxis,\n//   YAxis,\n//   CartesianGrid,\n//   Tooltip,\n//   Legend,\n// } from 'recharts';\n// // import { Bar } from 'react-chartjs-2';\n// import { saveAs } from 'file-saver';\n// import MyDocument1 from './PDFChart';\n// import {\n//   pdf,\n//   Image,\n//   Page,\n//   Text,\n//   View,\n//   Document,\n//   StyleSheet,\n//   BlobProvider,\n//   PDFDownloadLink,\n// } from '@react-pdf/renderer';\n// import { useRechartToPng } from 'recharts-to-png';\n// import FileSaver from 'file-saver';\n// const MyDocument = ({ png }) => {\n//   return useMemo(\n//     () => (\n//     <Document>\n//     <Page size='A4'>\n//       <View>\n//         <Text>Section #1</Text>\n//       </View>\n//       <View>\n//         <Image src={png} />\n//       </View>\n//     </Page>\n//   </Document>\n//     ), [png]\n//   )\n// };\n// const saveSvgAsPng = require('save-svg-as-png');\n// const ChartComponent = ({ ref }) => {\n//   const chartRef = useRef();\n//   const [year, setYear] = useState();\n//   const data = [\n//     {\n//       name: '2016',\n//       revenue: 1000,\n//       costs: 500,\n//       users: 100,\n//     },\n//     {\n//       name: '2017',\n//       revenue: 2000,\n//       costs: 1000,\n//       users: 200,\n//     },\n//     {\n//       name: '2018',\n//       revenue: 3000,\n//       costs: 1500,\n//       users: 300,\n//     },\n//     {\n//       name: '2019',\n//       revenue: 4000,\n//       costs: 2000,\n//       users: 400,\n//     },\n//     {\n//       name: year,\n//       revenue: 10000,\n//       costs: 5000,\n//       users: 1000,\n//     },\n//   ];\n//   const [pngImage, setPngImage] = useState();\n//   const [refImage, setRefImage] = useState();\n//   // useCallback(async () => {\n//   //   const [png, ref] = useRechartToPng({ canvas: refImage, allowTaint: true });\n//   //   console.log(png);\n//   //   setPngImage(png);\n//   //   console.log(pngImage);\n//   //   setRefImage(ref);\n//   // })\n//   // const [png, ref] = useRechartToPng({ canvas: refImage, allowTaint: true });\n//   // setPngImage(png);\n//   // console.log(pngImage);\n//   // setRefImage(ref);\n//   // const [png, ref] = useRechartToPng({ canvas: ref, allowTaint: true });\n//   // const fn = useCallback(async () => {\n//   //   // FileSaver.saveAs(pngImage, \"myChart.png\");\n//   //   console.log(png);\n//   // }, []);\n//   const [open, setOpen] = useState(false);\n//   // useEffect(() => {\n//   //   setOpen(false);\n//   //   setOpen(true);\n//   //   return () => setOpen(false);\n//   // });\n//   return (\n//     <>\n//     {/* {png && <img src={png} />} */}\n//       <BarChart ref={ref} data={data} height={150} width={500}>\n//         <CartesianGrid strokeDasharray='3 3' />\n//         <XAxis dataKey='name' fontSize='14' />\n//         <YAxis fontSize='14' />\n//         <Tooltip />\n//         <Bar dataKey='revenue' fill='#6C63FF' />\n//         <Bar dataKey='costs' fill='#6C63FF' />\n//         <Bar dataKey='users' fill='#6C63FF' />\n//       </BarChart>\n//     {/* <button onClick={fn}>Save to png</button> */}\n//     {/* {open && <PDFDownloadLink document={<MyDocument png={png} />} fileName='somename.pdf'>\n//         {({ blob, url, loading, error }) =>\n//           loading ? 'Loading document...' : 'Download now!'\n//         }\n//       </PDFDownloadLink>}\n//       <input placeholder='place the year' onChange={(e) => setYear(e.target.value)} /> */}\n//       <input placeholder='place the year' onChange={(e) => setYear(e.target.value)} />\n//     </>\n//   );\n// };\n// export default ChartComponent;\n// // {png && <img src={png} />}\n// /* <PDFDownloadLink document={<MyDocument />} fileName='somename.pdf'>\n//         {({ blob, url, loading, error }) =>\n//           loading ? 'Loading document...' : 'Download now!'\n//         }\n//       </PDFDownloadLink> */\n// /* <button onClick={handleDownload}>Save to png</button> */","map":{"version":3,"sources":["C:/off-saas/components/dashboard/startup/project/business-app/Chart.js"],"names":[],"mappingssourcesContent":["// import React, { useRef, useCallback, useMemo, useState, useEffect } from 'react';\r\n// import dynamic from 'next/dynamic';\r\n// // const { Bar } = dynamic(() => import('react-chartjs-2'), { ssr: true });\r\n// // import { Bubble } from 'react-chartjs-2';\r\n// import {\r\n//   BarChart,\r\n//   Bar,\r\n//   ResponsiveContainer,\r\n//   Cell,\r\n//   XAxis,\r\n//   YAxis,\r\n//   CartesianGrid,\r\n//   Tooltip,\r\n//   Legend,\r\n// } from 'recharts';\r\n// // import { Bar } from 'react-chartjs-2';\r\n// import { saveAs } from 'file-saver';\r\n// import MyDocument1 from './PDFChart';\r\n// import {\r\n//   pdf,\r\n//   Image,\r\n//   Page,\r\n//   Text,\r\n//   View,\r\n//   Document,\r\n//   StyleSheet,\r\n//   BlobProvider,\r\n//   PDFDownloadLink,\r\n// } from '@react-pdf/renderer';\r\n// import { useRechartToPng } from 'recharts-to-png';\r\n// import FileSaver from 'file-saver';\r\n\r\n// const MyDocument = ({ png }) => {\r\n//   return useMemo(\r\n//     () => (\r\n//     <Document>\r\n//     <Page size='A4'>\r\n//       <View>\r\n//         <Text>Section #1</Text>\r\n//       </View>\r\n//       <View>\r\n//         <Image src={png} />\r\n//       </View>\r\n//     </Page>\r\n//   </Document>\r\n//     ), [png]\r\n//   )\r\n// };\r\n\r\n// const saveSvgAsPng = require('save-svg-as-png');\r\n\r\n// const ChartComponent = ({ ref }) => {\r\n//   const chartRef = useRef();\r\n//   const [year, setYear] = useState();\r\n\r\n//   const data = [\r\n//     {\r\n//       name: '2016',\r\n//       revenue: 1000,\r\n//       costs: 500,\r\n//       users: 100,\r\n//     },\r\n//     {\r\n//       name: '2017',\r\n//       revenue: 2000,\r\n//       costs: 1000,\r\n//       users: 200,\r\n//     },\r\n//     {\r\n//       name: '2018',\r\n//       revenue: 3000,\r\n//       costs: 1500,\r\n//       users: 300,\r\n//     },\r\n//     {\r\n//       name: '2019',\r\n//       revenue: 4000,\r\n//       costs: 2000,\r\n//       users: 400,\r\n//     },\r\n//     {\r\n//       name: year,\r\n//       revenue: 10000,\r\n//       costs: 5000,\r\n//       users: 1000,\r\n//     },\r\n//   ];\r\n\r\n//   const [pngImage, setPngImage] = useState();\r\n//   const [refImage, setRefImage] = useState();\r\n//   // useCallback(async () => {\r\n//   //   const [png, ref] = useRechartToPng({ canvas: refImage, allowTaint: true });\r\n//   //   console.log(png);\r\n//   //   setPngImage(png);\r\n//   //   console.log(pngImage);\r\n//   //   setRefImage(ref);\r\n//   // })\r\n\r\n//   // const [png, ref] = useRechartToPng({ canvas: refImage, allowTaint: true });\r\n//   // setPngImage(png);\r\n//   // console.log(pngImage);\r\n//   // setRefImage(ref);\r\n//   // const [png, ref] = useRechartToPng({ canvas: ref, allowTaint: true });\r\n\r\n//   // const fn = useCallback(async () => {\r\n//   //   // FileSaver.saveAs(pngImage, \"myChart.png\");\r\n//   //   console.log(png);\r\n//   // }, []);\r\n\r\n//   const [open, setOpen] = useState(false);\r\n\r\n//   // useEffect(() => {\r\n//   //   setOpen(false);\r\n//   //   setOpen(true);\r\n//   //   return () => setOpen(false);\r\n//   // });\r\n\r\n//   return (\r\n//     <>\r\n//     {/* {png && <img src={png} />} */}\r\n//       <BarChart ref={ref} data={data} height={150} width={500}>\r\n//         <CartesianGrid strokeDasharray='3 3' />\r\n//         <XAxis dataKey='name' fontSize='14' />\r\n//         <YAxis fontSize='14' />\r\n//         <Tooltip />\r\n//         <Bar dataKey='revenue' fill='#6C63FF' />\r\n//         <Bar dataKey='costs' fill='#6C63FF' />\r\n//         <Bar dataKey='users' fill='#6C63FF' />\r\n//       </BarChart>\r\n//     {/* <button onClick={fn}>Save to png</button> */}\r\n//     {/* {open && <PDFDownloadLink document={<MyDocument png={png} />} fileName='somename.pdf'>\r\n//         {({ blob, url, loading, error }) =>\r\n//           loading ? 'Loading document...' : 'Download now!'\r\n//         }\r\n//       </PDFDownloadLink>}\r\n//       <input placeholder='place the year' onChange={(e) => setYear(e.target.value)} /> */}\r\n//       <input placeholder='place the year' onChange={(e) => setYear(e.target.value)} />\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default ChartComponent;\r\n\r\n// // {png && <img src={png} />}\r\n// /* <PDFDownloadLink document={<MyDocument />} fileName='somename.pdf'>\r\n//         {({ blob, url, loading, error }) =>\r\n//           loading ? 'Loading document...' : 'Download now!'\r\n//         }\r\n//       </PDFDownloadLink> */\r\n\r\n// /* <button onClick={handleDownload}>Save to png</button> */\r\n"]},"metadata":{},"sourceType":"script"}