{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport firebase, { auth, db } from '../lib/firebase';\nimport React, { useContext, createContext, useEffect, useState } from 'react';\nimport Cookies from 'js-cookie';\nimport { Router } from 'next/router';\nexport const AuthContext = /*#__PURE__*/createContext(); // Tutaj można umieścić default Value\n\nexport const useAuth = () => {\n  return useContext(AuthContext);\n};\nexport const AuthProvider = ({\n  children\n}) => {\n  const {\n    0: currentUser,\n    1: setCurrentUser\n  } = useState();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n\n  const handleUser = async user => {\n    if (user) {\n      // console.log('user - ', user);\n      // console.log('user name - ', name);\n      const formatedUser = await formatUser(user); // const decodedToken = await firebase.auth().currentUser.getIdTokenResult();\n      // console.log(decodedToken.claims.stripeRole);\n\n      db.collection('users').doc(user.uid).set({\n        formatedUser\n      }, {\n        merge: true\n      });\n      setCurrentUser(formatedUser); // Cookies.set('token', user.za, true);\n\n      Cookies.set('uid', user.uid);\n      setLoading(false);\n      return formatedUser;\n    } else {\n      setCurrentUser(false); // Cookies.remove('token', user.za);\n\n      Cookies.remove('uid');\n      setLoading(false);\n      return false;\n    }\n  };\n\n  const signUp = async (email, password) => {\n    return await auth.createUserWithEmailAndPassword(email, password).then(response => {\n      return handleUser(response.user);\n    });\n  };\n\n  const logIn = (email, password) => {\n    return auth.signInWithEmailAndPassword(email, password);\n  };\n\n  const logOut = () => {\n    return auth.signOut();\n  };\n\n  useEffect(() => {\n    const unsubscribe = auth.onIdTokenChanged(handleUser);\n    return () => unsubscribe();\n  }, []);\n  const value = {\n    currentUser,\n    signUp,\n    logIn,\n    logOut\n  };\n\n  const getStripeRole = async () => {\n    await firebase.auth().currentUser.getIdToken(true);\n    const decodedToken = await firebase.auth().currentUser.getIdTokenResult();\n    return decodedToken.claims.stripeRole || 'free';\n  };\n\n  const formatUser = async user => {\n    console.log('OFF - ', user);\n    const token = await user.getIdToken();\n    return {\n      uid: user.uid,\n      email: user.email,\n      // name,\n      // token: user.za, // token JWT, generowany automatycznie przez firebase przy zakładaniu konta\n      provider: user.providerData[0].providerId,\n      stripeRole: await getStripeRole(),\n      token\n    };\n  };\n\n  return /*#__PURE__*/_jsx(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  });\n};","map":null,"metadata":{},"sourceType":"module"}