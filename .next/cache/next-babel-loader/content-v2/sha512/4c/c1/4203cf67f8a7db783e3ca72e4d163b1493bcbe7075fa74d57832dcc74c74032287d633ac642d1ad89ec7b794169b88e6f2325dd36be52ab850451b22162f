{"ast":null,"code":"// import React, { useRef, useCallback, useMemo, useState, useEffect } from 'react';\n// import dynamic from 'next/dynamic';\n// // const { Bar } = dynamic(() => import('react-chartjs-2'), { ssr: true });\n// // import { Bubble } from 'react-chartjs-2';\n// import {\n//   BarChart,\n//   Bar,\n//   ResponsiveContainer,\n//   Cell,\n//   XAxis,\n//   YAxis,\n//   CartesianGrid,\n//   Tooltip,\n//   Legend,\n// } from 'recharts';\n// // import { Bar } from 'react-chartjs-2';\n// import { saveAs } from 'file-saver';\n// import MyDocument1 from './PDFChart';\n// import {\n//   pdf,\n//   Image,\n//   Page,\n//   Text,\n//   View,\n//   Document,\n//   StyleSheet,\n//   BlobProvider,\n//   PDFDownloadLink,\n// } from '@react-pdf/renderer';\n// import { useRechartToPng } from 'recharts-to-png';\n// import FileSaver from 'file-saver';\n// const MyDocument = ({ png }) => {\n//   return useMemo(\n//     () => (\n//     <Document>\n//     <Page size='A4'>\n//       <View>\n//         <Text>Section #1</Text>\n//       </View>\n//       <View>\n//         <Image src={png} />\n//       </View>\n//     </Page>\n//   </Document>\n//     ), [png]\n//   )\n// };\n// const saveSvgAsPng = require('save-svg-as-png');\n// const ChartComponent = ({ ref }) => {\n//   const chartRef = useRef();\n//   const [year, setYear] = useState();\n//   const data = [\n//     {\n//       name: '2016',\n//       revenue: 1000,\n//       costs: 500,\n//       users: 100,\n//     },\n//     {\n//       name: '2017',\n//       revenue: 2000,\n//       costs: 1000,\n//       users: 200,\n//     },\n//     {\n//       name: '2018',\n//       revenue: 3000,\n//       costs: 1500,\n//       users: 300,\n//     },\n//     {\n//       name: '2019',\n//       revenue: 4000,\n//       costs: 2000,\n//       users: 400,\n//     },\n//     {\n//       name: year,\n//       revenue: 10000,\n//       costs: 5000,\n//       users: 1000,\n//     },\n//   ];\n//   const [pngImage, setPngImage] = useState();\n//   const [refImage, setRefImage] = useState();\n//   // useCallback(async () => {\n//   //   const [png, ref] = useRechartToPng({ canvas: refImage, allowTaint: true });\n//   //   console.log(png);\n//   //   setPngImage(png);\n//   //   console.log(pngImage);\n//   //   setRefImage(ref);\n//   // })\n//   // const [png, ref] = useRechartToPng({ canvas: refImage, allowTaint: true });\n//   // setPngImage(png);\n//   // console.log(pngImage);\n//   // setRefImage(ref);\n//   // const [png, ref] = useRechartToPng({ canvas: ref, allowTaint: true });\n//   // const fn = useCallback(async () => {\n//   //   // FileSaver.saveAs(pngImage, \"myChart.png\");\n//   //   console.log(png);\n//   // }, []);\n//   const [open, setOpen] = useState(false);\n//   // useEffect(() => {\n//   //   setOpen(false);\n//   //   setOpen(true);\n//   //   return () => setOpen(false);\n//   // });\n//   return (\n//     <>\n//     {/* {png && <img src={png} />} */}\n//       <BarChart ref={ref} data={data} height={150} width={500}>\n//         <CartesianGrid strokeDasharray='3 3' />\n//         <XAxis dataKey='name' fontSize='14' />\n//         <YAxis fontSize='14' />\n//         <Tooltip />\n//         <Bar dataKey='revenue' fill='#6C63FF' />\n//         <Bar dataKey='costs' fill='#6C63FF' />\n//         <Bar dataKey='users' fill='#6C63FF' />\n//       </BarChart>\n//     {/* <button onClick={fn}>Save to png</button> */}\n//     {/* {open && <PDFDownloadLink document={<MyDocument png={png} />} fileName='somename.pdf'>\n//         {({ blob, url, loading, error }) =>\n//           loading ? 'Loading document...' : 'Download now!'\n//         }\n//       </PDFDownloadLink>}\n//       <input placeholder='place the year' onChange={(e) => setYear(e.target.value)} /> */}\n//       <input placeholder='place the year' onChange={(e) => setYear(e.target.value)} />\n//     </>\n//   );\n// };\n// export default ChartComponent;\n// // {png && <img src={png} />}\n// /* <PDFDownloadLink document={<MyDocument />} fileName='somename.pdf'>\n//         {({ blob, url, loading, error }) =>\n//           loading ? 'Loading document...' : 'Download now!'\n//         }\n//       </PDFDownloadLink> */\n// /* <button onClick={handleDownload}>Save to png</button> */","map":null,"metadata":{},"sourceType":"script"}