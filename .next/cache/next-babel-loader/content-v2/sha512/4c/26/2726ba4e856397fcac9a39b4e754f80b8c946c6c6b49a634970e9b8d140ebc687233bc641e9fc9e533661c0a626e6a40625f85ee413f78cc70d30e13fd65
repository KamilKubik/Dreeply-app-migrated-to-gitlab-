{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport firebase from './firebase.js';\nimport { db } from './firebase';\nimport getStripe from './stripe.js';\nconst firestore = firebase.firestore();\nexport const getAllProjects = async () => {\n  const snapshot = await firestore.collection('projects').get();\n  const projects = [];\n  snapshot.forEach(doc => {\n    projects.push(_objectSpread({\n      id: doc.id\n    }, doc.data()));\n  });\n  console.log(projects);\n  return {\n    projects\n  };\n}; // CLIENT-DATA\n\nexport const createUser = (uid, data) => {\n  return firestore.collection('users').doc(uid).set(_objectSpread({\n    uid\n  }, data), {\n    merge: true\n  }); // merge powoduje, że każde id będzie unikatowe\n};\nexport const getUser = async uid => {\n  const user = await firestore.collection('users').get();\n  const users = [];\n  user.forEach(doc => {\n    users.push(_objectSpread({\n      id: doc.id\n    }, doc.data()));\n  });\n  return {\n    users\n  };\n}; // STARTUP-DATA\n\nexport const createStartupData = data => {\n  // Wszystkie informacje wrzucamy, a potem będziemy je pobierali dla odpowiedniego użytkownika\n  return firestore.collection('startup-data').add(data);\n}; // PROJECT DELETE\n\nexport const deleteProject = async projectId => {\n  // ONE PARTICULAR PROJECT\n  const snapshot = await firestore.collection('projects').where('projectId', '==', projectId).get();\n  const batch = firestore.batch();\n  console.log(batch);\n  snapshot.forEach(doc => {\n    batch.delete(doc.ref);\n  });\n  return batch.commit();\n}; // STRIPE\n\nexport const createCheckoutSessionThreeDays = async uid => {\n  const checkoutSessionRef = await db.collection('users').doc(uid) // TO JEST DO ZMIANY Z PODSTAWOWEJ TEMPLATKI\n  .collection('checkout_sessions').add({\n    price: 'price_1IovN1BdXPtKajNHtQTV1N1q',\n    // TO JEST DO ZMIANY Z PODSTAWOWEJ TEMPLATKI\n    success_url: `${window.location.origin}/dashboard/account`,\n    cancel_url: `${window.location.origin}/dashboard/account`\n  }); // Wait for the CheckoutSession to get attached by the extension\n\n  checkoutSessionRef.onSnapshot(async snap => {\n    // TO JEST DO ZMIANY Z PODSTAWOWEJ TEMPLATKI (tutaj dodajemy tylko słówko async)\n    const {\n      error,\n      sessionId\n    } = snap.data();\n\n    if (error) {\n      // Show an error to your customer and\n      // inspect your Cloud Function logs in the Firebase console.\n      alert(`An error occured: ${error.message}`);\n    }\n\n    if (sessionId) {\n      // We have a session, let's redirect to Checkout\n      // Init Stripe\n      const stripe = await getStripe(); // TO JEST DO ZMIANY Z PODSTAWOWEJ TEMPLATKI (funkcja getStripe w pliku stripe.js)\n\n      stripe.redirectToCheckout({\n        sessionId\n      });\n    }\n  });\n}; // $29.99 for 10 units\n\nexport const createCheckoutSession10 = async uid => {\n  const checkoutSessionRef = await db.collection('users').doc(uid) // TO JEST DO ZMIANY Z PODSTAWOWEJ TEMPLATKI\n  .collection('checkout_sessions').add({\n    price: 'price_1IVgUmBdXPtKajNH4VVwl6dw',\n    // Price key\n    success_url: `${window.location.origin}/dashboard/account`,\n    cancel_url: `${window.location.origin}/dashboard/account`\n  }); // Wait for the CheckoutSession to get attached by the extension\n\n  checkoutSessionRef.onSnapshot(async snap => {\n    // TO JEST DO ZMIANY Z PODSTAWOWEJ TEMPLATKI (tutaj dodajemy tylko słówko async)\n    const {\n      error,\n      sessionId\n    } = snap.data();\n\n    if (error) {\n      // Show an error to your customer and\n      // inspect your Cloud Function logs in the Firebase console.\n      alert(`An error occured: ${error.message}`);\n    }\n\n    if (sessionId) {\n      // We have a session, let's redirect to Checkout\n      // Init Stripe\n      const stripe = await getStripe(); // TO JEST DO ZMIANY Z PODSTAWOWEJ TEMPLATKI (funkcja getStripe w pliku stripe.js)\n\n      stripe.redirectToCheckout({\n        sessionId\n      });\n    }\n  });\n};\nexport const goToBillingPortal = async () => {\n  // Do tej funkcji musimy zaimportować firebase/functions w pliku firebase.js\n  const functionRef = firebase.app().functions('us-central1').httpsCallable('ext-firestore-stripe-subscriptions-createPortalLink');\n  const {\n    data\n  } = await functionRef({\n    returnUrl: `${window.location.origin}/dashboard/account`\n  });\n  window.location.assign(data.url);\n}; // export const getCurrentPlan = async () => {\n//   const decodedToken = await firebase.auth().currentUser.getIdTokenResult();\n//   // console.log(decodedToken.claims.stripeRole); // TO POKAZUJE AKTUALNY PLAN ZALOGOWANEGO UŻYTKOWNIKA NP. BASIC / PREMIUM\n//   return decodedToken.claims.stripeRole;\n// };","map":{"version":3,"sources":["C:/off-saas/lib/db.js"],"names":["firebase","db","getStripe","firestore","getAllProjects","snapshot","collection","get","projects","forEach","doc","push","id","data","console","log","createUser","uid","set","merge","getUser","user","users","createStartupData","add","deleteProject","projectId","where","batch","delete","ref","commit","createCheckoutSessionThreeDays","checkoutSessionRef","price","success_url","window","location","origin","cancel_url","onSnapshot","snap","error","sessionId","alert","message","stripe","redirectToCheckout","createCheckoutSession10","goToBillingPortal","functionRef","app","functions","httpsCallable","returnUrl","assign","url"],"mappings":"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","sourcesContent":["import firebase from './firebase.js';\r\nimport { db } from './firebase';\r\nimport getStripe from './stripe.js';\r\n\r\nconst firestore = firebase.firestore();\r\n\r\nexport const getAllProjects = async () => {\r\n  const snapshot = await firestore.collection('projects').get();\r\n\r\n  const projects = [];\r\n  snapshot.forEach((doc) => {\r\n    projects.push({ id: doc.id, ...doc.data() });\r\n  });\r\n\r\n  console.log(projects);\r\n  return { projects };\r\n};\r\n\r\n// CLIENT-DATA\r\n\r\nexport const createUser = (uid, data) => {\r\n  return firestore\r\n    .collection('users')\r\n    .doc(uid)\r\n    .set({ uid, ...data }, { merge: true }); // merge powoduje, że każde id będzie unikatowe\r\n};\r\n\r\nexport const getUser = async (uid) => {\r\n  const user = await firestore.collection('users').get();\r\n\r\n  const users = [];\r\n  user.forEach((doc) => {\r\n    users.push({ id: doc.id, ...doc.data() });\r\n  });\r\n\r\n  return { users };\r\n};\r\n\r\n// STARTUP-DATA\r\n\r\nexport const createStartupData = (data) => {\r\n  // Wszystkie informacje wrzucamy, a potem będziemy je pobierali dla odpowiedniego użytkownika\r\n  return firestore.collection('startup-data').add(data);\r\n};\r\n\r\n// PROJECT DELETE\r\nexport const deleteProject = async (projectId) => {\r\n  // ONE PARTICULAR PROJECT\r\n  const snapshot = await firestore.collection('projects').where('projectId', '==', projectId).get();\r\n\r\n  const batch = firestore.batch();\r\n  console.log(batch);\r\n\r\n  snapshot.forEach((doc) => {\r\n    batch.delete(doc.ref);\r\n  });\r\n\r\n  return batch.commit();\r\n};\r\n\r\n// STRIPE\r\n\r\nexport const createCheckoutSessionThreeDays = async (uid) => {\r\n  const checkoutSessionRef = await db\r\n    .collection('users')\r\n    .doc(uid) // TO JEST DO ZMIANY Z PODSTAWOWEJ TEMPLATKI\r\n    .collection('checkout_sessions')\r\n    .add({\r\n      price: 'price_1IovN1BdXPtKajNHtQTV1N1q', // TO JEST DO ZMIANY Z PODSTAWOWEJ TEMPLATKI\r\n      success_url: `${window.location.origin}/dashboard/account`,\r\n      cancel_url: `${window.location.origin}/dashboard/account`,\r\n    });\r\n  // Wait for the CheckoutSession to get attached by the extension\r\n  checkoutSessionRef.onSnapshot(async (snap) => {\r\n    // TO JEST DO ZMIANY Z PODSTAWOWEJ TEMPLATKI (tutaj dodajemy tylko słówko async)\r\n    const { error, sessionId } = snap.data();\r\n    if (error) {\r\n      // Show an error to your customer and\r\n      // inspect your Cloud Function logs in the Firebase console.\r\n      alert(`An error occured: ${error.message}`);\r\n    }\r\n    if (sessionId) {\r\n      // We have a session, let's redirect to Checkout\r\n      // Init Stripe\r\n      const stripe = await getStripe(); // TO JEST DO ZMIANY Z PODSTAWOWEJ TEMPLATKI (funkcja getStripe w pliku stripe.js)\r\n      stripe.redirectToCheckout({ sessionId });\r\n    }\r\n  });\r\n};\r\n\r\n// $29.99 for 10 units\r\n\r\nexport const createCheckoutSession10 = async (uid) => {\r\n  const checkoutSessionRef = await db\r\n    .collection('users')\r\n    .doc(uid) // TO JEST DO ZMIANY Z PODSTAWOWEJ TEMPLATKI\r\n    .collection('checkout_sessions')\r\n    .add({\r\n      price: 'price_1IVgUmBdXPtKajNH4VVwl6dw', // Price key\r\n      success_url: `${window.location.origin}/dashboard/account`,\r\n      cancel_url: `${window.location.origin}/dashboard/account`,\r\n    });\r\n  // Wait for the CheckoutSession to get attached by the extension\r\n  checkoutSessionRef.onSnapshot(async (snap) => {\r\n    // TO JEST DO ZMIANY Z PODSTAWOWEJ TEMPLATKI (tutaj dodajemy tylko słówko async)\r\n    const { error, sessionId } = snap.data();\r\n    if (error) {\r\n      // Show an error to your customer and\r\n      // inspect your Cloud Function logs in the Firebase console.\r\n      alert(`An error occured: ${error.message}`);\r\n    }\r\n    if (sessionId) {\r\n      // We have a session, let's redirect to Checkout\r\n      // Init Stripe\r\n      const stripe = await getStripe(); // TO JEST DO ZMIANY Z PODSTAWOWEJ TEMPLATKI (funkcja getStripe w pliku stripe.js)\r\n      stripe.redirectToCheckout({ sessionId });\r\n    }\r\n  });\r\n};\r\n\r\nexport const goToBillingPortal = async () => {\r\n  // Do tej funkcji musimy zaimportować firebase/functions w pliku firebase.js\r\n  const functionRef = firebase.app().functions('us-central1').httpsCallable('ext-firestore-stripe-subscriptions-createPortalLink');\r\n  const { data } = await functionRef({\r\n    returnUrl: `${window.location.origin}/dashboard/account`,\r\n  });\r\n  window.location.assign(data.url);\r\n};\r\n\r\n// export const getCurrentPlan = async () => {\r\n//   const decodedToken = await firebase.auth().currentUser.getIdTokenResult();\r\n//   // console.log(decodedToken.claims.stripeRole); // TO POKAZUJE AKTUALNY PLAN ZALOGOWANEGO UŻYTKOWNIKA NP. BASIC / PREMIUM\r\n//   return decodedToken.claims.stripeRole;\r\n// };\r\n"]},"metadata":{},"sourceType":"module"}