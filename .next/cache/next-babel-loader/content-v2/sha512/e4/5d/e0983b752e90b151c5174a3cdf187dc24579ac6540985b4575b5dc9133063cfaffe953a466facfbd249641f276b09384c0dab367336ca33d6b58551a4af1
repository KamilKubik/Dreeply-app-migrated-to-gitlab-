{"ast":null,"code":"import _regeneratorRuntime from \"C:/off-saas/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _defineProperty from \"C:/off-saas/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"C:/off-saas/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport firebase from './firebase.js';\nimport { db } from './firebase';\nimport getStripe from './stripe.js';\nvar firestore = firebase.firestore();\nexport var getAllProjects = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var snapshot, projects;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return firestore.collection('projects').get();\n\n          case 2:\n            snapshot = _context.sent;\n            projects = [];\n            snapshot.forEach(function (doc) {\n              projects.push(_objectSpread({\n                id: doc.id\n              }, doc.data()));\n            });\n            console.log(projects);\n            return _context.abrupt(\"return\", {\n              projects: projects\n            });\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getAllProjects() {\n    return _ref.apply(this, arguments);\n  };\n}(); // CLIENT-DATA\n\nexport var createUser = function createUser(uid, data) {\n  return firestore.collection('users').doc(uid).set(_objectSpread({\n    uid: uid\n  }, data), {\n    merge: true\n  }); // merge powoduje, że każde id będzie unikatowe\n};\nexport var getUser = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(uid) {\n    var user, users;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return firestore.collection('users').get();\n\n          case 2:\n            user = _context2.sent;\n            users = [];\n            user.forEach(function (doc) {\n              users.push(_objectSpread({\n                id: doc.id\n              }, doc.data()));\n            });\n            return _context2.abrupt(\"return\", {\n              users: users\n            });\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getUser(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}(); // STARTUP-DATA\n\nexport var createStartupData = function createStartupData(data) {\n  // Wszystkie informacje wrzucamy, a potem będziemy je pobierali dla odpowiedniego użytkownika\n  return firestore.collection('startup-data').add(data);\n}; // PROJECT DELETE\n\nexport var deleteProject = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(projectId) {\n    var snapshot, batch;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return firestore.collection('projects').where('projectId', '==', projectId).get();\n\n          case 2:\n            snapshot = _context3.sent;\n            batch = firestore.batch();\n            console.log(batch);\n            snapshot.forEach(function (doc) {\n              batch[\"delete\"](doc.ref);\n            });\n            return _context3.abrupt(\"return\", batch.commit());\n\n          case 7:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function deleteProject(_x2) {\n    return _ref3.apply(this, arguments);\n  };\n}(); // STRIPE\n\nexport var createCheckoutSession = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(uid) {\n    var checkoutSessionRef;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return db.collection('users').doc(uid) // TO JEST DO ZMIANY Z PODSTAWOWEJ TEMPLATKI\n            .collection('checkout_sessions').add({\n              price: 'price_1IVJjNBdXPtKajNHvs4FpbR7',\n              // TO JEST DO ZMIANY Z PODSTAWOWEJ TEMPLATKI\n              success_url: \"\".concat(window.location.origin, \"/dashboard/account\"),\n              cancel_url: \"\".concat(window.location.origin, \"/dashboard/account\")\n            });\n\n          case 2:\n            checkoutSessionRef = _context5.sent;\n            // Wait for the CheckoutSession to get attached by the extension\n            checkoutSessionRef.onSnapshot( /*#__PURE__*/function () {\n              var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(snap) {\n                var _snap$data, error, sessionId, stripe;\n\n                return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                  while (1) {\n                    switch (_context4.prev = _context4.next) {\n                      case 0:\n                        // TO JEST DO ZMIANY Z PODSTAWOWEJ TEMPLATKI (tutaj dodajemy tylko słówko async)\n                        _snap$data = snap.data(), error = _snap$data.error, sessionId = _snap$data.sessionId;\n\n                        if (error) {\n                          // Show an error to your customer and\n                          // inspect your Cloud Function logs in the Firebase console.\n                          alert(\"An error occured: \".concat(error.message));\n                        }\n\n                        if (!sessionId) {\n                          _context4.next = 7;\n                          break;\n                        }\n\n                        _context4.next = 5;\n                        return getStripe();\n\n                      case 5:\n                        stripe = _context4.sent;\n                        // TO JEST DO ZMIANY Z PODSTAWOWEJ TEMPLATKI (funkcja getStripe w pliku stripe.js)\n                        stripe.redirectToCheckout({\n                          sessionId: sessionId\n                        });\n\n                      case 7:\n                      case \"end\":\n                        return _context4.stop();\n                    }\n                  }\n                }, _callee4);\n              }));\n\n              return function (_x4) {\n                return _ref5.apply(this, arguments);\n              };\n            }());\n\n          case 4:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n\n  return function createCheckoutSession(_x3) {\n    return _ref4.apply(this, arguments);\n  };\n}(); // $29.99 for 10 units\n\nexport var createCheckoutSession10 = /*#__PURE__*/function () {\n  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(uid) {\n    var checkoutSessionRef;\n    return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            _context7.next = 2;\n            return db.collection('users').doc(uid) // TO JEST DO ZMIANY Z PODSTAWOWEJ TEMPLATKI\n            .collection('checkout_sessions').add({\n              price: 'price_1IVgUmBdXPtKajNH4VVwl6dw',\n              // TO JEST DO ZMIANY Z PODSTAWOWEJ TEMPLATKI\n              success_url: \"\".concat(window.location.origin, \"/dashboard/account\"),\n              cancel_url: \"\".concat(window.location.origin, \"/dashboard/account\")\n            });\n\n          case 2:\n            checkoutSessionRef = _context7.sent;\n            // Wait for the CheckoutSession to get attached by the extension\n            checkoutSessionRef.onSnapshot( /*#__PURE__*/function () {\n              var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(snap) {\n                var _snap$data2, error, sessionId, stripe;\n\n                return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n                  while (1) {\n                    switch (_context6.prev = _context6.next) {\n                      case 0:\n                        // TO JEST DO ZMIANY Z PODSTAWOWEJ TEMPLATKI (tutaj dodajemy tylko słówko async)\n                        _snap$data2 = snap.data(), error = _snap$data2.error, sessionId = _snap$data2.sessionId;\n\n                        if (error) {\n                          // Show an error to your customer and\n                          // inspect your Cloud Function logs in the Firebase console.\n                          alert(\"An error occured: \".concat(error.message));\n                        }\n\n                        if (!sessionId) {\n                          _context6.next = 7;\n                          break;\n                        }\n\n                        _context6.next = 5;\n                        return getStripe();\n\n                      case 5:\n                        stripe = _context6.sent;\n                        // TO JEST DO ZMIANY Z PODSTAWOWEJ TEMPLATKI (funkcja getStripe w pliku stripe.js)\n                        stripe.redirectToCheckout({\n                          sessionId: sessionId\n                        });\n\n                      case 7:\n                      case \"end\":\n                        return _context6.stop();\n                    }\n                  }\n                }, _callee6);\n              }));\n\n              return function (_x6) {\n                return _ref7.apply(this, arguments);\n              };\n            }());\n\n          case 4:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  }));\n\n  return function createCheckoutSession10(_x5) {\n    return _ref6.apply(this, arguments);\n  };\n}();\nexport var goToBillingPortal = /*#__PURE__*/function () {\n  var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n    var functionRef, _yield$functionRef, data;\n\n    return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            // Do tej funkcji musimy zaimportować firebase/functions w pliku firebase.js\n            functionRef = firebase.app().functions('us-central1').httpsCallable('ext-firestore-stripe-subscriptions-createPortalLink');\n            _context8.next = 3;\n            return functionRef({\n              returnUrl: \"\".concat(window.location.origin, \"/dashboard/account\")\n            });\n\n          case 3:\n            _yield$functionRef = _context8.sent;\n            data = _yield$functionRef.data;\n            window.location.assign(data.url);\n\n          case 6:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee8);\n  }));\n\n  return function goToBillingPortal() {\n    return _ref8.apply(this, arguments);\n  };\n}(); // export const getCurrentPlan = async () => {\n//   const decodedToken = await firebase.auth().currentUser.getIdTokenResult();\n//   // console.log(decodedToken.claims.stripeRole); // TO POKAZUJE AKTUALNY PLAN ZALOGOWANEGO UŻYTKOWNIKA NP. BASIC / PREMIUM\n//   return decodedToken.claims.stripeRole;\n// };","map":null,"metadata":{},"sourceType":"module"}