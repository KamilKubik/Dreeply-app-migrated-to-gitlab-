{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport _regeneratorRuntime from \"C:/off-saas/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"C:/off-saas/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"C:/off-saas/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React, { useRef, useState, useEffect } from 'react'; // import { html2pdf } from 'html2pdf.js';\n\nimport htmlToPdfmake from 'html-to-pdfmake';\nimport pdfMake from 'pdfmake/build/pdfmake';\nimport pdfFonts from 'pdfmake/build/vfs_fonts';\nimport { db } from '../../../../../lib/firebase';\nimport Router from 'next/router';\nimport ChartJsImage from 'chartjs-to-image';\nimport ChartPDF from './ChartPDF'; // import fs from 'fs';\n\nvar fs = require('fs');\n\nvar PDFDocument = function PDFDocument(_ref) {\n  var projectId = _ref.projectId,\n      pdfChartsCreate = _ref.pdfChartsCreate;\n  var containerRef = useRef();\n\n  var _useState = useState(),\n      sections = _useState[0],\n      setSections = _useState[1];\n\n  var _useState2 = useState(),\n      document1 = _useState2[0],\n      setDocument = _useState2[1];\n\n  var _useState3 = useState(),\n      imagesUrl = _useState3[0],\n      setImagesUrl = _useState3[1];\n\n  console.log(projectId);\n  useEffect( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!projectId) {\n              _context.next = 3;\n              break;\n            }\n\n            _context.next = 3;\n            return db.collection('projects').doc(projectId).collection('businessPlan').doc(Router.query.project).collection('inputs').onSnapshot(function (querySnapshot) {\n              var sectionsData = querySnapshot.docs.map(function (doc) {\n                var data = doc.data(); // data['id'] = doc.id;\n\n                return data;\n              });\n              sectionsData.sort(function (a, b) {\n                return a.position - b.position;\n              });\n              console.log('Sections data --> ', sectionsData);\n              setSections(sectionsData); // pdfChartsCreate(sectionsData);\n\n              var imagesArray = [];\n              setImagesUrl(imagesArray);\n              sectionsData.map(function (section) {\n                section.fields.map(function (field) {\n                  if (field.type == 'chart') {\n                    var colors = field.chartType == 'Pie chart' || field.chartType == 'Doughnut chart' ? ['rgba(205,220,57,1)', 'rgba(255,235,59,1)', 'rgba(255,193,7,1)', 'rgba(255,152,0,1)', 'rgba(255,87,34,1)', 'rgba(244,67,54,1)', 'rgba(233,30,99,1)', 'rgba(156,39,176,1)', 'rgba(103,58,183,1)', 'rgba(63,81,181,1)', 'rgba(96,125,139,1)', 'rgba(121,85,72,1)'] : field.chartType == 'Line chart' || field.chartType == 'Area chart' ? 'rgba(255,185,0 ,1 )' : ['rgba(255,185,0 ,1 )', 'rgba(255,185,0 ,1 )', 'rgba(255,185,0 ,1 )', 'rgba(255,185,0 ,1 )', 'rgba(255,185,0 ,1 )', 'rgba(255,185,0 ,1 )', 'rgba(255,185,0 ,1 )', 'rgba(255,185,0 ,1 )', 'rgba(255,185,0 ,1 )', 'rgba(255,185,0 ,1 )', 'rgba(255,185,0 ,1 )', 'rgba(255,185,0 ,1 )'];\n                    var colors1 = field.chartType == 'Pie chart' || field.chartType == 'Doughnut chart' ? ['rgba(205,220,57,1)', 'rgba(255,235,59,1)', 'rgba(255,193,7,1)', 'rgba(255,152,0,1)', 'rgba(255,87,34,1)', 'rgba(244,67,54,1)', 'rgba(233,30,99,1)', 'rgba(156,39,176,1)', 'rgba(103,58,183,1)', 'rgba(63,81,181,1)', 'rgba(96,125,139,1)', 'rgba(121,85,72,1)'] : field.chartType == 'Line chart' || field.chartType == 'Area chart' ? 'rgba(0,204,106 ,1 )' : ['rgba(0,204,106 ,1 )', 'rgba(0,204,106 ,1 )', 'rgba(0,204,106 ,1 )', 'rgba(0,204,106 ,1 )', 'rgba(0,204,106 ,1 )', 'rgba(0,204,106 ,1 )', 'rgba(0,204,106 ,1 )', 'rgba(0,204,106 ,1 )', 'rgba(0,204,106 ,1 )', 'rgba(0,204,106 ,1 )', 'rgba(0,204,106 ,1 )', 'rgba(0,204,106 ,1 )'];\n                    var colors2 = field.chartType == 'Pie chart' || field.chartType == 'Doughnut chart' ? ['rgba(205,220,57,1)', 'rgba(255,235,59,1)', 'rgba(255,193,7,1)', 'rgba(255,152,0,1)', 'rgba(255,87,34,1)', 'rgba(244,67,54,1)', 'rgba(233,30,99,1)', 'rgba(156,39,176,1)', 'rgba(103,58,183,1)', 'rgba(63,81,181,1)', 'rgba(96,125,139,1)', 'rgba(121,85,72,1)'] : field.chartType == 'Line chart' || field.chartType == 'Area chart' ? 'rgba(0,120,215 ,1 )' : ['rgba(0,120,215 ,1 )', 'rgba(0,120,215 ,1 )', 'rgba(0,120,215 ,1 )', 'rgba(0,120,215 ,1 )', 'rgba(0,120,215 ,1 )', 'rgba(0,120,215 ,1 )', 'rgba(0,120,215 ,1 )', 'rgba(0,120,215 ,1 )', 'rgba(0,120,215 ,1 )', 'rgba(0,120,215 ,1 )', 'rgba(0,120,215 ,1 )', 'rgba(0,120,215 ,1 )'];\n                    var colors3 = field.chartType == 'Pie chart' || field.chartType == 'Doughnut chart' ? ['rgba(205,220,57,1)', 'rgba(255,235,59,1)', 'rgba(255,193,7,1)', 'rgba(255,152,0,1)', 'rgba(255,87,34,1)', 'rgba(244,67,54,1)', 'rgba(233,30,99,1)', 'rgba(156,39,176,1)', 'rgba(103,58,183,1)', 'rgba(63,81,181,1)', 'rgba(96,125,139,1)', 'rgba(121,85,72,1)'] : field.chartType == 'Line chart' || field.chartType == 'Area chart' ? 'rgba(231,72,86 ,1 )' : ['rgba(231,72,86 ,1 )', 'rgba(231,72,86 ,1 )', 'rgba(231,72,86 ,1 )', 'rgba(231,72,86 ,1 )', 'rgba(231,72,86 ,1 )', 'rgba(231,72,86 ,1 )', 'rgba(231,72,86 ,1 )', 'rgba(231,72,86 ,1 )', 'rgba(231,72,86 ,1 )', 'rgba(231,72,86 ,1 )', 'rgba(231,72,86 ,1 )', 'rgba(231,72,86 ,1 )'];\n                    var colors4 = field.chartType == 'Pie chart' || field.chartType == 'Doughnut chart' ? ['rgba(205,220,57,1)', 'rgba(255,235,59,1)', 'rgba(255,193,7,1)', 'rgba(255,152,0,1)', 'rgba(255,87,34,1)', 'rgba(244,67,54,1)', 'rgba(233,30,99,1)', 'rgba(156,39,176,1)', 'rgba(103,58,183,1)', 'rgba(63,81,181,1)', 'rgba(96,125,139,1)', 'rgba(121,85,72,1)'] : field.chartType == 'Line chart' || field.chartType == 'Area chart' ? 'rgba(126,115,95 ,1 )' : ['rgba(126,115,95 ,1 )', 'rgba(126,115,95 ,1 )', 'rgba(126,115,95 ,1 )', 'rgba(126,115,95 ,1 )', 'rgba(126,115,95 ,1 )', 'rgba(126,115,95 ,1 )', 'rgba(126,115,95 ,1 )', 'rgba(126,115,95 ,1 )', 'rgba(126,115,95 ,1 )', 'rgba(126,115,95 ,1 )', 'rgba(126,115,95 ,1 )', 'rgba(126,115,95 ,1 )'];\n                    var colors5 = field.chartType == 'Pie chart' || field.chartType == 'Doughnut chart' ? ['rgba(205,220,57,1)', 'rgba(255,235,59,1)', 'rgba(255,193,7,1)', 'rgba(255,152,0,1)', 'rgba(255,87,34,1)', 'rgba(244,67,54,1)', 'rgba(233,30,99,1)', 'rgba(156,39,176,1)', 'rgba(103,58,183,1)', 'rgba(63,81,181,1)', 'rgba(96,125,139,1)', 'rgba(121,85,72,1)'] : field.chartType == 'Line chart' || field.chartType == 'Area chart' ? 'rgba(177,70,194 ,1 )' : ['rgba(177,70,194 ,1 )', 'rgba(177,70,194 ,1 )', 'rgba(177,70,194 ,1 )', 'rgba(177,70,194 ,1 )', 'rgba(177,70,194 ,1 )', 'rgba(177,70,194 ,1 )', 'rgba(177,70,194 ,1 )', 'rgba(177,70,194 ,1 )', 'rgba(177,70,194 ,1 )', 'rgba(177,70,194 ,1 )', 'rgba(177,70,194 ,1 )', 'rgba(177,70,194 ,1 )'];\n                    var data = {\n                      labels: field.labels && _toConsumableArray(field.labels.map(function (label) {\n                        if (label !== '') {\n                          return label;\n                        } else {\n                          return '';\n                        }\n                      })),\n                      datasets: [// Dataset1\n                      {\n                        label: field.dataset1Label && field.dataset1Label,\n                        data: field.dataset1 && field.dataset1.map(function (data) {\n                          if (data !== '') {\n                            return data;\n                          }\n                        }),\n                        backgroundColor: colors,\n                        borderWidth: field.chartType == 'Area chart' ? 0 : field.chartType == 'Pie chart' || field.chartType == 'Doughnut chart' && 2\n                      }, // Dataset2\n                      {\n                        label: field.dataset2Label && field.dataset2Label,\n                        data: field.dataset2 && field.dataset2.map(function (data) {\n                          if (data !== '') {\n                            return data;\n                          }\n                        }),\n                        backgroundColor: colors1,\n                        borderWidth: field.chartType == 'Area chart' ? 0 : field.chartType == 'Pie chart' || field.chartType == 'Doughnut chart' && 2\n                      }, // Dataset3\n                      {\n                        label: field.dataset3Label && field.dataset3Label,\n                        data: field.dataset3 && field.dataset3.map(function (data) {\n                          if (data !== '') {\n                            return data;\n                          }\n                        }),\n                        backgroundColor: colors2,\n                        borderWidth: field.chartType == 'Area chart' ? 0 : field.chartType == 'Pie chart' || field.chartType == 'Doughnut chart' && 2\n                      }, // Dataset4\n                      {\n                        label: field.dataset4Label && field.dataset4Label,\n                        data: field.dataset4 && field.dataset4.map(function (data) {\n                          if (data !== '') {\n                            return data;\n                          }\n                        }),\n                        backgroundColor: colors3,\n                        borderWidth: field.chartType == 'Area chart' ? 0 : field.chartType == 'Pie chart' || field.chartType == 'Doughnut chart' && 2\n                      }, // Dataset5\n                      {\n                        label: field.dataset5Label && field.dataset5Label,\n                        data: field.dataset5 && field.dataset5.map(function (data) {\n                          if (data !== '') {\n                            return data;\n                          }\n                        }),\n                        backgroundColor: colors4,\n                        borderWidth: field.chartType == 'Area chart' ? 0 : field.chartType == 'Pie chart' || field.chartType == 'Doughnut chart' && 2\n                      }, // Dataset6\n                      {\n                        label: field.dataset6Label && field.dataset6Label,\n                        data: field.dataset6 && field.dataset6.map(function (data) {\n                          if (data !== '') {\n                            return data;\n                          }\n                        }),\n                        backgroundColor: colors5,\n                        borderWidth: field.chartType == 'Area chart' ? 0 : field.chartType == 'Pie chart' || field.chartType == 'Doughnut chart' && 2\n                      }]\n                    };\n                    var datas = data.datasets.map(function (dataset) {\n                      console.log(dataset.data[0]);\n                      var test1 = dataset.data.map(function (datases) {\n                        if (datases !== undefined) {\n                          return datases;\n                        } else {\n                          return '';\n                        }\n                      });\n                      var test = test1.map(function (datarer, index) {\n                        if (data.labels[index] !== '') {\n                          return datarer;\n                        }\n                      });\n                      var test2 = test.filter(function (obj) {\n                        return obj !== undefined;\n                      });\n                      return test2;\n                    });\n                    var fill = field.chartType == 'Line chart' ? false : undefined;\n                    var newDatasets = [{\n                      label: data.datasets[0].label,\n                      data: datas[0],\n                      backgroundColor: data.datasets[0].backgroundColor,\n                      borderColor: field.chartType == 'Line chart' ? 'rgba(255,185,0 ,1 )' : 'rgb(255, 255, 255)',\n                      borderWidth: data.datasets[0].borderWidth,\n                      fill: fill\n                    }, {\n                      label: data.datasets[1].label,\n                      data: datas[1],\n                      backgroundColor: data.datasets[1].backgroundColor,\n                      borderColor: field.chartType == 'Line chart' ? 'rgba(0,204,106 ,1 )' : 'rgb(255, 255, 255)',\n                      borderWidth: data.datasets[1].borderWidth,\n                      fill: fill\n                    }, {\n                      label: data.datasets[2].label,\n                      data: datas[2],\n                      backgroundColor: data.datasets[2].backgroundColor,\n                      borderColor: field.chartType == 'Line chart' ? 'rgba(0,120,215 ,1 )' : 'rgb(255, 255, 255)',\n                      borderWidth: data.datasets[2].borderWidth,\n                      fill: fill\n                    }, {\n                      label: data.datasets[3].label,\n                      data: datas[3],\n                      backgroundColor: data.datasets[3].backgroundColor,\n                      borderColor: field.chartType == 'Line chart' ? 'rgba(231,72,86 ,1 )' : 'rgb(255, 255, 255)',\n                      borderWidth: data.datasets[3].borderWidth,\n                      fill: fill\n                    }, {\n                      label: data.datasets[4].label,\n                      data: datas[4],\n                      backgroundColor: data.datasets[4].backgroundColor,\n                      borderColor: field.chartType == 'Line chart' ? 'rgba(126,115,95 ,1 )' : 'rgb(255, 255, 255)',\n                      borderWidth: data.datasets[4].borderWidth,\n                      fill: fill\n                    }, {\n                      label: data.datasets[5].label,\n                      data: datas[5],\n                      backgroundColor: data.datasets[5].backgroundColor,\n                      borderColor: field.chartType == 'Line chart' ? 'rgba(177,70,194 ,1 )' : 'rgb(255, 255, 255)',\n                      borderWidth: data.datasets[5].borderWidth,\n                      fill: fill\n                    }];\n                    var chartType = [field.chartType == 'Bar chart' ? 'bar' : '', field.chartType == 'Reverse chart' ? 'horizontalBar' : '', field.chartType == 'Line chart' ? 'line' : '', field.chartType == 'Pie chart' ? 'pie' : '', field.chartType == 'Doughnut chart' ? 'doughnut' : '', field.chartType == 'Area chart' ? 'line' : ''];\n                    var toSaveChart = new ChartJsImage();\n                    toSaveChart.setConfig({\n                      type: chartType.filter(function (type) {\n                        return type !== '';\n                      }),\n                      data: {\n                        labels: data.labels.filter(function (label) {\n                          return label !== '';\n                        }),\n                        datasets: newDatasets.filter(function (dataset) {\n                          return dataset.label !== '';\n                        })\n                      },\n                      options: {\n                        responsive: true,\n                        legend: {\n                          position: 'bottom'\n                        },\n                        defaultFontFamily: Chart.defaults.global.defaultFontFamily = 'Comfortaa',\n                        scales: {\n                          yAxes: [{\n                            stacked: field.stacked == true ? true : false,\n                            ticks: {\n                              beginAtZero: true\n                            }\n                          }],\n                          xAxes: [{\n                            stacked: field.stacked == true ? true : false,\n                            ticks: {\n                              beginAtZero: true\n                            }\n                          }]\n                        }\n                      }\n                    });\n                    toSaveChart.setFormat('png').setDevicePixelRatio(2.0);\n                    var imageUrl = toSaveChart.toDataUrl();\n                    imageUrl.then(function (image) {\n                      console.log(image);\n                      imagesArray.push({\n                        imageUrl: image,\n                        imageIndex: field.index\n                      });\n                      console.log(imagesArray);\n                      setImagesUrl(imagesArray);\n                    });\n                  }\n                });\n              });\n            });\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })), [projectId]);\n  pdfMake.vfs = pdfFonts.pdfMake.vfs;\n\n  var onDocumentSave1 = function onDocumentSave1() {\n    // Deleting commas between the array elements\n    console.log(sections);\n    var pdfContent = htmlToPdfmake( // `<div><p style='color: #6C63FF'>Hello from pdf document1<br />${helper ? '<p>Hello from helper</p>' : ''}</p></div>`\n    \"<div>\\n          <div>\\n            <h2 style='text-align: center; color: green'>First page</h2>\\n            <p class='red'>Some more random text below...</p>\\n            <br />\\n            <br />\\n            <br />\\n            <br />\\n            <p style='text-align: center'>Some more random text below...</p>\\n            <div class='test'></div>\\n            <p>normal</p><p style='text-align: center'>center</p><p class=\\\"ql-align-right\\\">right</p><p class=\\\"ql-align-justify\\\">justify</p>\\n          </div>\\n          <div>\".concat(sections.map(function (section) {\n      return \"<h2 class='pdf-pagebreak-before' style='margin-bottom: 50px'>\".concat(section.title, \"</h2>\\n              \").concat(section.fields.map(function (field) {\n        console.log(field.type);\n\n        if (field.type == 'header') {\n          return \"<h5>\".concat(field.title, \"</h5>\");\n        }\n\n        if (field.type == 'text') {\n          console.log(field.body.includes('ql-align-center'));\n\n          if (field.body.includes('ql-align-center')) {\n            var newFieldBody = field.body.replace('class=\"ql-align-center\"', \"style='text-align: center'\");\n            return \"<div>\".concat(newFieldBody, \"</div>\");\n          }\n\n          if (field.body.includes('ql-align-right')) {\n            var _newFieldBody = field.body.replace('class=\"ql-align-right\"', \"style='text-align: right'\");\n\n            return \"<div>\".concat(_newFieldBody, \"</div>\");\n          }\n\n          if (field.body.includes('ql-align-justify')) {\n            var _newFieldBody2 = field.body.replace('class=\"ql-align-justify\"', \"style='text-align: justify'\");\n\n            return \"<div>\".concat(_newFieldBody2, \"</div>\");\n          }\n\n          return \"<div>\".concat(field.body, \"</div>\");\n        }\n\n        if (field.type == 'chart') {\n          var imagesData = imagesUrl && imagesUrl.map(function (image) {\n            console.log('Images url --> ', imagesUrl);\n            console.log('Field --> ', field);\n\n            if (image.imageIndex == field.index) {\n              return \"<img src='\".concat(image.imageUrl, \"' style='margin-top: 30px; margin-bottom: 30px; width: '80%'; height: '80%';' />\");\n            }\n          }).join('');\n          return imagesData;\n        }\n\n        if (field.type == 'spacing') {\n          return \"<br />\";\n        }\n\n        if (field.type == 'table') {\n          console.log('Table --> ', field);\n          return \"<table style=\\\"margin-top: 30px; margin-bottom: 30px;\\\">\\n                      <thead>\\n                          <tr>\\n                              \".concat(field.headRows.map(function (row, headRowIndex) {\n            return \"<th class=\\\"thstyle\\\" style=\\\"background-color: #6C63FF; margin-top: 8px; margin-bottom: 8px; margin-left: 10px; margin-right: 10px; color: #FCFEFE;\\\">\".concat(row, \"</th>\");\n          }).join(''), \"\\n                          </tr>\\n                      </thead>\\n                      <tbody>\\n                        \").concat(field.rows.map(function (row, rowIndex) {\n            return \"<tr\\\">\".concat(row.row.map(function (rowData, rowDataIndex) {\n              return \"<td style=\\\"margin-top: 8px; margin-bottom: 8px; margin-left: 10px; margin-right: 10px; color: #0a1230;\\\">\".concat(rowData, \"</td>\");\n            }).join(''), \"</tr>\");\n          }).join(''), \"\\n                    </tbody>\\n                    </table>\");\n        }\n      }).join(''), \"\\n              \");\n    }).join(''), \"</div>\\n      </div>\"), {\n      defaultStyles: {\n        p: ''\n      }\n    }, {\n      tableAutoSize: true\n    });\n    var pdfDocument = {\n      content: pdfContent,\n      styles: {\n        red: {\n          // font: 'Comfortaa',\n          color: 'red',\n          marginLeft: 200\n        },\n        // Insert\n        'html-p': {\n          marginBottom: 15\n        },\n        'ql-indent-1': {\n          marginLeft: 15\n        },\n        'ql-indent-2': {\n          marginLeft: 30\n        },\n        'ql-indent-3': {\n          marginLeft: 45\n        },\n        'ql-indent-4': {\n          marginLeft: 60\n        },\n        'ql-indent-5': {\n          marginLeft: 75\n        },\n        'ql-indent-6': {\n          marginLeft: 90\n        },\n        'ql-indent-7': {\n          marginLeft: 105\n        },\n        'ql-indent-8': {\n          marginLeft: 120\n        },\n        'html-table': {\n          'border-radius': '25px',\n          'margin-top': '30px',\n          'margin-bottom': '30px'\n        }\n      },\n      pageBreakBefore: function pageBreakBefore(currentNode) {\n        return currentNode.style && currentNode.style.indexOf('pdf-pagebreak-before') > -1;\n      }\n    };\n    var pdfDocGenerator = pdfMake.createPdf(pdfDocument);\n    pdfDocGenerator.download(\"\".concat(Router.query.project, \"/business-plan.pdf\"));\n  }; // useEffect(() => {\n  //   arrayer.push(document1);\n  //   console.log(arrayer);\n  // }, [document1])\n\n\n  return /*#__PURE__*/_jsx(\"div\", {\n    ref: containerRef,\n    className: \"flex justify-end\",\n    children: /*#__PURE__*/_jsx(\"button\", {\n      onClick: onDocumentSave1,\n      className: \"hover:bg-primary hover:text-white dark:hover:bg-primarydark dark:hover:text-background focus:outline-none border border-primary text-primary text-sm font-light py-2 px-8 rounded-2xl mt-2 dark:text-primarydark dark:border-primarydark\",\n      children: \"PDF Save\"\n    })\n  });\n};\n\nexport default PDFDocument;","map":null,"metadata":{},"sourceType":"module"}