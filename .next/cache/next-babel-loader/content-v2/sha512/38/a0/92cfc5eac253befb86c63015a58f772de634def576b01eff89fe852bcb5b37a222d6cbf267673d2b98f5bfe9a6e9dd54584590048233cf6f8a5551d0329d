{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport { db } from '../../../../lib/firebase-admin';\nimport { useRouter } from 'next/router';\n\nconst ProjectPage = ({\n  projects\n}) => {\n  const {\n    0: selectedProject,\n    1: setSelectedProject\n  } = useState(null);\n  const router = useRouter();\n  useEffect(() => {\n    projects && setSelectedProject(projects[0]);\n  }, [projects]);\n  console.log(projects);\n\n  if (router.isFallback) {\n    return /*#__PURE__*/_jsx(\"div\", {\n      children: /*#__PURE__*/_jsx(\"p\", {\n        children: \"Loading...\"\n      })\n    });\n  }\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    children: [/*#__PURE__*/_jsx(\"h2\", {\n      children: \"Welcome to the project page! Project name:\"\n    }), selectedProject && /*#__PURE__*/_jsx(\"p\", {\n      children: selectedProject.projectName\n    })]\n  });\n};\n\nexport const getStaticPaths = async () => {\n  // const { projects } = await getAllProjects();\n  const snapshot = await db.collection('projects').get();\n  const projects = [];\n  snapshot.forEach(doc => {\n    projects.push(doc.data());\n  });\n  const paths = projects.map(project => ({\n    params: {\n      project: project.projectName.toString()\n    }\n  }));\n  return {\n    paths: paths,\n    fallback: true\n  };\n};\nexport const getStaticProps = async ({\n  params\n}) => {\n  // const { projects } = await getParticularProject(params.work);\n  let ref = db.collection('projects').where('projectName', '==', params.project);\n  const snapshot = await ref.get();\n  const projects = [];\n  snapshot.forEach(doc => {\n    projects.push(_objectSpread({\n      id: doc.id\n    }, doc.data()));\n  });\n  return {\n    props: {\n      projects\n    },\n    revalidate: 1\n  };\n}; // export const getServerSideProps = async ({ params }) => {\n//   let ref = db.collection('projects').where('projectName', '==', params.project);\n//   const snapshot = await ref.get();\n//   const projects = [];\n//   snapshot.forEach((doc) => {\n//     projects.push({ id: doc.id, ...doc.data() });\n//   });\n//   return {\n//     props: { projects },\n//   };\n// };\n\nexport default ProjectPage;","map":null,"metadata":{},"sourceType":"module"}