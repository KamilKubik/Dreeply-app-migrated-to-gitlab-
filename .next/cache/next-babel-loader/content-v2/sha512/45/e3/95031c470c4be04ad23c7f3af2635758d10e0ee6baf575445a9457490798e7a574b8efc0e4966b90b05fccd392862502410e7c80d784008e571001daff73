{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _toConsumableArray from \"C:/off-saas/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"C:/off-saas/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/off-saas/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"C:\\\\off-saas\\\\components\\\\dashboard\\\\startup\\\\project\\\\business-app\\\\business-plan\\\\unique\\\\UniqueChart.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport ChartJsImage from 'chartjs-to-image';\n\nvar ChartJsComponent = function ChartJsComponent(_ref) {\n  _s();\n\n  var field = _ref.field;\n  var chartRef = useRef();\n  var toSaveChart = new ChartJsImage();\n  toSaveChart.setConfig({\n    type: 'bar',\n    data: data,\n    options: {\n      responsive: false,\n      scales: {\n        y: {\n          beginAtZero: true\n        }\n      }\n    }\n  });\n\n  var _useState = useState(),\n      imageUrl = _useState[0],\n      setImageUrl = _useState[1];\n\n  useEffect( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.t0 = setImageUrl;\n            _context.next = 3;\n            return toSaveChart.toDataUrl();\n\n          case 3:\n            _context.t1 = _context.sent;\n            (0, _context.t0)(_context.t1);\n            console.log(imageUrl);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })), []);\n  useEffect(function () {\n    setOpen(false);\n    setOpen(true);\n    return function () {\n      return setOpen(false);\n    };\n  });\n  var colors = field.chartType == 'Pie chart' || field.chartType == 'Doughnut chart' ? ['rgba(205,220,57,1)', 'rgba(255,235,59,1)', 'rgba(255,193,7,1)', 'rgba(255,152,0,1)', 'rgba(255,87,34,1)', 'rgba(244,67,54,1)', 'rgba(233,30,99,1)', 'rgba(156,39,176,1)', 'rgba(103,58,183,1)', 'rgba(63,81,181,1)', 'rgba(96,125,139,1)', 'rgba(121,85,72,1)'] : field.chartType == 'Line chart' || field.chartType == 'Area chart' ? 'rgba(255,185,0 ,1 )' : ['rgba(255,185,0 ,1 )', 'rgba(255,185,0 ,1 )', 'rgba(255,185,0 ,1 )', 'rgba(255,185,0 ,1 )', 'rgba(255,185,0 ,1 )', 'rgba(255,185,0 ,1 )', 'rgba(255,185,0 ,1 )', 'rgba(255,185,0 ,1 )', 'rgba(255,185,0 ,1 )', 'rgba(255,185,0 ,1 )', 'rgba(255,185,0 ,1 )', 'rgba(255,185,0 ,1 )'];\n  var colors1 = field.chartType == 'Pie chart' || field.chartType == 'Doughnut chart' ? ['rgba(205,220,57,1)', 'rgba(255,235,59,1)', 'rgba(255,193,7,1)', 'rgba(255,152,0,1)', 'rgba(255,87,34,1)', 'rgba(244,67,54,1)', 'rgba(233,30,99,1)', 'rgba(156,39,176,1)', 'rgba(103,58,183,1)', 'rgba(63,81,181,1)', 'rgba(96,125,139,1)', 'rgba(121,85,72,1)'] : field.chartType == 'Line chart' || field.chartType == 'Area chart' ? 'rgba(0,204,106 ,1 )' : ['rgba(0,204,106 ,1 )', 'rgba(0,204,106 ,1 )', 'rgba(0,204,106 ,1 )', 'rgba(0,204,106 ,1 )', 'rgba(0,204,106 ,1 )', 'rgba(0,204,106 ,1 )', 'rgba(0,204,106 ,1 )', 'rgba(0,204,106 ,1 )', 'rgba(0,204,106 ,1 )', 'rgba(0,204,106 ,1 )', 'rgba(0,204,106 ,1 )', 'rgba(0,204,106 ,1 )'];\n  var colors2 = field.chartType == 'Pie chart' || field.chartType == 'Doughnut chart' ? ['rgba(205,220,57,1)', 'rgba(255,235,59,1)', 'rgba(255,193,7,1)', 'rgba(255,152,0,1)', 'rgba(255,87,34,1)', 'rgba(244,67,54,1)', 'rgba(233,30,99,1)', 'rgba(156,39,176,1)', 'rgba(103,58,183,1)', 'rgba(63,81,181,1)', 'rgba(96,125,139,1)', 'rgba(121,85,72,1)'] : field.chartType == 'Line chart' || field.chartType == 'Area chart' ? 'rgba(0,120,215 ,1 )' : ['rgba(0,120,215 ,1 )', 'rgba(0,120,215 ,1 )', 'rgba(0,120,215 ,1 )', 'rgba(0,120,215 ,1 )', 'rgba(0,120,215 ,1 )', 'rgba(0,120,215 ,1 )', 'rgba(0,120,215 ,1 )', 'rgba(0,120,215 ,1 )', 'rgba(0,120,215 ,1 )', 'rgba(0,120,215 ,1 )', 'rgba(0,120,215 ,1 )', 'rgba(0,120,215 ,1 )'];\n  var colors3 = field.chartType == 'Pie chart' || field.chartType == 'Doughnut chart' ? ['rgba(205,220,57,1)', 'rgba(255,235,59,1)', 'rgba(255,193,7,1)', 'rgba(255,152,0,1)', 'rgba(255,87,34,1)', 'rgba(244,67,54,1)', 'rgba(233,30,99,1)', 'rgba(156,39,176,1)', 'rgba(103,58,183,1)', 'rgba(63,81,181,1)', 'rgba(96,125,139,1)', 'rgba(121,85,72,1)'] : field.chartType == 'Line chart' || field.chartType == 'Area chart' ? 'rgba(231,72,86 ,1 )' : ['rgba(231,72,86 ,1 )', 'rgba(231,72,86 ,1 )', 'rgba(231,72,86 ,1 )', 'rgba(231,72,86 ,1 )', 'rgba(231,72,86 ,1 )', 'rgba(231,72,86 ,1 )', 'rgba(231,72,86 ,1 )', 'rgba(231,72,86 ,1 )', 'rgba(231,72,86 ,1 )', 'rgba(231,72,86 ,1 )', 'rgba(231,72,86 ,1 )', 'rgba(231,72,86 ,1 )'];\n  var colors4 = field.chartType == 'Pie chart' || field.chartType == 'Doughnut chart' ? ['rgba(205,220,57,1)', 'rgba(255,235,59,1)', 'rgba(255,193,7,1)', 'rgba(255,152,0,1)', 'rgba(255,87,34,1)', 'rgba(244,67,54,1)', 'rgba(233,30,99,1)', 'rgba(156,39,176,1)', 'rgba(103,58,183,1)', 'rgba(63,81,181,1)', 'rgba(96,125,139,1)', 'rgba(121,85,72,1)'] : field.chartType == 'Line chart' || field.chartType == 'Area chart' ? 'rgba(126,115,95 ,1 )' : ['rgba(126,115,95 ,1 )', 'rgba(126,115,95 ,1 )', 'rgba(126,115,95 ,1 )', 'rgba(126,115,95 ,1 )', 'rgba(126,115,95 ,1 )', 'rgba(126,115,95 ,1 )', 'rgba(126,115,95 ,1 )', 'rgba(126,115,95 ,1 )', 'rgba(126,115,95 ,1 )', 'rgba(126,115,95 ,1 )', 'rgba(126,115,95 ,1 )', 'rgba(126,115,95 ,1 )'];\n  var colors5 = field.chartType == 'Pie chart' || field.chartType == 'Doughnut chart' ? ['rgba(205,220,57,1)', 'rgba(255,235,59,1)', 'rgba(255,193,7,1)', 'rgba(255,152,0,1)', 'rgba(255,87,34,1)', 'rgba(244,67,54,1)', 'rgba(233,30,99,1)', 'rgba(156,39,176,1)', 'rgba(103,58,183,1)', 'rgba(63,81,181,1)', 'rgba(96,125,139,1)', 'rgba(121,85,72,1)'] : field.chartType == 'Line chart' || field.chartType == 'Area chart' ? 'rgba(177,70,194 ,1 )' : ['rgba(177,70,194 ,1 )', 'rgba(177,70,194 ,1 )', 'rgba(177,70,194 ,1 )', 'rgba(177,70,194 ,1 )', 'rgba(177,70,194 ,1 )', 'rgba(177,70,194 ,1 )', 'rgba(177,70,194 ,1 )', 'rgba(177,70,194 ,1 )', 'rgba(177,70,194 ,1 )', 'rgba(177,70,194 ,1 )', 'rgba(177,70,194 ,1 )', 'rgba(177,70,194 ,1 )'];\n  var data = {\n    labels: field.labels && _toConsumableArray(field.labels.map(function (label) {\n      if (label !== '') {\n        return label;\n      } else {\n        return '';\n      }\n    })),\n    datasets: [// Dataset1\n    {\n      label: field.dataset1Label && field.dataset1Label,\n      data: field.dataset1 && field.dataset1.map(function (data) {\n        if (data !== '') {\n          return data;\n        }\n      }),\n      backgroundColor: colors,\n      borderWidth: field.chartType == 'Area chart' ? 0 : field.chartType == 'Pie chart' || field.chartType == 'Doughnut chart' && 2\n    }, // Dataset2\n    {\n      label: field.dataset2Label && field.dataset2Label,\n      data: field.dataset2 && field.dataset2.map(function (data) {\n        if (data !== '') {\n          return data;\n        }\n      }),\n      backgroundColor: colors1,\n      borderWidth: field.chartType == 'Area chart' ? 0 : field.chartType == 'Pie chart' || field.chartType == 'Doughnut chart' && 2\n    }, // Dataset3\n    {\n      label: field.dataset3Label && field.dataset3Label,\n      data: field.dataset3 && field.dataset3.map(function (data) {\n        if (data !== '') {\n          return data;\n        }\n      }),\n      backgroundColor: colors2,\n      borderWidth: field.chartType == 'Area chart' ? 0 : field.chartType == 'Pie chart' || field.chartType == 'Doughnut chart' && 2\n    }, // Dataset4\n    {\n      label: field.dataset4Label && field.dataset4Label,\n      data: field.dataset4 && field.dataset4.map(function (data) {\n        if (data !== '') {\n          return data;\n        }\n      }),\n      backgroundColor: colors3,\n      borderWidth: field.chartType == 'Area chart' ? 0 : field.chartType == 'Pie chart' || field.chartType == 'Doughnut chart' && 2\n    }, // Dataset5\n    {\n      label: field.dataset5Label && field.dataset5Label,\n      data: field.dataset5 && field.dataset5.map(function (data) {\n        if (data !== '') {\n          return data;\n        }\n      }),\n      backgroundColor: colors4,\n      borderWidth: field.chartType == 'Area chart' ? 0 : field.chartType == 'Pie chart' || field.chartType == 'Doughnut chart' && 2\n    }, // Dataset6\n    {\n      label: field.dataset6Label && field.dataset6Label,\n      data: field.dataset6 && field.dataset6.map(function (data) {\n        if (data !== '') {\n          return data;\n        }\n      }),\n      backgroundColor: colors5,\n      borderWidth: field.chartType == 'Area chart' ? 0 : field.chartType == 'Pie chart' || field.chartType == 'Doughnut chart' && 2\n    }]\n  };\n  useEffect( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var myChartRef, datas, fill, newDatasets, chartType;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            document.getElementById(\"\".concat(field.index, \"chartContainer\")).innerHTML = '&nbsp;';\n            document.getElementById(\"\".concat(field.index, \"chartContainer\")).innerHTML = \"<canvas id=\".concat(field.index, \" ref=\").concat(chartRef, \"></canvas>\");\n            myChartRef = document.getElementById(field.index).getContext('2d');\n            console.log(data.datasets);\n            datas = data.datasets.map(function (dataset) {\n              console.log(dataset.data[0]);\n              var test1 = dataset.data.map(function (datases) {\n                if (datases !== undefined) {\n                  return datases;\n                } else {\n                  return '';\n                }\n              });\n              var test = test1.map(function (datarer, index) {\n                if (data.labels[index] !== '') {\n                  return datarer;\n                }\n              });\n              var test2 = test.filter(function (obj) {\n                return obj !== undefined;\n              });\n              return test2;\n            });\n            fill = field.chartType == 'Line chart' ? false : undefined;\n            newDatasets = [{\n              label: data.datasets[0].label,\n              data: datas[0],\n              backgroundColor: data.datasets[0].backgroundColor,\n              borderColor: field.chartType == 'Line chart' ? 'rgba(255,185,0 ,1 )' : 'rgb(255, 255, 255)',\n              borderWidth: data.datasets[0].borderWidth,\n              fill: fill\n            }, {\n              label: data.datasets[1].label,\n              data: datas[1],\n              backgroundColor: data.datasets[1].backgroundColor,\n              borderColor: field.chartType == 'Line chart' ? 'rgba(0,204,106 ,1 )' : 'rgb(255, 255, 255)',\n              borderWidth: data.datasets[1].borderWidth,\n              fill: fill\n            }, {\n              label: data.datasets[2].label,\n              data: datas[2],\n              backgroundColor: data.datasets[2].backgroundColor,\n              borderColor: field.chartType == 'Line chart' ? 'rgba(0,120,215 ,1 )' : 'rgb(255, 255, 255)',\n              borderWidth: data.datasets[2].borderWidth,\n              fill: fill\n            }, {\n              label: data.datasets[3].label,\n              data: datas[3],\n              backgroundColor: data.datasets[3].backgroundColor,\n              borderColor: field.chartType == 'Line chart' ? 'rgba(231,72,86 ,1 )' : 'rgb(255, 255, 255)',\n              borderWidth: data.datasets[3].borderWidth,\n              fill: fill\n            }, {\n              label: data.datasets[4].label,\n              data: datas[4],\n              backgroundColor: data.datasets[4].backgroundColor,\n              borderColor: field.chartType == 'Line chart' ? 'rgba(126,115,95 ,1 )' : 'rgb(255, 255, 255)',\n              borderWidth: data.datasets[4].borderWidth,\n              fill: fill\n            }, {\n              label: data.datasets[5].label,\n              data: datas[5],\n              backgroundColor: data.datasets[5].backgroundColor,\n              borderColor: field.chartType == 'Line chart' ? 'rgba(177,70,194 ,1 )' : 'rgb(255, 255, 255)',\n              borderWidth: data.datasets[5].borderWidth,\n              fill: fill\n            }];\n            console.log(newDatasets);\n            chartType = [field.chartType == 'Bar chart' ? 'bar' : '', field.chartType == 'Reverse chart' ? 'horizontalBar' : '', field.chartType == 'Line chart' ? 'line' : '', field.chartType == 'Pie chart' ? 'pie' : '', field.chartType == 'Doughnut chart' ? 'doughnut' : '', field.chartType == 'Area chart' ? 'line' : ''];\n            window.id = new Chart(myChartRef, {\n              type: chartType.filter(function (type) {\n                return type !== '';\n              }),\n              data: {\n                labels: data.labels.filter(function (label) {\n                  return label !== '';\n                }),\n                datasets: newDatasets.filter(function (dataset) {\n                  return dataset.label !== '';\n                })\n              },\n              options: {\n                skipNull: true,\n                responsive: true,\n                legend: {\n                  position: 'bottom'\n                },\n                // defaultFontFamily: (Chart.defaults.global.defaultFontFamily =\n                //   'Comfortaa'),\n                scales: {\n                  yAxes: [{\n                    stacked: field.stacked == true ? true : false,\n                    ticks: {\n                      beginAtZero: true\n                    }\n                  }],\n                  xAxes: [{\n                    stacked: field.stacked == true ? true : false,\n                    ticks: {\n                      beginAtZero: true\n                    }\n                  }]\n                }\n              }\n            });\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  })), [data.labels, data.datasets, data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-full grid grid-cols-12fr justify-items-center items-center mt-6\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"\".concat(field.index, \"container\"),\n      className: \"col-start-2 col-end-12 relative flex flex-col h-full w-full flex px-8 py-8 rounded-2xl bg-white dark:bg-background\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-full h-full\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"\".concat(field.index, \"chartContainer\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 454,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 453,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 449,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 448,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(ChartJsComponent, \"37/trwcveMr+KhlljdADq+d0w+I=\");\n\n_c = ChartJsComponent;\nexport default ChartJsComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChartJsComponent\");","map":{"version":3,"sources":["C:/off-saas/components/dashboard/startup/project/business-app/business-plan/unique/UniqueChart.js"],"names":["React","useEffect","useRef","useState","ChartJsImage","ChartJsComponent","field","chartRef","toSaveChart","setConfig","type","data","options","responsive","scales","y","beginAtZero","imageUrl","setImageUrl","toDataUrl","console","log","setOpen","colors","chartType","colors1","colors2","colors3","colors4","colors5","labels","map","label","datasets","dataset1Label","dataset1","backgroundColor","borderWidth","dataset2Label","dataset2","dataset3Label","dataset3","dataset4Label","dataset4","dataset5Label","dataset5","dataset6Label","dataset6","document","getElementById","index","innerHTML","myChartRef","getContext","datas","dataset","test1","datases","undefined","test","datarer","test2","filter","obj","fill","newDatasets","borderColor","window","id","Chart","skipNull","legend","position","yAxes","stacked","ticks","xAxes"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport ChartJsImage from 'chartjs-to-image';\r\n\r\nconst ChartJsComponent = ({ field }) => {\r\n  const chartRef = useRef();\r\n\r\n  const toSaveChart = new ChartJsImage();\r\n  toSaveChart.setConfig({\r\n    type: 'bar',\r\n    data: data,\r\n    options: {\r\n      responsive: false,\r\n      scales: {\r\n        y: {\r\n          beginAtZero: true,\r\n        },\r\n      },\r\n    },\r\n  });\r\n\r\n  const [imageUrl, setImageUrl] = useState();\r\n\r\n  useEffect(async () => {\r\n    setImageUrl(await toSaveChart.toDataUrl());\r\n    console.log(imageUrl);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setOpen(false);\r\n    setOpen(true);\r\n    return () => setOpen(false);\r\n  });\r\n\r\n  const colors =\r\n    field.chartType == 'Pie chart' || field.chartType == 'Doughnut chart'\r\n      ? [\r\n          'rgba(205,220,57,1)',\r\n          'rgba(255,235,59,1)',\r\n          'rgba(255,193,7,1)',\r\n          'rgba(255,152,0,1)',\r\n          'rgba(255,87,34,1)',\r\n          'rgba(244,67,54,1)',\r\n          'rgba(233,30,99,1)',\r\n          'rgba(156,39,176,1)',\r\n          'rgba(103,58,183,1)',\r\n          'rgba(63,81,181,1)',\r\n          'rgba(96,125,139,1)',\r\n          'rgba(121,85,72,1)',\r\n        ]\r\n      : field.chartType == 'Line chart' || field.chartType == 'Area chart'\r\n      ? 'rgba(255,185,0 ,1 )'\r\n      : [\r\n          'rgba(255,185,0 ,1 )',\r\n          'rgba(255,185,0 ,1 )',\r\n          'rgba(255,185,0 ,1 )',\r\n          'rgba(255,185,0 ,1 )',\r\n          'rgba(255,185,0 ,1 )',\r\n          'rgba(255,185,0 ,1 )',\r\n          'rgba(255,185,0 ,1 )',\r\n          'rgba(255,185,0 ,1 )',\r\n          'rgba(255,185,0 ,1 )',\r\n          'rgba(255,185,0 ,1 )',\r\n          'rgba(255,185,0 ,1 )',\r\n          'rgba(255,185,0 ,1 )',\r\n        ];\r\n\r\n  const colors1 =\r\n    field.chartType == 'Pie chart' || field.chartType == 'Doughnut chart'\r\n      ? [\r\n          'rgba(205,220,57,1)',\r\n          'rgba(255,235,59,1)',\r\n          'rgba(255,193,7,1)',\r\n          'rgba(255,152,0,1)',\r\n          'rgba(255,87,34,1)',\r\n          'rgba(244,67,54,1)',\r\n          'rgba(233,30,99,1)',\r\n          'rgba(156,39,176,1)',\r\n          'rgba(103,58,183,1)',\r\n          'rgba(63,81,181,1)',\r\n          'rgba(96,125,139,1)',\r\n          'rgba(121,85,72,1)',\r\n        ]\r\n      : field.chartType == 'Line chart' || field.chartType == 'Area chart'\r\n      ? 'rgba(0,204,106 ,1 )'\r\n      : [\r\n          'rgba(0,204,106 ,1 )',\r\n          'rgba(0,204,106 ,1 )',\r\n          'rgba(0,204,106 ,1 )',\r\n          'rgba(0,204,106 ,1 )',\r\n          'rgba(0,204,106 ,1 )',\r\n          'rgba(0,204,106 ,1 )',\r\n          'rgba(0,204,106 ,1 )',\r\n          'rgba(0,204,106 ,1 )',\r\n          'rgba(0,204,106 ,1 )',\r\n          'rgba(0,204,106 ,1 )',\r\n          'rgba(0,204,106 ,1 )',\r\n          'rgba(0,204,106 ,1 )',\r\n        ];\r\n\r\n  const colors2 =\r\n    field.chartType == 'Pie chart' || field.chartType == 'Doughnut chart'\r\n      ? [\r\n          'rgba(205,220,57,1)',\r\n          'rgba(255,235,59,1)',\r\n          'rgba(255,193,7,1)',\r\n          'rgba(255,152,0,1)',\r\n          'rgba(255,87,34,1)',\r\n          'rgba(244,67,54,1)',\r\n          'rgba(233,30,99,1)',\r\n          'rgba(156,39,176,1)',\r\n          'rgba(103,58,183,1)',\r\n          'rgba(63,81,181,1)',\r\n          'rgba(96,125,139,1)',\r\n          'rgba(121,85,72,1)',\r\n        ]\r\n      : field.chartType == 'Line chart' || field.chartType == 'Area chart'\r\n      ? 'rgba(0,120,215 ,1 )'\r\n      : [\r\n          'rgba(0,120,215 ,1 )',\r\n          'rgba(0,120,215 ,1 )',\r\n          'rgba(0,120,215 ,1 )',\r\n          'rgba(0,120,215 ,1 )',\r\n          'rgba(0,120,215 ,1 )',\r\n          'rgba(0,120,215 ,1 )',\r\n          'rgba(0,120,215 ,1 )',\r\n          'rgba(0,120,215 ,1 )',\r\n          'rgba(0,120,215 ,1 )',\r\n          'rgba(0,120,215 ,1 )',\r\n          'rgba(0,120,215 ,1 )',\r\n          'rgba(0,120,215 ,1 )',\r\n        ];\r\n\r\n  const colors3 =\r\n    field.chartType == 'Pie chart' || field.chartType == 'Doughnut chart'\r\n      ? [\r\n          'rgba(205,220,57,1)',\r\n          'rgba(255,235,59,1)',\r\n          'rgba(255,193,7,1)',\r\n          'rgba(255,152,0,1)',\r\n          'rgba(255,87,34,1)',\r\n          'rgba(244,67,54,1)',\r\n          'rgba(233,30,99,1)',\r\n          'rgba(156,39,176,1)',\r\n          'rgba(103,58,183,1)',\r\n          'rgba(63,81,181,1)',\r\n          'rgba(96,125,139,1)',\r\n          'rgba(121,85,72,1)',\r\n        ]\r\n      : field.chartType == 'Line chart' || field.chartType == 'Area chart'\r\n      ? 'rgba(231,72,86 ,1 )'\r\n      : [\r\n          'rgba(231,72,86 ,1 )',\r\n          'rgba(231,72,86 ,1 )',\r\n          'rgba(231,72,86 ,1 )',\r\n          'rgba(231,72,86 ,1 )',\r\n          'rgba(231,72,86 ,1 )',\r\n          'rgba(231,72,86 ,1 )',\r\n          'rgba(231,72,86 ,1 )',\r\n          'rgba(231,72,86 ,1 )',\r\n          'rgba(231,72,86 ,1 )',\r\n          'rgba(231,72,86 ,1 )',\r\n          'rgba(231,72,86 ,1 )',\r\n          'rgba(231,72,86 ,1 )',\r\n        ];\r\n\r\n  const colors4 =\r\n    field.chartType == 'Pie chart' || field.chartType == 'Doughnut chart'\r\n      ? [\r\n          'rgba(205,220,57,1)',\r\n          'rgba(255,235,59,1)',\r\n          'rgba(255,193,7,1)',\r\n          'rgba(255,152,0,1)',\r\n          'rgba(255,87,34,1)',\r\n          'rgba(244,67,54,1)',\r\n          'rgba(233,30,99,1)',\r\n          'rgba(156,39,176,1)',\r\n          'rgba(103,58,183,1)',\r\n          'rgba(63,81,181,1)',\r\n          'rgba(96,125,139,1)',\r\n          'rgba(121,85,72,1)',\r\n        ]\r\n      : field.chartType == 'Line chart' || field.chartType == 'Area chart'\r\n      ? 'rgba(126,115,95 ,1 )'\r\n      : [\r\n          'rgba(126,115,95 ,1 )',\r\n          'rgba(126,115,95 ,1 )',\r\n          'rgba(126,115,95 ,1 )',\r\n          'rgba(126,115,95 ,1 )',\r\n          'rgba(126,115,95 ,1 )',\r\n          'rgba(126,115,95 ,1 )',\r\n          'rgba(126,115,95 ,1 )',\r\n          'rgba(126,115,95 ,1 )',\r\n          'rgba(126,115,95 ,1 )',\r\n          'rgba(126,115,95 ,1 )',\r\n          'rgba(126,115,95 ,1 )',\r\n          'rgba(126,115,95 ,1 )',\r\n        ];\r\n\r\n  const colors5 =\r\n    field.chartType == 'Pie chart' || field.chartType == 'Doughnut chart'\r\n      ? [\r\n          'rgba(205,220,57,1)',\r\n          'rgba(255,235,59,1)',\r\n          'rgba(255,193,7,1)',\r\n          'rgba(255,152,0,1)',\r\n          'rgba(255,87,34,1)',\r\n          'rgba(244,67,54,1)',\r\n          'rgba(233,30,99,1)',\r\n          'rgba(156,39,176,1)',\r\n          'rgba(103,58,183,1)',\r\n          'rgba(63,81,181,1)',\r\n          'rgba(96,125,139,1)',\r\n          'rgba(121,85,72,1)',\r\n        ]\r\n      : field.chartType == 'Line chart' || field.chartType == 'Area chart'\r\n      ? 'rgba(177,70,194 ,1 )'\r\n      : [\r\n          'rgba(177,70,194 ,1 )',\r\n          'rgba(177,70,194 ,1 )',\r\n          'rgba(177,70,194 ,1 )',\r\n          'rgba(177,70,194 ,1 )',\r\n          'rgba(177,70,194 ,1 )',\r\n          'rgba(177,70,194 ,1 )',\r\n          'rgba(177,70,194 ,1 )',\r\n          'rgba(177,70,194 ,1 )',\r\n          'rgba(177,70,194 ,1 )',\r\n          'rgba(177,70,194 ,1 )',\r\n          'rgba(177,70,194 ,1 )',\r\n          'rgba(177,70,194 ,1 )',\r\n        ];\r\n\r\n  const data = {\r\n    labels: field.labels && [\r\n      ...field.labels.map((label) => {\r\n        if (label !== '') {\r\n          return label;\r\n        } else {\r\n          return '';\r\n        }\r\n      }),\r\n    ],\r\n    datasets: [\r\n      // Dataset1\r\n      {\r\n        label: field.dataset1Label && field.dataset1Label,\r\n        data:\r\n          field.dataset1 &&\r\n          field.dataset1.map((data) => {\r\n            if (data !== '') {\r\n              return data;\r\n            }\r\n          }),\r\n        backgroundColor: colors,\r\n        borderWidth: field.chartType == 'Area chart' ? 0 : field.chartType == 'Pie chart' || (field.chartType == 'Doughnut chart' && 2),\r\n      },\r\n      // Dataset2\r\n      {\r\n        label: field.dataset2Label && field.dataset2Label,\r\n        data:\r\n          field.dataset2 &&\r\n          field.dataset2.map((data) => {\r\n            if (data !== '') {\r\n              return data;\r\n            }\r\n          }),\r\n        backgroundColor: colors1,\r\n        borderWidth: field.chartType == 'Area chart' ? 0 : field.chartType == 'Pie chart' || (field.chartType == 'Doughnut chart' && 2),\r\n      },\r\n      // Dataset3\r\n      {\r\n        label: field.dataset3Label && field.dataset3Label,\r\n        data:\r\n          field.dataset3 &&\r\n          field.dataset3.map((data) => {\r\n            if (data !== '') {\r\n              return data;\r\n            }\r\n          }),\r\n        backgroundColor: colors2,\r\n        borderWidth: field.chartType == 'Area chart' ? 0 : field.chartType == 'Pie chart' || (field.chartType == 'Doughnut chart' && 2),\r\n      },\r\n      // Dataset4\r\n      {\r\n        label: field.dataset4Label && field.dataset4Label,\r\n        data:\r\n          field.dataset4 &&\r\n          field.dataset4.map((data) => {\r\n            if (data !== '') {\r\n              return data;\r\n            }\r\n          }),\r\n        backgroundColor: colors3,\r\n        borderWidth: field.chartType == 'Area chart' ? 0 : field.chartType == 'Pie chart' || (field.chartType == 'Doughnut chart' && 2),\r\n      },\r\n      // Dataset5\r\n      {\r\n        label: field.dataset5Label && field.dataset5Label,\r\n        data:\r\n          field.dataset5 &&\r\n          field.dataset5.map((data) => {\r\n            if (data !== '') {\r\n              return data;\r\n            }\r\n          }),\r\n        backgroundColor: colors4,\r\n        borderWidth: field.chartType == 'Area chart' ? 0 : field.chartType == 'Pie chart' || (field.chartType == 'Doughnut chart' && 2),\r\n      },\r\n      // Dataset6\r\n      {\r\n        label: field.dataset6Label && field.dataset6Label,\r\n        data:\r\n          field.dataset6 &&\r\n          field.dataset6.map((data) => {\r\n            if (data !== '') {\r\n              return data;\r\n            }\r\n          }),\r\n        backgroundColor: colors5,\r\n        borderWidth: field.chartType == 'Area chart' ? 0 : field.chartType == 'Pie chart' || (field.chartType == 'Doughnut chart' && 2),\r\n      },\r\n    ],\r\n  };\r\n\r\n  useEffect(async () => {\r\n    document.getElementById(`${field.index}chartContainer`).innerHTML = '&nbsp;';\r\n    document.getElementById(`${field.index}chartContainer`).innerHTML = `<canvas id=${field.index} ref=${chartRef}></canvas>`;\r\n    const myChartRef = document.getElementById(field.index).getContext('2d');\r\n\r\n    console.log(data.datasets);\r\n    const datas = data.datasets.map((dataset) => {\r\n      console.log(dataset.data[0]);\r\n      const test1 = dataset.data.map((datases) => {\r\n        if (datases !== undefined) {\r\n          return datases;\r\n        } else {\r\n          return '';\r\n        }\r\n      });\r\n      const test = test1.map((datarer, index) => {\r\n        if (data.labels[index] !== '') {\r\n          return datarer;\r\n        }\r\n      });\r\n      const test2 = test.filter((obj) => obj !== undefined);\r\n      return test2;\r\n    });\r\n\r\n    const fill = field.chartType == 'Line chart' ? false : undefined;\r\n\r\n    const newDatasets = [\r\n      {\r\n        label: data.datasets[0].label,\r\n        data: datas[0],\r\n        backgroundColor: data.datasets[0].backgroundColor,\r\n        borderColor: field.chartType == 'Line chart' ? 'rgba(255,185,0 ,1 )' : 'rgb(255, 255, 255)',\r\n        borderWidth: data.datasets[0].borderWidth,\r\n        fill: fill,\r\n      },\r\n      {\r\n        label: data.datasets[1].label,\r\n        data: datas[1],\r\n        backgroundColor: data.datasets[1].backgroundColor,\r\n        borderColor: field.chartType == 'Line chart' ? 'rgba(0,204,106 ,1 )' : 'rgb(255, 255, 255)',\r\n        borderWidth: data.datasets[1].borderWidth,\r\n        fill: fill,\r\n      },\r\n      {\r\n        label: data.datasets[2].label,\r\n        data: datas[2],\r\n        backgroundColor: data.datasets[2].backgroundColor,\r\n        borderColor: field.chartType == 'Line chart' ? 'rgba(0,120,215 ,1 )' : 'rgb(255, 255, 255)',\r\n        borderWidth: data.datasets[2].borderWidth,\r\n        fill: fill,\r\n      },\r\n      {\r\n        label: data.datasets[3].label,\r\n        data: datas[3],\r\n        backgroundColor: data.datasets[3].backgroundColor,\r\n        borderColor: field.chartType == 'Line chart' ? 'rgba(231,72,86 ,1 )' : 'rgb(255, 255, 255)',\r\n        borderWidth: data.datasets[3].borderWidth,\r\n        fill: fill,\r\n      },\r\n      {\r\n        label: data.datasets[4].label,\r\n        data: datas[4],\r\n        backgroundColor: data.datasets[4].backgroundColor,\r\n        borderColor: field.chartType == 'Line chart' ? 'rgba(126,115,95 ,1 )' : 'rgb(255, 255, 255)',\r\n        borderWidth: data.datasets[4].borderWidth,\r\n        fill: fill,\r\n      },\r\n      {\r\n        label: data.datasets[5].label,\r\n        data: datas[5],\r\n        backgroundColor: data.datasets[5].backgroundColor,\r\n        borderColor: field.chartType == 'Line chart' ? 'rgba(177,70,194 ,1 )' : 'rgb(255, 255, 255)',\r\n        borderWidth: data.datasets[5].borderWidth,\r\n        fill: fill,\r\n      },\r\n    ];\r\n    console.log(newDatasets);\r\n\r\n    const chartType = [\r\n      field.chartType == 'Bar chart' ? 'bar' : '',\r\n      field.chartType == 'Reverse chart' ? 'horizontalBar' : '',\r\n      field.chartType == 'Line chart' ? 'line' : '',\r\n      field.chartType == 'Pie chart' ? 'pie' : '',\r\n      field.chartType == 'Doughnut chart' ? 'doughnut' : '',\r\n      field.chartType == 'Area chart' ? 'line' : '',\r\n    ];\r\n\r\n    window.id = new Chart(myChartRef, {\r\n      type: chartType.filter((type) => type !== ''),\r\n      data: {\r\n        labels: data.labels.filter((label) => label !== ''),\r\n        datasets: newDatasets.filter((dataset) => dataset.label !== ''),\r\n      },\r\n      options: {\r\n        skipNull: true,\r\n        responsive: true,\r\n        legend: {\r\n          position: 'bottom',\r\n        },\r\n        // defaultFontFamily: (Chart.defaults.global.defaultFontFamily =\r\n        //   'Comfortaa'),\r\n        scales: {\r\n          yAxes: [\r\n            {\r\n              stacked: field.stacked == true ? true : false,\r\n              ticks: {\r\n                beginAtZero: true,\r\n              },\r\n            },\r\n          ],\r\n          xAxes: [\r\n            {\r\n              stacked: field.stacked == true ? true : false,\r\n              ticks: {\r\n                beginAtZero: true,\r\n              },\r\n            },\r\n          ],\r\n        },\r\n      },\r\n    });\r\n  }, [data.labels, data.datasets, data]);\r\n\r\n  return (\r\n    <div className=\"w-full grid grid-cols-12fr justify-items-center items-center mt-6\">\r\n      <div\r\n        id={`${field.index}container`}\r\n        className=\"col-start-2 col-end-12 relative flex flex-col h-full w-full flex px-8 py-8 rounded-2xl bg-white dark:bg-background\"\r\n      >\r\n        <div className=\"w-full h-full\">\r\n          <div id={`${field.index}chartContainer`}></div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChartJsComponent;\r\n"]},"metadata":{},"sourceType":"module"}