{"ast":null,"code":"import _defineProperty from \"C:/off-saas/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _slicedToArray from \"C:/off-saas/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component, useEffect, useState, useMemo } from 'react';\nimport SectionManagerItem from './SectionManagerItem';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n\nvar SectionManager = function SectionManager(_ref) {\n  var selectedSection = _ref.selectedSection,\n      reorderSections = _ref.reorderSections,\n      field = _ref.field,\n      selectSectionPage = _ref.selectSectionPage,\n      deleteSectionPage = _ref.deleteSectionPage,\n      newSectionPage = _ref.newSectionPage,\n      sections = _ref.sections,\n      selectedSectionIndex = _ref.selectedSectionIndex;\n\n  var _useState = useState(null),\n      title = _useState[0],\n      setTitle = _useState[1];\n\n  var _useState2 = useState(false),\n      addingSection = _useState2[0],\n      setAddingSection = _useState2[1];\n\n  var onNewSectionAdd = function onNewSectionAdd() {\n    setTitle(null);\n    setAddingSection(!addingSection);\n  };\n\n  var updateTitle = function updateTitle(titleValue) {\n    setTitle(titleValue);\n  };\n\n  var onParticularSectionAdd = function onParticularSectionAdd() {\n    newSectionPage(title);\n    setTitle(null);\n    setAddingSection(false);\n  };\n\n  var selectSection = function selectSection(section, index) {\n    selectSectionPage(section, index);\n    console.log('select section');\n  };\n\n  var deleteSection = function deleteSection(section) {\n    deleteSectionPage(section);\n    console.log('delete section');\n  }; // Problem występuje przy zmianie sekcji. Dane, które wprowadzimy w danej sekcji, przy zmianie na inną, a później przy powrocie, zostają usunięte z firebase'a\n\n\n  useEffect(function () {\n    console.log('SECTIONS --> ', sections);\n    console.log('SECTIONS ARRAY --> ', sectionsArray);\n\n    if (!sectionsArray && sections) {\n      console.log('Its running...');\n      setSectionsArray(sections);\n      return;\n    }\n  }, [sections]);\n  useEffect(function () {\n    if (sections && sectionsArray) {\n      if (sections.length !== sectionsArray.length) {\n        console.log('Is this running twice?');\n        console.log(sections);\n        console.log(sectionsArray);\n        setSectionsArray(sections);\n        console.log(sections);\n      }\n    }\n  }, [sections]);\n\n  var _useState3 = useState(),\n      sectionsArray = _useState3[0],\n      setSectionsArray = _useState3[1];\n\n  var handleOnDragEnd = function handleOnDragEnd(result) {\n    if (!result.destination) return;\n    var items = Array.from(sectionsArray);\n\n    var _items$splice = items.splice(result.source.index, 1),\n        _items$splice2 = _slicedToArray(_items$splice, 1),\n        reorderedItem = _items$splice2[0];\n\n    items.splice(result.destination.index, 0, reorderedItem);\n    console.log(result);\n    setSectionsArray(items);\n    reorderSections(items);\n  };\n\n  return /*#__PURE__*/_jsx(\"div\", {\n    className: \"col-start-7 col-end-9 mt-12\",\n    children: /*#__PURE__*/_jsxs(\"div\", {\n      className: \"w-full ml-4 mt-1 bg-white flex flex-col py-5 px-4 rounded-2xl\",\n      children: [/*#__PURE__*/_jsx(DragDropContext, {\n        onDragEnd: handleOnDragEnd,\n        children: /*#__PURE__*/_jsx(Droppable, {\n          droppableId: \"sections\",\n          children: function children(provided) {\n            return /*#__PURE__*/_jsxs(\"div\", _objectSpread(_objectSpread({\n              className: \"sections\"\n            }, provided.droppableProps), {}, {\n              ref: provided.innerRef,\n              children: [sectionsArray && sectionsArray.map(function (_section, _index) {\n                console.log(_section);\n                return /*#__PURE__*/_jsx(Draggable, {\n                  draggableId: _section.id,\n                  index: _index,\n                  children: function children(provided) {\n                    return /*#__PURE__*/_jsx(SectionManagerItem, {\n                      provided: provided,\n                      _section: _section,\n                      _index: _index,\n                      selectedSectionIndex: selectedSectionIndex,\n                      selectSection: selectSection,\n                      deleteSection: deleteSection\n                    }, _index);\n                  }\n                }, _section.id);\n              }), provided.placeholder]\n            }));\n          }\n        })\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: \"h-10 rounded-2xl flex justify-around items-center\",\n        children: /*#__PURE__*/_jsx(\"button\", {\n          onClick: onNewSectionAdd,\n          className: \"hover:bg-primary hover:text-white dark:hover:bg-primarydark dark:hover:text-background focus:outline-none border border-primary text-primary dark:text-primarydark dark:border-primarydark text-sm font-light py-2 px-6 rounded-2xl\",\n          children: addingSection ? '...whoops, cancel' : 'Add new section'\n        })\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: \"flex flex-col justify-center items-center place-content-center place-items-center\",\n        children: addingSection ? /*#__PURE__*/_jsxs(\"div\", {\n          className: \"flex flex-col justify-center items-center place-content-center place-items-center\",\n          children: [/*#__PURE__*/_jsx(\"input\", {\n            autoComplete: \"off\",\n            type: \"text\",\n            placeholder: \"Enter section title\",\n            onKeyUp: function onKeyUp(e) {\n              return updateTitle(e.target.value);\n            },\n            id: \"section-placeholder\",\n            className: \"focus:outline-none text-primarydark bg-white pb-4 pt-4\"\n          }), /*#__PURE__*/_jsx(\"button\", {\n            onClick: onParticularSectionAdd,\n            className: \"hover:bg-primary hover:text-white dark:hover:bg-primarydark dark:hover:text-background focus:outline-none border border-primary text-primary dark:text-primarydark dark:border-primarydark text-sm font-light py-2 px-6 rounded-2xl\",\n            children: \"Add new section\"\n          })]\n        }) : null\n      })]\n    })\n  });\n};\n\nexport default SectionManager; // Class based component\n// class SectionManager extends Component {\n//   constructor() {\n//     super();\n//     this.state = {\n//       addingSection: false,\n//       title: null\n//     };\n//   }\n//   render() {\n//     const { sections, selectedSectionIndex } = this.props;\n//     if(notes) {\n//       return(\n//         <div className={classes.sidebarContainer}>\n//           <Button\n//             onClick={this.newNoteBtnClick}\n//             className={classes.newNoteBtn}>{this.state.addingNote ? 'Cancel' : 'New Note'}</Button>\n//             {\n//               this.state.addingNote ? \n//               <div>\n//                 <input type='text'\n//                   className={classes.newNoteInput}\n//                   placeholder='Enter note title'\n//                   onKeyUp={(e) => this.updateTitle(e.target.value)}>\n//                 </input>\n//                 <Button \n//                   className={classes.newNoteSubmitBtn}\n//                   onClick={this.newNote}>Submit Note</Button>\n//               </div> :\n//               null\n//             }\n//             <List>\n//               {\n//                 notes.map((_note, _index) => {\n//                   return(\n//                     <div key={_index}>\n//                       <SidebarItemComponent\n//                         _note={_note}\n//                         _index={_index}\n//                         selectedNoteIndex={selectedNoteIndex}\n//                         selectNote={this.selectNote}\n//                         deleteNote={this.deleteNote}>\n//                       </SidebarItemComponent>\n//                       <Divider></Divider>\n//                     </div>\n//                   )\n//                 })\n//               }\n//             </List>\n//         </div>\n//       );\n//     } else {\n//       return(<div></div>);\n//     }\n//   }\n//   newNoteBtnClick = () => {\n//     this.setState({ title: null, addingNote: !this.state.addingNote });\n//   }\n//   updateTitle = (txt) => {\n//     this.setState({ title: txt });\n//   }\n//   newNote = () => {\n//     this.props.newNote(this.state.title);\n//     this.setState({ title: null, addingNote: false });\n//   }\n//   selectNote = (n, i) => this.props.selectNote(n, i);\n//   deleteNote = (note) => this.props.deleteNote(note);\n// }\n// export default SectionManager;","map":null,"metadata":{},"sourceType":"module"}