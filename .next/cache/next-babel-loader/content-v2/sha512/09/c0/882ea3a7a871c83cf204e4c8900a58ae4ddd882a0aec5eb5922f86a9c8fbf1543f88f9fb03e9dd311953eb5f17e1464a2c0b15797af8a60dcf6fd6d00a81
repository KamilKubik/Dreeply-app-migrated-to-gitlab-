{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\off-saas\\\\utils\\\\useWindowSize.js\";\nimport { useState, useEffect } from 'react'; // Usage\n\nfunction App() {\n  const size = useWindowSize();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [size.width, \"px / \", size.height, \"px\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n} // Hook\n\n\nexport function useWindowSize() {\n  // Initialize state with undefined width/height so server and client renders match\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n  const {\n    0: windowSize,\n    1: setWindowSize\n  } = useState({\n    width: undefined,\n    height: undefined\n  });\n  useEffect(() => {\n    // Handler to call on window resize\n    function handleResize() {\n      // Set window width/height to state\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight\n      });\n    } // Add event listener\n\n\n    window.addEventListener('resize', handleResize); // Call handler right away so state gets updated with initial window size\n\n    handleResize(); // Remove event listener on cleanup\n\n    return () => window.removeEventListener('resize', handleResize);\n  }, []); // Empty array ensures that effect is only run on mount\n\n  return windowSize;\n}","map":{"version":3,"sources":["C:/off-saas/utils/useWindowSize.js"],"names":["useState","useEffect","App","size","useWindowSize","width","height","windowSize","setWindowSize","undefined","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC,C,CACA;;AACA,SAASC,GAAT,GAAe;AACb,QAAMC,IAAI,GAAGC,aAAa,EAA1B;AACA,sBACE;AAAA,eACGD,IAAI,CAACE,KADR,WACoBF,IAAI,CAACG,MADzB;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,C,CACD;;;AACA,OAAO,SAASF,aAAT,GAAyB;AAC9B;AACA;AACA,QAAM;AAAA,OAACG,UAAD;AAAA,OAAaC;AAAb,MAA8BR,QAAQ,CAAC;AAC3CK,IAAAA,KAAK,EAAEI,SADoC;AAE3CH,IAAAA,MAAM,EAAEG;AAFmC,GAAD,CAA5C;AAIAR,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,aAASS,YAAT,GAAwB;AACtB;AACAF,MAAAA,aAAa,CAAC;AACZH,QAAAA,KAAK,EAAEM,MAAM,CAACC,UADF;AAEZN,QAAAA,MAAM,EAAEK,MAAM,CAACE;AAFH,OAAD,CAAb;AAID,KARa,CASd;;;AACAF,IAAAA,MAAM,CAACG,gBAAP,CAAwB,QAAxB,EAAkCJ,YAAlC,EAVc,CAWd;;AACAA,IAAAA,YAAY,GAZE,CAad;;AACA,WAAO,MAAMC,MAAM,CAACI,mBAAP,CAA2B,QAA3B,EAAqCL,YAArC,CAAb;AACD,GAfQ,EAeN,EAfM,CAAT,CAP8B,CAsBtB;;AACR,SAAOH,UAAP;AACD","sourcesContent":["import { useState, useEffect } from 'react';\r\n// Usage\r\nfunction App() {\r\n  const size = useWindowSize();\r\n  return (\r\n    <div>\r\n      {size.width}px / {size.height}px\r\n    </div>\r\n  );\r\n}\r\n// Hook\r\nexport function useWindowSize() {\r\n  // Initialize state with undefined width/height so server and client renders match\r\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\r\n  const [windowSize, setWindowSize] = useState({\r\n    width: undefined,\r\n    height: undefined,\r\n  });\r\n  useEffect(() => {\r\n    // Handler to call on window resize\r\n    function handleResize() {\r\n      // Set window width/height to state\r\n      setWindowSize({\r\n        width: window.innerWidth,\r\n        height: window.innerHeight,\r\n      });\r\n    }\r\n    // Add event listener\r\n    window.addEventListener('resize', handleResize);\r\n    // Call handler right away so state gets updated with initial window size\r\n    handleResize();\r\n    // Remove event listener on cleanup\r\n    return () => window.removeEventListener('resize', handleResize);\r\n  }, []); // Empty array ensures that effect is only run on mount\r\n  return windowSize;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}