{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useMemo, useEffect } from 'react';\nimport Image from 'next/image';\nimport { sections } from '../../../../../utils/business-plan';\nimport useSWR, { mutate } from 'swr';\nimport firebase, { db } from '../../../../../lib/firebase';\nimport { useAuth } from '../../../../../lib/newAuth';\nimport { useRouter } from 'next/router';\nimport fetcher from '../../../../../utils/fetcher';\n\nconst SectionManager = ({\n  setSections1,\n  dataFromInput,\n  setDataFromInput,\n  activeSection,\n  setActiveSection\n}) => {\n  const {\n    0: sections,\n    1: setSections\n  } = useState();\n  const {\n    0: inputValue,\n    1: setInputValue\n  } = useState();\n  const {\n    0: projectId,\n    1: setProjectId\n  } = useState();\n  const {\n    currentUser\n  } = useAuth();\n  const router = useRouter();\n  const ref = db.collection('currentBusinessPlan');\n  useEffect(() => {\n    // PROJECT ID\n    const gcp = async () => {\n      await db.collection('projects').where('uid', '==', currentUser.uid).where('projectName', '==', router.query.project).get().then(querySnapshot => {\n        querySnapshot.forEach(doc => {\n          return setProjectId(doc.data().projectId);\n        });\n      });\n    };\n\n    gcp();\n    ref.where('uid', '==', currentUser.uid).onSnapshot(querySnapshot => {\n      const items = [];\n      querySnapshot.forEach(doc => {\n        items.push(...doc.data().sections);\n      });\n      setSections(items);\n    });\n  }, []); // const getProjectSections = () => {\n  //   const { data } = useSWR(\n  //     currentUser && projectId\n  //       ? [`/api/business-plan/${projectId}`, currentUser.token]\n  //       : null,\n  //     fetcher\n  //   );\n  //   useMemo(\n  //     () =>\n  //       data &&\n  //       data.map((project) => {\n  //         // useMemo jest po to, żeby nie było rerenderów (w sensie wyskakuje wtedy błąd, że za dużo renderowań)\n  //         setSections(project.sections);\n  //       }),\n  //     [data]\n  //   );\n  // };\n  // getProjectSections();\n\n  console.log('SECTIONS --> ', sections);\n\n  const onSectionAdd = async e => {\n    e.preventDefault();\n    sections.push({\n      name: inputValue\n    });\n    ref.doc(currentUser.uid).set({\n      sections\n    }, {\n      merge: true\n    }); // sections.push({ name: inputValue });\n    // await db.collection('currentBusinessPlan').doc(currentUser.uid).set({ sections }, { merge: true });\n    // console.log(sections);\n    // mutate([`/api/business-plan/${projectId}`, currentUser.token], sections);\n  };\n\n  const onSectionDelete = (e, name) => {\n    e.preventDefault();\n    console.log(name);\n    const newSections = sections.filter(section => section.name !== name);\n    console.log('NEW SECTIONS - ', newSections);\n    ref.doc(currentUser.uid).set({\n      sections: newSections\n    }, {\n      merge: true\n    });\n  };\n\n  useEffect(() => {\n    console.log(dataFromInput);\n  });\n  console.log('INPUT DATA --> ', dataFromInput);\n\n  const onSectionClick = async (e, namer) => {\n    e.preventDefault();\n\n    if (namer == activeSection) {\n      return;\n    } // UPDATE ALL DATA OF CURRENT SECTION(?)\n    // const dataToUpload = dataFromInput ? dataFromInput : { inputs: [] }\n\n\n    if (dataFromInput) {\n      await db.collection('currentBusinessPlan').doc(currentUser.uid).collection('data').doc(activeSection).update({\n        values: firebase.firestore.FieldValue.arrayUnion(_objectSpread({\n          id: 'e08855cc-fcbc-46a0-881c-c933d84bd962'\n        }, dataFromInput))\n      });\n    } // Nowa nazwa wybranej sekcji następuje po tym, jak dodamy data z aktualnego inputa, bo jak było przed tym, to data z inputa dodawało się do innej sekcji\n    // setSections1(null);\n\n\n    setActiveSection(namer); // Data input reset\n\n    setDataFromInput(null);\n  };\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: \"col-start-7 col-end-9 mt-12\",\n    children: [/*#__PURE__*/_jsx(\"h1\", {\n      className: \"ml-4 text-primarydark text-base dark:text-background\",\n      children: \"Manage your sections\"\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      className: \"w-full ml-4 mt-1 bg-white flex flex-col py-2 px-4 rounded-2xl\",\n      children: [sections && sections.map(section => {\n        return /*#__PURE__*/_jsxs(\"div\", {\n          onClick: e => onSectionClick(e, section.name),\n          className: \"h-10 bg-background mt-4 rounded-2xl flex justify-around items-center transform hover:scale-105 hover:-translate-y-1 hover:-translate-x-1 transition duration-500 ease-in-out cursor-pointer\",\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            children: /*#__PURE__*/_jsx(\"p\", {\n              className: \"text-primarydark text-sm\",\n              children: section.name\n            })\n          }), /*#__PURE__*/_jsx(Image, {\n            onClick: e => onSectionDelete(e, section.name),\n            src: \"/business-model/delete.svg\",\n            height: 20,\n            width: 20\n          })]\n        }, section.name);\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: \"h-10 mt-4 rounded-2xl flex justify-around items-center\",\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          children: /*#__PURE__*/_jsx(\"button\", {\n            onClick: e => onSectionAdd(e),\n            className: \"hover:bg-primary hover:text-white dark:hover:bg-primarydark dark:hover:text-background focus:outline-none border border-primary text-primary dark:text-primarydark dark:border-primarydark text-sm font-light py-2 px-6 rounded-2xl\",\n            children: \"New section\"\n          })\n        }), /*#__PURE__*/_jsx(\"input\", {\n          className: \"border border-primarydark\",\n          type: \"text\",\n          value: inputValue,\n          onChange: e => setInputValue(e.target.value)\n        })]\n      })]\n    })]\n  });\n};\n\nexport default SectionManager;","map":null,"metadata":{},"sourceType":"module"}