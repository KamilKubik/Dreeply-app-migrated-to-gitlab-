{"ast":null,"code":"import React, { useState, useEffect, useCallback, useRef } from 'react';\nexport const useStateWithPromise = initialState => {\n  const {\n    0: state,\n    1: setState\n  } = useState(initialState);\n  const resolverRef = useRef(null);\n  useEffect(() => {\n    if (resolverRef.current) {\n      resolverRef.current(state);\n      resolverRef.current = null;\n    }\n    /**\r\n     * Since a state update could be triggered with the exact same state again,\r\n     * it's not enough to specify state as the only dependency of this useEffect.\r\n     * That's why resolverRef.current is also a dependency, because it will guarantee,\r\n     * that handleSetState was called in previous render\r\n     */\n\n  }, [resolverRef.current, state]);\n  const handleSetState = useCallback(stateAction => {\n    setState(stateAction);\n    return new Promise(resolve => {\n      resolverRef.current = resolve;\n    });\n  }, [setState]);\n  return [state, handleSetState];\n};","map":null,"metadata":{},"sourceType":"module"}