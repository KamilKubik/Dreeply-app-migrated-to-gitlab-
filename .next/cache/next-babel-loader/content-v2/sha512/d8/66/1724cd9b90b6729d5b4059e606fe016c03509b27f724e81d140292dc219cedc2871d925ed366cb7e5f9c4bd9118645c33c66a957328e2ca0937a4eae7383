{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useRef, useState, useEffect } from 'react'; // import { html2pdf } from 'html2pdf.js';\n\nimport htmlToPdfmake from 'html-to-pdfmake';\nimport pdfMake from 'pdfmake/build/pdfmake';\nimport pdfFonts from 'pdfmake/build/vfs_fonts';\nimport { db } from '../../../../../lib/firebase';\nimport Router from 'next/router';\nimport ChartJsImage from 'chartjs-to-image';\nimport ChartPDF from './ChartPDF';\nimport gsap, { Linear } from 'gsap'; // import fs from 'fs';\n\nconst fs = require('fs');\n\nconst PDFDocument = ({\n  projectId,\n  pdfChartsCreate\n}) => {\n  // const containerRef = useRef();\n  const {\n    0: sections,\n    1: setSections\n  } = useState();\n  const {\n    0: document1,\n    1: setDocument\n  } = useState();\n  const {\n    0: imagesUrl,\n    1: setImagesUrl\n  } = useState();\n  console.log(projectId);\n  useEffect(async () => {\n    if (projectId) {\n      await db.collection('projects').doc(projectId).collection('businessPlan').doc(Router.query.project).collection('inputs').onSnapshot(querySnapshot => {\n        const sectionsData = querySnapshot.docs.map(doc => {\n          const data = doc.data(); // data['id'] = doc.id;\n\n          return data;\n        });\n        sectionsData.sort((a, b) => a.position - b.position);\n        console.log('Sections data --> ', sectionsData);\n        setSections(sectionsData); // pdfChartsCreate(sectionsData);\n\n        const imagesArray = [];\n        setImagesUrl(imagesArray);\n        sectionsData.map(section => {\n          section.fields.map(field => {\n            if (field.type == 'chart') {\n              const colors = field.chartType == 'Pie chart' || field.chartType == 'Doughnut chart' ? ['rgba(205,220,57,1)', 'rgba(255,235,59,1)', 'rgba(255,193,7,1)', 'rgba(255,152,0,1)', 'rgba(255,87,34,1)', 'rgba(244,67,54,1)', 'rgba(233,30,99,1)', 'rgba(156,39,176,1)', 'rgba(103,58,183,1)', 'rgba(63,81,181,1)', 'rgba(96,125,139,1)', 'rgba(121,85,72,1)'] : field.chartType == 'Line chart' || field.chartType == 'Area chart' ? 'rgba(255,185,0 ,1 )' : ['rgba(255,185,0 ,1 )', 'rgba(255,185,0 ,1 )', 'rgba(255,185,0 ,1 )', 'rgba(255,185,0 ,1 )', 'rgba(255,185,0 ,1 )', 'rgba(255,185,0 ,1 )', 'rgba(255,185,0 ,1 )', 'rgba(255,185,0 ,1 )', 'rgba(255,185,0 ,1 )', 'rgba(255,185,0 ,1 )', 'rgba(255,185,0 ,1 )', 'rgba(255,185,0 ,1 )'];\n              const colors1 = field.chartType == 'Pie chart' || field.chartType == 'Doughnut chart' ? ['rgba(205,220,57,1)', 'rgba(255,235,59,1)', 'rgba(255,193,7,1)', 'rgba(255,152,0,1)', 'rgba(255,87,34,1)', 'rgba(244,67,54,1)', 'rgba(233,30,99,1)', 'rgba(156,39,176,1)', 'rgba(103,58,183,1)', 'rgba(63,81,181,1)', 'rgba(96,125,139,1)', 'rgba(121,85,72,1)'] : field.chartType == 'Line chart' || field.chartType == 'Area chart' ? 'rgba(0,204,106 ,1 )' : ['rgba(0,204,106 ,1 )', 'rgba(0,204,106 ,1 )', 'rgba(0,204,106 ,1 )', 'rgba(0,204,106 ,1 )', 'rgba(0,204,106 ,1 )', 'rgba(0,204,106 ,1 )', 'rgba(0,204,106 ,1 )', 'rgba(0,204,106 ,1 )', 'rgba(0,204,106 ,1 )', 'rgba(0,204,106 ,1 )', 'rgba(0,204,106 ,1 )', 'rgba(0,204,106 ,1 )'];\n              const colors2 = field.chartType == 'Pie chart' || field.chartType == 'Doughnut chart' ? ['rgba(205,220,57,1)', 'rgba(255,235,59,1)', 'rgba(255,193,7,1)', 'rgba(255,152,0,1)', 'rgba(255,87,34,1)', 'rgba(244,67,54,1)', 'rgba(233,30,99,1)', 'rgba(156,39,176,1)', 'rgba(103,58,183,1)', 'rgba(63,81,181,1)', 'rgba(96,125,139,1)', 'rgba(121,85,72,1)'] : field.chartType == 'Line chart' || field.chartType == 'Area chart' ? 'rgba(0,120,215 ,1 )' : ['rgba(0,120,215 ,1 )', 'rgba(0,120,215 ,1 )', 'rgba(0,120,215 ,1 )', 'rgba(0,120,215 ,1 )', 'rgba(0,120,215 ,1 )', 'rgba(0,120,215 ,1 )', 'rgba(0,120,215 ,1 )', 'rgba(0,120,215 ,1 )', 'rgba(0,120,215 ,1 )', 'rgba(0,120,215 ,1 )', 'rgba(0,120,215 ,1 )', 'rgba(0,120,215 ,1 )'];\n              const colors3 = field.chartType == 'Pie chart' || field.chartType == 'Doughnut chart' ? ['rgba(205,220,57,1)', 'rgba(255,235,59,1)', 'rgba(255,193,7,1)', 'rgba(255,152,0,1)', 'rgba(255,87,34,1)', 'rgba(244,67,54,1)', 'rgba(233,30,99,1)', 'rgba(156,39,176,1)', 'rgba(103,58,183,1)', 'rgba(63,81,181,1)', 'rgba(96,125,139,1)', 'rgba(121,85,72,1)'] : field.chartType == 'Line chart' || field.chartType == 'Area chart' ? 'rgba(231,72,86 ,1 )' : ['rgba(231,72,86 ,1 )', 'rgba(231,72,86 ,1 )', 'rgba(231,72,86 ,1 )', 'rgba(231,72,86 ,1 )', 'rgba(231,72,86 ,1 )', 'rgba(231,72,86 ,1 )', 'rgba(231,72,86 ,1 )', 'rgba(231,72,86 ,1 )', 'rgba(231,72,86 ,1 )', 'rgba(231,72,86 ,1 )', 'rgba(231,72,86 ,1 )', 'rgba(231,72,86 ,1 )'];\n              const colors4 = field.chartType == 'Pie chart' || field.chartType == 'Doughnut chart' ? ['rgba(205,220,57,1)', 'rgba(255,235,59,1)', 'rgba(255,193,7,1)', 'rgba(255,152,0,1)', 'rgba(255,87,34,1)', 'rgba(244,67,54,1)', 'rgba(233,30,99,1)', 'rgba(156,39,176,1)', 'rgba(103,58,183,1)', 'rgba(63,81,181,1)', 'rgba(96,125,139,1)', 'rgba(121,85,72,1)'] : field.chartType == 'Line chart' || field.chartType == 'Area chart' ? 'rgba(126,115,95 ,1 )' : ['rgba(126,115,95 ,1 )', 'rgba(126,115,95 ,1 )', 'rgba(126,115,95 ,1 )', 'rgba(126,115,95 ,1 )', 'rgba(126,115,95 ,1 )', 'rgba(126,115,95 ,1 )', 'rgba(126,115,95 ,1 )', 'rgba(126,115,95 ,1 )', 'rgba(126,115,95 ,1 )', 'rgba(126,115,95 ,1 )', 'rgba(126,115,95 ,1 )', 'rgba(126,115,95 ,1 )'];\n              const colors5 = field.chartType == 'Pie chart' || field.chartType == 'Doughnut chart' ? ['rgba(205,220,57,1)', 'rgba(255,235,59,1)', 'rgba(255,193,7,1)', 'rgba(255,152,0,1)', 'rgba(255,87,34,1)', 'rgba(244,67,54,1)', 'rgba(233,30,99,1)', 'rgba(156,39,176,1)', 'rgba(103,58,183,1)', 'rgba(63,81,181,1)', 'rgba(96,125,139,1)', 'rgba(121,85,72,1)'] : field.chartType == 'Line chart' || field.chartType == 'Area chart' ? 'rgba(177,70,194 ,1 )' : ['rgba(177,70,194 ,1 )', 'rgba(177,70,194 ,1 )', 'rgba(177,70,194 ,1 )', 'rgba(177,70,194 ,1 )', 'rgba(177,70,194 ,1 )', 'rgba(177,70,194 ,1 )', 'rgba(177,70,194 ,1 )', 'rgba(177,70,194 ,1 )', 'rgba(177,70,194 ,1 )', 'rgba(177,70,194 ,1 )', 'rgba(177,70,194 ,1 )', 'rgba(177,70,194 ,1 )'];\n              const data = {\n                labels: field.labels && [...field.labels.map(label => {\n                  if (label !== '') {\n                    return label;\n                  } else {\n                    return '';\n                  }\n                })],\n                datasets: [// Dataset1\n                {\n                  label: field.dataset1Label && field.dataset1Label,\n                  data: field.dataset1 && field.dataset1.map(data => {\n                    if (data !== '') {\n                      return data;\n                    }\n                  }),\n                  backgroundColor: colors,\n                  borderWidth: field.chartType == 'Area chart' ? 0 : field.chartType == 'Pie chart' || field.chartType == 'Doughnut chart' && 2\n                }, // Dataset2\n                {\n                  label: field.dataset2Label && field.dataset2Label,\n                  data: field.dataset2 && field.dataset2.map(data => {\n                    if (data !== '') {\n                      return data;\n                    }\n                  }),\n                  backgroundColor: colors1,\n                  borderWidth: field.chartType == 'Area chart' ? 0 : field.chartType == 'Pie chart' || field.chartType == 'Doughnut chart' && 2\n                }, // Dataset3\n                {\n                  label: field.dataset3Label && field.dataset3Label,\n                  data: field.dataset3 && field.dataset3.map(data => {\n                    if (data !== '') {\n                      return data;\n                    }\n                  }),\n                  backgroundColor: colors2,\n                  borderWidth: field.chartType == 'Area chart' ? 0 : field.chartType == 'Pie chart' || field.chartType == 'Doughnut chart' && 2\n                }, // Dataset4\n                {\n                  label: field.dataset4Label && field.dataset4Label,\n                  data: field.dataset4 && field.dataset4.map(data => {\n                    if (data !== '') {\n                      return data;\n                    }\n                  }),\n                  backgroundColor: colors3,\n                  borderWidth: field.chartType == 'Area chart' ? 0 : field.chartType == 'Pie chart' || field.chartType == 'Doughnut chart' && 2\n                }, // Dataset5\n                {\n                  label: field.dataset5Label && field.dataset5Label,\n                  data: field.dataset5 && field.dataset5.map(data => {\n                    if (data !== '') {\n                      return data;\n                    }\n                  }),\n                  backgroundColor: colors4,\n                  borderWidth: field.chartType == 'Area chart' ? 0 : field.chartType == 'Pie chart' || field.chartType == 'Doughnut chart' && 2\n                }, // Dataset6\n                {\n                  label: field.dataset6Label && field.dataset6Label,\n                  data: field.dataset6 && field.dataset6.map(data => {\n                    if (data !== '') {\n                      return data;\n                    }\n                  }),\n                  backgroundColor: colors5,\n                  borderWidth: field.chartType == 'Area chart' ? 0 : field.chartType == 'Pie chart' || field.chartType == 'Doughnut chart' && 2\n                }]\n              };\n              const datas = data.datasets.map(dataset => {\n                console.log(dataset.data[0]);\n                const test1 = dataset.data.map(datases => {\n                  if (datases !== undefined) {\n                    return datases;\n                  } else {\n                    return '';\n                  }\n                });\n                const test = test1.map((datarer, index) => {\n                  if (data.labels[index] !== '') {\n                    return datarer;\n                  }\n                });\n                const test2 = test.filter(obj => obj !== undefined);\n                return test2;\n              });\n              const fill = field.chartType == 'Line chart' ? false : undefined;\n              const newDatasets = [{\n                label: data.datasets[0].label,\n                data: datas[0],\n                backgroundColor: data.datasets[0].backgroundColor,\n                borderColor: field.chartType == 'Line chart' ? 'rgba(255,185,0 ,1 )' : 'rgb(255, 255, 255)',\n                borderWidth: data.datasets[0].borderWidth,\n                fill: fill\n              }, {\n                label: data.datasets[1].label,\n                data: datas[1],\n                backgroundColor: data.datasets[1].backgroundColor,\n                borderColor: field.chartType == 'Line chart' ? 'rgba(0,204,106 ,1 )' : 'rgb(255, 255, 255)',\n                borderWidth: data.datasets[1].borderWidth,\n                fill: fill\n              }, {\n                label: data.datasets[2].label,\n                data: datas[2],\n                backgroundColor: data.datasets[2].backgroundColor,\n                borderColor: field.chartType == 'Line chart' ? 'rgba(0,120,215 ,1 )' : 'rgb(255, 255, 255)',\n                borderWidth: data.datasets[2].borderWidth,\n                fill: fill\n              }, {\n                label: data.datasets[3].label,\n                data: datas[3],\n                backgroundColor: data.datasets[3].backgroundColor,\n                borderColor: field.chartType == 'Line chart' ? 'rgba(231,72,86 ,1 )' : 'rgb(255, 255, 255)',\n                borderWidth: data.datasets[3].borderWidth,\n                fill: fill\n              }, {\n                label: data.datasets[4].label,\n                data: datas[4],\n                backgroundColor: data.datasets[4].backgroundColor,\n                borderColor: field.chartType == 'Line chart' ? 'rgba(126,115,95 ,1 )' : 'rgb(255, 255, 255)',\n                borderWidth: data.datasets[4].borderWidth,\n                fill: fill\n              }, {\n                label: data.datasets[5].label,\n                data: datas[5],\n                backgroundColor: data.datasets[5].backgroundColor,\n                borderColor: field.chartType == 'Line chart' ? 'rgba(177,70,194 ,1 )' : 'rgb(255, 255, 255)',\n                borderWidth: data.datasets[5].borderWidth,\n                fill: fill\n              }];\n              const chartType = [field.chartType == 'Bar chart' ? 'bar' : '', field.chartType == 'Reverse chart' ? 'horizontalBar' : '', field.chartType == 'Line chart' ? 'line' : '', field.chartType == 'Pie chart' ? 'pie' : '', field.chartType == 'Doughnut chart' ? 'doughnut' : '', field.chartType == 'Area chart' ? 'line' : ''];\n              const toSaveChart = new ChartJsImage();\n              toSaveChart.setConfig({\n                type: chartType.filter(type => type !== ''),\n                data: {\n                  labels: data.labels.filter(label => label !== ''),\n                  datasets: newDatasets.filter(dataset => dataset.label !== '')\n                },\n                options: {\n                  responsive: true,\n                  legend: {\n                    position: 'bottom'\n                  },\n                  // defaultFontFamily: (Chart.defaults.global.defaultFontFamily = 'Comfortaa'),\n                  scales: {\n                    yAxes: [{\n                      stacked: field.stacked == true ? true : false,\n                      ticks: {\n                        beginAtZero: true\n                      }\n                    }],\n                    xAxes: [{\n                      stacked: field.stacked == true ? true : false,\n                      ticks: {\n                        beginAtZero: true\n                      }\n                    }]\n                  }\n                }\n              });\n              toSaveChart.setFormat('png').setDevicePixelRatio(2.0);\n              const imageUrl = toSaveChart.toDataUrl();\n              imageUrl.then(image => {\n                console.log(image);\n                imagesArray.push({\n                  imageUrl: image,\n                  imageIndex: field.index\n                });\n                console.log(imagesArray);\n                setImagesUrl(imagesArray);\n              });\n            }\n          });\n        });\n      });\n    }\n  }, [projectId]);\n  pdfMake.vfs = pdfFonts.pdfMake.vfs;\n\n  const onDocumentSave1 = () => {\n    // Deleting commas between the array elements\n    console.log(sections);\n    const pdfContent = htmlToPdfmake( // `<div><p style='color: #6C63FF'>Hello from pdf document1<br />${helper ? '<p>Hello from helper</p>' : ''}</p></div>`\n    `<div>\n          <div style='height: '100%'>\n            <h1 style='text-align: center'>Business plan</h1>\n          </div>\n          <div>${sections.map(section => {\n      return `<h3 class='pdf-pagebreak-before' style='margin-bottom: 20px'>${section.title}</h3>\n              ${section.fields.map(field => {\n        console.log(field.type);\n\n        if (field.type == 'header') {\n          return `<h5>${field.title}</h5>`;\n        }\n\n        if (field.type == 'text') {\n          console.log(field.body.includes('ql-align-center'));\n\n          if (field.body.includes('ql-align-center')) {\n            const newFieldBody = field.body.replace('class=\"ql-align-center\"', \"style='text-align: center'\");\n            return `<div>${newFieldBody}</div>`;\n          }\n\n          if (field.body.includes('ql-align-right')) {\n            const newFieldBody = field.body.replace('class=\"ql-align-right\"', \"style='text-align: right'\");\n            return `<div>${newFieldBody}</div>`;\n          }\n\n          if (field.body.includes('ql-align-justify')) {\n            const newFieldBody = field.body.replace('class=\"ql-align-justify\"', \"style='text-align: justify'\");\n            return `<div>${newFieldBody}</div>`;\n          }\n\n          return `<div>${field.body}</div>`;\n        }\n\n        if (field.type == 'chart') {\n          const imagesData = imagesUrl && imagesUrl.map(image => {\n            console.log('Images url --> ', imagesUrl);\n            console.log('Field --> ', field);\n\n            if (image.imageIndex == field.index) {\n              return `<img src='${image.imageUrl}' width=\"675\" style='margin-top: 30px; margin-bottom: 30px;' />`;\n            }\n          }).join('');\n          return imagesData;\n        }\n\n        if (field.type == 'spacing') {\n          return `<br />`;\n        }\n\n        if (field.type == 'table') {\n          console.log('Table --> ', field);\n          return `<table style=\"margin-top: 30px; margin-bottom: 30px;\">\n                      <thead>\n                          <tr>\n                              ${field.headRows.map((row, headRowIndex) => `<th class=\"thstyle\" style=\"background-color: #6C63FF; margin-top: 8px; margin-bottom: 8px; margin-left: 10px; margin-right: 10px; color: #FCFEFE;\">${row}</th>`).join('')}\n                          </tr>\n                      </thead>\n                      <tbody>\n                        ${field.rows.map((row, rowIndex) => `<tr\">${row.row.map((rowData, rowDataIndex) => `<td style=\"margin-top: 8px; margin-bottom: 8px; margin-left: 10px; margin-right: 10px; color: #0a1230;\">${rowData}</td>`).join('')}</tr>`).join('')}\n                    </tbody>\n                    </table>`;\n        }\n      }).join('')}\n              `;\n    }).join('')}</div>\n      </div>`, {\n      defaultStyles: {\n        p: ''\n      }\n    }, {\n      tableAutoSize: true\n    });\n    const pdfDocument = {\n      content: pdfContent,\n      styles: {\n        red: {\n          // font: 'Comfortaa',\n          color: 'red',\n          marginLeft: 200\n        },\n        // Insert\n        'html-p': {\n          marginBottom: 15\n        },\n        'ql-indent-1': {\n          marginLeft: 15\n        },\n        'ql-indent-2': {\n          marginLeft: 30\n        },\n        'ql-indent-3': {\n          marginLeft: 45\n        },\n        'ql-indent-4': {\n          marginLeft: 60\n        },\n        'ql-indent-5': {\n          marginLeft: 75\n        },\n        'ql-indent-6': {\n          marginLeft: 90\n        },\n        'ql-indent-7': {\n          marginLeft: 105\n        },\n        'ql-indent-8': {\n          marginLeft: 120\n        },\n        'html-table': {\n          'border-radius': '25px',\n          'margin-top': '30px',\n          'margin-bottom': '30px'\n        }\n      },\n      pageBreakBefore: function (currentNode) {\n        return currentNode.style && currentNode.style.indexOf('pdf-pagebreak-before') > -1;\n      }\n    };\n    const pdfDocGenerator = pdfMake.createPdf(pdfDocument);\n    pdfDocGenerator.download(`${Router.query.project}/business-plan.pdf`);\n  };\n\n  const saveContainer = useRef();\n  const dropdownButton = useRef();\n  const dropdownContainer = useRef();\n  const {\n    0: dropdownButtonColorHelper,\n    1: setDropdownButtonColorHelper\n  } = useState(false);\n  const {\n    0: dropdownContainerHelper,\n    1: setDropdownContainerHelper\n  } = useState(false);\n\n  const onSaveDropdownShow = () => {\n    if (!dropdownContainerHelper) {\n      gsap.to(dropdownContainer.current, {\n        autoAlpha: 1,\n        duration: 1,\n        ease: Linear\n      }); // gsap.to(dropdownButton.current, { backgroundColor: '#6C63FF', color: '#f8f9fb', duration: 1, ease: Linear });\n\n      setDropdownContainerHelper(true);\n      setDropdownButtonColorHelper(true);\n    } else if (dropdownContainerHelper) {\n      gsap.to(dropdownContainer.current, {\n        autoAlpha: 0,\n        duration: 1,\n        ease: Linear\n      }); // gsap.to(dropdownButton.current, { backgroundColor: '#f8f9fb', color: '#6C63FF', duration: 1, ease: Linear });\n\n      setDropdownContainerHelper(false);\n      setDropdownButtonColorHelper(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsx(\"div\", {\n    ref: saveContainer,\n    className: \"relative flex justify-start\",\n    children: /*#__PURE__*/_jsxs(\"div\", {\n      className: \"relative w-full flex justify-end items-center\",\n      children: [/*#__PURE__*/_jsx(\"button\", {\n        ref: dropdownButton,\n        onClick: onSaveDropdownShow,\n        className: `hover:bg-primary hover:text-white dark:hover:bg-primarydark dark:hover:text-background focus:outline-none border border-primary text-primary text-sm screenLarge:text-base font-light py-2 px-8 rounded-2xl mt-2 dark:text-primarydark dark:border-primarydark ${dropdownButtonColorHelper ? 'bg-primary text-background dark:bg-primarydark dark:text-background' : ''}`,\n        children: \"Save my work\"\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        ref: dropdownContainer,\n        className: \"absolute bg-white rounded-2xl shadow-xl p-6 top-14 z-50 invisible opacity-0\",\n        children: [/*#__PURE__*/_jsxs(\"div\", {\n          className: \"flex items-center justify-start\",\n          children: [/*#__PURE__*/_jsx(\"img\", {\n            src: \"/mobile-navbar/success.svg\",\n            height: 26,\n            width: 26\n          }), /*#__PURE__*/_jsx(\"p\", {\n            className: \"text-lg ml-2\",\n            children: \"Show the world your work!\"\n          })]\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          className: \"px-6 py-4 bg-background rounded-2xl mt-2 pr-6\",\n          children: [/*#__PURE__*/_jsxs(\"div\", {\n            children: [/*#__PURE__*/_jsx(\"p\", {\n              className: \"flex\",\n              children: \"Save as PDF:\"\n            }), /*#__PURE__*/_jsx(\"img\", {\n              onClick: onDocumentSave1,\n              src: \"/mobile-navbar/pdf.svg\",\n              height: 30,\n              width: 30,\n              className: \"mt-2 cursor-pointer\"\n            })]\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            className: \"w-full justify-start items-center mt-4\",\n            children: [/*#__PURE__*/_jsx(\"p\", {\n              children: \"Share your competitors analysis with this public link:\"\n            }), /*#__PURE__*/_jsxs(\"div\", {\n              className: \"w-full flex mt-2\",\n              children: [/*#__PURE__*/_jsx(\"input\", {\n                value: \"www.project.com\",\n                className: \"bg-linkBackground text-sm px-2 py-1 dark:text-primarydark\"\n              }), /*#__PURE__*/_jsx(\"img\", {\n                src: \"/mobile-navbar/foreign.svg\",\n                height: 28,\n                width: 28\n              })]\n            })]\n          })]\n        })]\n      })]\n    })\n  });\n};\n\nexport default PDFDocument;","map":null,"metadata":{},"sourceType":"module"}