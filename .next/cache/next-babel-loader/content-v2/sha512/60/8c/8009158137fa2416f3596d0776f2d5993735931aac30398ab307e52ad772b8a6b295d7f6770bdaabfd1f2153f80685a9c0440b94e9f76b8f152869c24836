{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component, useEffect, useMemo, useState } from 'react';\nimport firebase, { db } from '../../../../../lib/firebase';\nimport { useAuth } from '../../../../../lib/newAuth';\nimport NavbarTemplate from '../../../NavbarTemplate';\nimport EditorInputElement from './Editor';\nimport SectionManager from './SectionManager';\nimport { useStateWithPromise } from '../../../../../utils/useStateWithPromise';\nimport { useCustomState } from '../../../../../utils/useCustomState';\nimport { v4 as uuidv4 } from 'uuid';\nimport ChartComponent from './Chart';\nimport PDFDocument from './PDFDocument';\nimport Image from 'next/image';\nimport gsap, { Linear } from 'gsap';\nimport Cookies from 'js-cookie';\nimport Router from 'next/router';\nimport ChartJsImage from 'chartjs-to-image'; // import { useAsyncCallback } from 'react-async-hook';\n// const BusinessPlanApp = () => {\n//   const [sections, setSections] = useStateWithPromise(null);\n//   const [selectedSection, setSelectedSection] = useState(null);\n//   const [selectedSectionIndex, setSelectedSectionIndex] = useState(null);\n//   const { currentUser } = useAuth();\n//   useEffect(() => {\n//     db.collection('currentBusinessPlan')\n//       .doc(currentUser.uid)\n//       .collection('inputs')\n//       .onSnapshot((querySnapshot) => {\n//         const sections = querySnapshot.docs.map((_doc) => {\n//           const data = _doc.data();\n//           data['id'] = _doc.id;\n//           return data;\n//         });\n//         setSections(sections);\n//       });\n//   }, [selectedSection, deleteHelper]);\n//   const selectSectionPage = (section, index) => {\n//     console.log(section);\n//     setSelectedSectionIndex(index);\n//     setSelectedSection(section);\n//   };\n//   const sectionUpdate = (id, sectionObj) => {\n//     console.log(id, sectionObj);\n//     console.log('ss', selectedSection);\n//     console.log(sections);\n//     console.log(deleteHelper);\n//     // if (id == selectedSection.id && !deleteHelper) {\n//     // const willsee = sections.filter((_section) => _section.id === id);\n//     // console.log(willsee);\n//     // PROBLEM W TYM, ŻE TO PRÓBOJE ZUPDATOWAĆ DOKUMENT, KTÓREGO NIE MA, BO WŁAŚNIE GO USUNELIŚMY, TYLKO TO USUWANIE NIE JEST ASYNCHRONICZNE TAM U GÓRY\n//     // sectionObj.title !== '' || sectionObj.body !== '' id == selectedSection.id\n//     console.log(sections.includes(sectionObj.title));\n//     if (sectionObj !== selectedSection && sectionObj.title && sectionObj.body && sectionObj.id && typeof sectionObj != 'undefined' && deleteHelper == false) {\n//       db.collection('currentBusinessPlan')\n//       .doc(currentUser.uid)\n//       .collection('inputs')\n//       .doc(id)\n//       .update({\n//         title: sectionObj.title,\n//         body: sectionObj.body,\n//         timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n//       });\n//       console.log(' --- UPDATED --- ');\n//       setDeleteHelper(false);\n//       return\n//     } else {\n//       return\n//     }\n//   };\n//   const [loading, setLoading] = useState(false);\n//   const [newIdSection, setNewIdSection] = useState(null);\n//   // ADD NEW SECTION\n//   const newSectionPage = async (title) => {\n//     const section = {\n//       title,\n//       body: '',\n//     };\n//     const newFromDB = await db\n//       .collection('currentBusinessPlan')\n//       .doc(currentUser.uid)\n//       .collection('inputs')\n//       .add({\n//         title: section.title,\n//         body: section.body,\n//         timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n//       });\n//     const newId = newFromDB.id;\n//     setNewIdSection(newId);\n//     console.log(newId);\n//     setLoading(true);\n//     await setSections([...sections, section]);\n//     console.log(sections);\n//     // To, co dzieje się pod tą linijką, służy między innymi temu, żeby wyświetlić od razu nową sekcję, po jej utworzeniu (po prostu tą nową sekcję, którą tworzymy, przypisujemy jako selectedSection).\n//     setLoading(true);\n//     // setTimeout(() => {\n//     //   console.log('sections after timeout - ', sections);\n//     //   const newSectionIndex = sections.indexOf(\n//     //     sections.filter((_section) => _section.id === newId)[0]\n//     //   );\n//     //   console.log(newSectionIndex);\n//     //   setSelectedSection(sections[newSectionIndex]);\n//     //   setSelectedSectionIndex(newSectionIndex);\n//     //   console.log('SELECTED SECTION --> ', selectedSection);\n//     // }, 2000)\n//   };\n//   console.log('SECTIONS --> ', sections);\n//   console.log('SELECTED SECTION --> ', selectedSection);\n//   useEffect(() => {\n//     if (loading) {\n//       const newSectionIndex = sections.indexOf(\n//         sections.filter((_section) => _section.id === newIdSection)[0]\n//       );\n//       console.log(newSectionIndex);\n//       console.log('here? - ', selectedSection);\n//       if (newSectionIndex !== -1) {\n//         setSelectedSection(sections[newSectionIndex]);\n//         setSelectedSectionIndex(newSectionIndex);\n//       }\n//       // reset\n//       setNewIdSection(null);\n//       setLoading(false);\n//     }\n//   }, [loading]);\n//   const [deleteHelper, setDeleteHelper] = useCustomState(false);\n//   const [what, setWhat] = useState();\n//   // DELETE SECTION\n//   const deleteSectionPage = (section) => {\n//     setDeleteHelper(true);\n//     const sectionIndex = sections.indexOf(section);\n//     // To musi być async / await, asynchroniczne jakimś cudem !!!\n//     // setSections(async () => await sections.filter((_section) => _section !== section));\n//     // setSections(sections.filter((_section) => _section !== section));\n//     async () => await setSections(sections.filter((_section) => _section !== section)).then((sect) => sect);\n//     if (selectedSectionIndex === sectionIndex) {\n//       // Jeśli usuwamy sekcję, którą obecnie mamy wybraną (activeSection), to robimy to:\n//       setSelectedSectionIndex(null);\n//       setSelectedSection(null);\n//     } else {\n//       // Po tym, jak usuniemy element, to selectedSection nie istnieje, dlatego wybieramy jako selectedSection, następną sekcję z listy\n//       // --> FIRST VERSION\n//       // sections.length >= 1\n//       //   ? selectSectionPage(\n//       //       sections[selectedSectionIndex - 1],\n//       //       selectedSectionIndex - 1\n//       //     )\n//       //   : (setSelectedSectionIndex(null), setSelectedSection(null));\n//       // --> SECOND VERSION (chodzi o to, żeby po usunięciu danej sekcji, selectedSection nie było undefined)\n//       if (sections.length >= 1) {\n//         selectedSectionIndex < sectionIndex\n//           ? selectSectionPage(\n//               sections[selectedSectionIndex],\n//               selectedSectionIndex\n//             )\n//           : selectSectionPage(\n//               sections[selectedSectionIndex - 1],\n//               selectedSectionIndex - 1\n//             );\n//       } else {\n//         setSelectedSection(null);\n//         setSelectedSectionIndex(null);\n//       }\n//     }\n//     db.collection('currentBusinessPlan')\n//       .doc(currentUser.uid)\n//       .collection('inputs')\n//       .doc(section.id)\n//       .delete();\n//   };\n//   return useMemo(\n//     () => (\n//       <NavbarTemplate>\n//         <div className='min-h-screen w-full relative flex flex-col items-center'>\n//           <div className='w-full max-w-full relative mt-16 px-32'>\n//             <div className='grid grid-cols-2 grid-rows-1 grid-flow-col'>\n//               <div className='flex items-center'>\n//                 <svg\n//                   height='30'\n//                   width='30'\n//                   className='fill-current text-primary dark:text-primarydark'\n//                   xmlns='http://www.w3.org/2000/svg'\n//                   viewBox='0 0 128 128'\n//                 >\n//                   <title>Landing Success</title>\n//                   <g id='Landing_Success' data-name='Landing Success'>\n//                     <path\n//                       className='cls-1'\n//                       d='M109.3,90.1A46,46,0,0,0,65,36V20.08c1.78-.62,7.21-2.14,12.57.23a19.33,19.33,0,0,0,14.82,0c.87-.38.61.31.61-17.93a1,1,0,0,0-1.43-.93c-.07,0-6.69,2.87-13.18,0A19.41,19.41,0,0,0,65,.93,1,1,0,0,0,63,1V36a45.86,45.86,0,0,0-28.66,10.8C16.18,40.48,4,40,.79,45.51-2.29,50.86,3.94,59.3,10,65.68A11,11,0,0,0,18,83c.81,38.41,46.08,59.2,75.66,34.21,8.53,3,29,9.15,33.55,1.31C130.39,113,123.86,102.65,109.3,90.1ZM77.59,3.31A19.39,19.39,0,0,0,91,3.83V18.68c-1.79.62-7.22,2.13-12.57-.23A19.19,19.19,0,0,0,65,17.93V3.08C66.81,2.46,72.24,1,77.59,3.31ZM65,45v-7c39.69.91,58,50.27,28.21,76.81C71.32,107,46,92.66,27.77,78.64a11,11,0,0,0-3.2-16.13A43.88,43.88,0,0,1,63,38.06V45A1,1,0,0,0,65,45ZM32.55,48.36a46.21,46.21,0,0,0-9.83,13.28,10.93,10.93,0,0,0-11.4,2.47C-8.39,43.23,5.23,39.08,32.55,48.36ZM10,72a9,9,0,1,1,9,9A9,9,0,0,1,10,72Zm10,11a11,11,0,0,0,6.34-2.82c18.45,14.21,43.45,28.35,65.05,36.22C63,139.16,20.83,119.1,20.05,83Zm105.4,34.5c-2.51,4.35-14,3.62-30-1.85a45.61,45.61,0,0,0,13.42-23.21C121.59,103.58,128,113.12,125.45,117.47Z'\n//                     />\n//                   </g>\n//                 </svg>\n//                 <p className='text-primarydark text-2xl mt-2 pl-2 dark:text-background'>\n//                   Business plan\n//                 </p>\n//               </div>\n//               <div className='flex justify-end mt-4'>\n//                 <button className='hover:bg-primary hover:text-white dark:hover:bg-primarydark dark:hover:text-background focus:outline-none border border-primary text-primary text-sm font-light py-2 px-8 rounded-2xl mt-2 dark:text-primarydark dark:border-primarydark'>\n//                   Settings\n//                 </button>\n//               </div>\n//             </div>\n//             <div>\n//               <h1 className='text-secondary text-md text-gray'>\n//                 Create your business plan any way you want\n//               </h1>\n//             </div>\n//             {/* SECTIONS */}\n//             <div className='grid grid-cols-8fr grid-flow-col'>\n//               <div className='col-start-1 col-end-7 w-full h-maxcontent mt-12'>\n//                 <h1 className='text-primarydark text-base dark:text-background'>\n//                   Manage your input\n//                 </h1>\n//                 <div className='relative flex flex-col h-full w-full flex px-8 pt-8 pb-8 rounded-2xl bg-white dark:bg-background mt-1'>\n//                   {selectedSection ? (\n//                     (console.log('selected --> ', selectedSection),\n//                     (\n//                       <EditorInputElement\n//                         // sectionUpdate={sectionUpdate}\n//                         // sectionUpdate={sectionUpdate}\n//                         sectionUpdate={sectionUpdate}\n//                         selectedSection={selectedSection}\n//                         selectedSectionIndex={selectedSectionIndex}\n//                         sections={sections}\n//                       />\n//                     ))\n//                   ) : (\n//                     <div>Text section or chart???</div>\n//                   )}\n//                 </div>\n//               </div>\n//               <SectionManager\n//                 sections={sections}\n//                 selectedSectionIndex={selectedSectionIndex}\n//                 selectSectionPage={selectSectionPage}\n//                 newSectionPage={newSectionPage}\n//                 deleteSectionPage={deleteSectionPage}\n//               />\n//             </div>\n//           </div>\n//         </div>\n//       </NavbarTemplate>\n//     ),\n//     [sections, selectedSectionIndex, selectedSection]\n//   );\n// };\n// export default BusinessPlanApp;\n// Class based component\n\nclass BusinessPlanApp extends Component {\n  constructor() {\n    super();\n\n    _defineProperty(this, \"componentDidMount\", async () => {\n      // db.collection('currentBusinessPlan')\n      //   .doc('GrcvhyJwvlWVy31QsiudoQKdKI72')\n      //   .collection('inputs')\n      //   .onSnapshot((serverUpdate) => {\n      //     const sections = serverUpdate.docs.map((_doc) => {\n      //       const data = _doc.data();\n      //       data['id'] = _doc.id;\n      //       return data;\n      //     });\n      //     console.log(sections);\n      //     sections.sort((a, b) => b.createdAt - a.createdAt);\n      //     this.setState({ sections: sections });\n      //   });\n      const userUid = await Cookies.get('uid'); // console.log(Router.query.project);\n\n      if (userUid) {\n        await db.collection('projects').where('uid', '==', userUid).where('projectName', '==', Router.query.project).get().then(querySnapshot => {\n          console.log(querySnapshot);\n          const querySnap = querySnapshot.forEach(doc => {\n            console.log(doc.data());\n            return this.setState({\n              projectId: doc.data().projectId\n            });\n          });\n          console.log(querySnap);\n          return querySnap;\n        });\n        console.log(this.state.projectId);\n        await db.collection('projects').doc(this.state.projectId).collection('businessPlan').doc(Router.query.project).collection('inputs').onSnapshot(serverUpdate => {\n          const sections = serverUpdate.docs.map(_doc => {\n            const data = _doc.data();\n\n            data['id'] = _doc.id;\n            return data;\n          });\n          console.log(sections); // sections.sort((a, b) => b.createdAt - a.createdAt);\n\n          sections.sort((a, b) => a.position - b.position);\n          this.setState({\n            sections: sections\n          }); // Initial section\n\n          if (sections && sections.length !== 0 && !this.state.selectedSection) {\n            this.setState({\n              selectedSection: sections[0]\n            });\n          }\n        });\n      } // await db.collection('projects')\n      // .doc(this.state.projectId)\n      // .collection('businessPlan')\n      // .where('pathName', '==', Router.query.project)\n      // .where('projectId', '==', this.state.projectId)\n      // .onSnapshot((serverUpdate) => {\n      //   const sections = serverUpdate.docs.map((doc) => {\n      //    const data = doc.data();\n      //    data['id'] = doc.id;\n      //    return data.sections;\n      //   })\n      //   const sectionsArray = sections[0];\n      //   console.log(sectionsArray);\n      // })\n      //   db.collection('currentBusinessPlan')\n      // .doc('GrcvhyJwvlWVy31QsiudoQKdKI72')\n      // .collection('inputs')\n      // .onSnapshot((serverUpdate) => {\n      //   const sections = serverUpdate.docs.map((_doc) => {\n      //     const data = _doc.data();\n      //     data['id'] = _doc.id;\n      //     return data;\n      //   });\n      //   console.log(sections);\n      //   sections.sort((a, b) => b.createdAt - a.createdAt);\n      //   this.setState({ sections: sections });\n      // });\n\n    });\n\n    _defineProperty(this, \"selectSectionPage\", (section, index) => this.setState({\n      selectedSectionIndex: index,\n      selectedSection: section\n    }));\n\n    _defineProperty(this, \"sectionTitleUpdate\", async title => {\n      let newSectionsArray = [...this.state.sections];\n      newSectionsArray[this.state.selectedSectionIndex] = {\n        createdAt: this.state.selectedSection.createdAt,\n        fields: this.state.selectedSection.fields,\n        timestamp: this.state.selectedSection.timestamp,\n        title: title,\n        position: this.state.selectedSection.position\n      };\n      await this.setState({\n        sections: newSectionsArray\n      });\n      db.collection('projects').doc(this.state.projectId).collection('businessPlan').doc(Router.query.project).collection('inputs').doc(this.state.selectedSection.id).update({\n        title: title\n      });\n    });\n\n    _defineProperty(this, \"reorderElements\", async elements => {\n      console.log(elements);\n      console.log(this.state.selectedSection.id);\n      db.collection('projects').doc(this.state.projectId).collection('businessPlan').doc(Router.query.project).collection('inputs').doc(this.state.selectedSection.id).update({\n        fields: elements\n      });\n    });\n\n    _defineProperty(this, \"reorderSections\", async sections => {\n      console.log(sections);\n      await sections.forEach((section, index) => {\n        db.collection('projects').doc(this.state.projectId).collection('businessPlan').doc(Router.query.project).collection('inputs').doc(section.id).update({\n          position: index\n        });\n      }); // await db.collection('projects')\n      // .doc(this.state.projectId)\n      // .collection('businessPlan')\n      // .doc(Router.query.project)\n      // .collection('inputs')\n      // .add({ sections })\n    });\n\n    _defineProperty(this, \"deleteParticularField\", async index => {\n      console.log(index);\n      const selectedSection = this.state.selectedSection;\n      console.log(selectedSection); // this.setState({ selectedSection: this.state.selectedSection.fields.filter((field) => index == field.index)})\n      // console.log(this.state.selectedSection.fields.filter((field) => index !== field.index));\n\n      const newFields = this.state.selectedSection.fields.filter(field => index !== field.index);\n      console.log(this.state.selectedSection);\n      const newSelectedSection = {\n        createdAt: this.state.selectedSection.createdAt,\n        fields: newFields,\n        timestamp: selectedSection.timestamp,\n        title: selectedSection.title,\n        id: selectedSection.id\n      };\n      await db.collection('projects').doc(this.state.projectId).collection('businessPlan').doc(Router.query.project).collection('inputs') // .collection('currentBusinessPlan')\n      // .doc('GrcvhyJwvlWVy31QsiudoQKdKI72')\n      // .collection('inputs')\n      .doc(selectedSection.id).update({\n        fields: newFields\n      });\n      await this.setState({\n        selectedSection: newSelectedSection\n      });\n    });\n\n    _defineProperty(this, \"addNewField\", async setCurrentIndex => {\n      const newArrayItem = {\n        // title: this.state.selectedSection.title,\n        body: '',\n        index: uuidv4(),\n        type: 'text'\n      };\n      await db.collection('projects').doc(this.state.projectId).collection('businessPlan').doc(Router.query.project).collection('inputs') // .collection('currentBusinessPlan')\n      // .doc('GrcvhyJwvlWVy31QsiudoQKdKI72')\n      // .collection('inputs')\n      .doc(this.state.selectedSection.id).update({\n        fields: firebase.firestore.FieldValue.arrayUnion(newArrayItem)\n      });\n      console.log('SELECTED SECTION --> ', this.state.selectedSection);\n      await this.state.selectedSection.fields.push(newArrayItem);\n      console.log(this.state.selectedSection);\n      await this.setState({\n        selectedSection: this.state.selectedSection\n      });\n      console.log(this.state.selectedSection); // To jest testowe, więc możesz to wyrzucić (03.04.2021 00:10)\n      // setCurrentIndex(null);\n    });\n\n    _defineProperty(this, \"addNewSpacing\", async () => {\n      const newArrayItem = {\n        // title: this.state.selectedSection.title,\n        index: uuidv4(),\n        type: 'spacing',\n        spacingId: uuidv4()\n      };\n      await db.collection('projects').doc(this.state.projectId).collection('businessPlan').doc(Router.query.project).collection('inputs').doc(this.state.selectedSection.id).update({\n        fields: firebase.firestore.FieldValue.arrayUnion(newArrayItem)\n      });\n      await this.state.selectedSection.fields.push(newArrayItem);\n      await this.setState({\n        selectedSection: this.state.selectedSection\n      });\n    });\n\n    _defineProperty(this, \"addNewChart\", async setCurrentIndex => {\n      const newArrayItem = {\n        // title: this.state.selectedSection.title,\n        index: uuidv4(),\n        type: 'chart',\n        chartType: 'Bar chart',\n        stacked: false,\n        labels: ['', '', '', '', '', '', '', '', '', '', '', ''],\n        dataset1Label: '',\n        dataset2Label: '',\n        dataset3Label: '',\n        dataset4Label: '',\n        dataset5Label: '',\n        dataset6Label: '',\n        dataset1: [],\n        dataset2: [],\n        dataset3: [],\n        dataset4: [],\n        dataset5: [],\n        dataset6: [],\n        chartId: uuidv4()\n      };\n      await db.collection('projects').doc(this.state.projectId).collection('businessPlan').doc(Router.query.project).collection('inputs') // .collection('currentBusinessPlan')\n      // .doc('GrcvhyJwvlWVy31QsiudoQKdKI72')\n      // .collection('inputs')\n      .doc(this.state.selectedSection.id).update({\n        fields: firebase.firestore.FieldValue.arrayUnion(newArrayItem)\n      });\n      console.log('SELECTED SECTION --> ', this.state.selectedSection);\n      await this.state.selectedSection.fields.push(newArrayItem);\n      console.log(this.state.selectedSection);\n      await this.setState({\n        selectedSection: this.state.selectedSection\n      });\n      console.log(this.state.selectedSection); // To jest testowe, więc możesz to wyrzucić (03.04.2021 00:10)\n      // setCurrentIndex(null);\n    });\n\n    _defineProperty(this, \"addNewHeader\", async setCurrentIndex => {\n      const newArrayItem = {\n        text: '',\n        index: uuidv4(),\n        type: 'header'\n      };\n      await db.collection('projects').doc(this.state.projectId).collection('businessPlan').doc(Router.query.project).collection('inputs') // .collection('currentBusinessPlan')\n      // .doc('GrcvhyJwvlWVy31QsiudoQKdKI72')\n      // .collection('inputs')\n      .doc(this.state.selectedSection.id).update({\n        fields: firebase.firestore.FieldValue.arrayUnion(newArrayItem)\n      });\n      await this.state.selectedSection.fields.push(newArrayItem);\n      await this.setState({\n        selectedSection: this.state.selectedSection\n      }); // To jest testowe, więc możesz to wyrzucić (03.04.2021 00:10)\n      // setCurrentIndex(null);\n    });\n\n    _defineProperty(this, \"headerUpdate\", async (title, index, currentIndex) => {\n      console.log('Title --> ', title);\n      let newFieldsArray = [...this.state.selectedSection.fields];\n      newFieldsArray[currentIndex] = {\n        title,\n        index,\n        type: 'header'\n      };\n      const newSection = {\n        title: this.state.selectedSection.title,\n        createdAt: this.state.selectedSection.createdAt,\n        fields: newFieldsArray,\n        id: this.state.selectedSection.id,\n        position: this.state.selectedSection.position\n      };\n      await this.setState({\n        selectedSection: newSection\n      }); // Update database\n\n      db.collection('projects').doc(this.state.projectId).collection('businessPlan').doc(Router.query.project).collection('inputs') // .collection('currentBusinessPlan')\n      //   .doc('GrcvhyJwvlWVy31QsiudoQKdKI72')\n      //   .collection('inputs')\n      .doc(this.state.selectedSection.id).update({\n        fields: newFieldsArray\n      });\n    });\n\n    _defineProperty(this, \"fieldUpdate\", async (fieldObj, index, currentIndex) => {\n      console.log(fieldObj);\n      const objToUpdate = {\n        // title: fieldObj.title,\n        body: fieldObj.body,\n        index: fieldObj.index,\n        type: 'text'\n      }; // console.log('SELECTED SECTION --> ', this.state.selectedSection);\n      // console.log('FILEOBJ --> ', fieldObj);\n      // if (index !== -1) {\n\n      let newFieldsArray = [...this.state.selectedSection.fields];\n      console.log(newFieldsArray);\n      newFieldsArray[currentIndex] = objToUpdate; // TO JEST OFICJALNA TABLICA INPUTS, KTÓRĄ TRZEBA WRZUCIĆ DO FIREBASE'A !!!\n\n      console.log(newFieldsArray);\n      const testSection = {\n        title: this.state.selectedSection.title,\n        createdAt: this.state.selectedSection.createdAt,\n        fields: newFieldsArray,\n        // id: id,\n        id: this.state.selectedSection.id\n      };\n      console.log('TEST SECTION --> ', testSection);\n      console.log('SELECTED SECTION --> ', this.state.selectedSection);\n      this.setState({\n        selectedSection: testSection\n      }); // console.log(this.state.selectedSection.fields[index].body == fieldObj.body);\n      // Chodzi o to, że jakby po wybraniu nowego inputu (czyli po zmianie indexu), ten index zanim się zmieni, dalej pozostaje taki sam (zobacz że w linijce 298 i 299 są jakby zupełnie inne wartości)\n      // Nie patrz na to u góry !!! Jakby nie działało, to spróbuj odpalić to sprawdzenie pod spodem (na wypadek zbyt późnego wczytania się obecnego indexu)\n      // if (this.state.selectedSection.fields[index].body == fieldObj.body) {\n\n      await db.collection('projects').doc(this.state.projectId).collection('businessPlan').doc(Router.query.project).collection('inputs') // .collection('currentBusinessPlan')\n      //   .doc('GrcvhyJwvlWVy31QsiudoQKdKI72')\n      //   .collection('inputs')\n      .doc(this.state.selectedSection.id).update({\n        fields: newFieldsArray\n      }); // }\n      // CHYBA DZIAŁA, WSZYSTKO ZALEŻY OD TEGO RESETU\n      // setCurrentIndex(null);\n      // }\n      // if (fieldObj.title && fieldObj.body) {\n      //   db.collection('currentBusinessPlan')\n      //     .doc('GrcvhyJwvlWVy31QsiudoQKdKI72')\n      //     .collection('inputs')\n      //     .doc(id)\n      //     // TRZEBA TO JAKOŚ ZUPDATEOWAĆ (Trzeba chyba dodać od nowa całą tablicę!!!)\n      //     // .update({\n      //     //   fields: [{\n      //     //     title: fieldObj.title,\n      //     //     body: fieldObj.body,\n      //     //     // timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n      //     //     index: index\n      //     //   }]});\n      //   }\n    });\n\n    _defineProperty(this, \"addNewTable\", async () => {\n      const newArrayItem = {\n        // title: this.state.selectedSection.title,\n        index: uuidv4(),\n        type: 'table',\n        tableId: uuidv4(),\n        headRows: ['Name', 'Surname', 'Age'],\n        rows: [{\n          row: ['Kamil', 'Kubik', '32']\n        }, {\n          row: ['Szymon', 'Kubik', '43']\n        }, {\n          row: ['John', 'Kubik', '51']\n        }]\n      };\n      await db.collection('projects').doc(this.state.projectId).collection('businessPlan').doc(Router.query.project).collection('inputs') // .collection('currentBusinessPlan')\n      // .doc('GrcvhyJwvlWVy31QsiudoQKdKI72')\n      // .collection('inputs')\n      .doc(this.state.selectedSection.id).update({\n        fields: firebase.firestore.FieldValue.arrayUnion(newArrayItem)\n      });\n      await this.state.selectedSection.fields.push(newArrayItem);\n      await this.setState({\n        selectedSection: this.state.selectedSection\n      });\n    });\n\n    _defineProperty(this, \"tableUpdate\", async (newArray, fieldIndex, tableId, index) => {\n      console.log(newArray);\n      let newFieldsArray = [...this.state.selectedSection.fields];\n      newFieldsArray[fieldIndex] = newArray;\n      const newSection = {\n        title: this.state.selectedSection.title,\n        createdAt: this.state.selectedSection.createdAt,\n        fields: newFieldsArray,\n        id: this.state.selectedSection.id\n      };\n      await this.setState({\n        selectedSection: newSection\n      }); // Update database\n\n      db.collection('projects').doc(this.state.projectId).collection('businessPlan').doc(Router.query.project).collection('inputs') // .collection('currentBusinessPlan')\n      //   .doc('GrcvhyJwvlWVy31QsiudoQKdKI72')\n      //   .collection('inputs')\n      .doc(this.state.selectedSection.id).update({\n        fields: newFieldsArray\n      });\n    });\n\n    _defineProperty(this, \"addChart\", async (chart, currentSectionIndex, index, selectedSection) => {\n      console.log(currentSectionIndex); // Take current array copy\n\n      let newFieldsArray = [...this.state.selectedSection.fields];\n      newFieldsArray[currentSectionIndex] = {\n        chartId: selectedSection.chartId,\n        chart: chart,\n        index,\n        type: 'chart',\n        chartType: selectedSection.fields[currentSectionIndex].chartType,\n        stacked: selectedSection.fields[currentSectionIndex].stacked,\n        labels: selectedSection.fields[currentSectionIndex].labels,\n        dataset1: selectedSection.fields[currentSectionIndex].dataset1,\n        dataset2: selectedSection.fields[currentSectionIndex].dataset2,\n        dataset3: selectedSection.fields[currentSectionIndex].dataset3,\n        dataset4: selectedSection.fields[currentSectionIndex].dataset4,\n        dataset5: selectedSection.fields[currentSectionIndex].dataset5,\n        dataset6: selectedSection.fields[currentSectionIndex].dataset6,\n        // Dataset labels\n        dataset1Label: selectedSection.fields[currentSectionIndex].dataset1Label,\n        dataset2Label: selectedSection.fields[currentSectionIndex].dataset2Label,\n        dataset3Label: selectedSection.fields[currentSectionIndex].dataset3Label,\n        dataset4Label: selectedSection.fields[currentSectionIndex].dataset4Label,\n        dataset5Label: selectedSection.fields[currentSectionIndex].dataset5Label,\n        dataset6Label: selectedSection.fields[currentSectionIndex].dataset6Label\n      };\n      const newSection = {\n        title: this.state.selectedSection.title,\n        createdAt: this.state.selectedSection.createdAt,\n        fields: newFieldsArray,\n        id: this.state.selectedSection.id\n      };\n      await this.setState({\n        selectedSection: newSection\n      }); // Update database\n\n      db.collection('projects').doc(this.state.projectId).collection('businessPlan').doc(Router.query.project).collection('inputs') // .collection('currentBusinessPlan')\n      //   .doc('GrcvhyJwvlWVy31QsiudoQKdKI72')\n      //   .collection('inputs')\n      .doc(this.state.selectedSection.id).update({\n        fields: newFieldsArray\n      });\n    });\n\n    _defineProperty(this, \"chartLabelsUpdate\", async (data, index, currentSectionIndex, selectedSection) => {\n      console.log(selectedSection);\n      const newArrayObj = [];\n\n      if (data.labelOne) {\n        console.log('Label 1 --> ', data.label1);\n        const newObj = [data.label1 ? data.label1 : '', selectedSection.fields[currentSectionIndex].labels[1], selectedSection.fields[currentSectionIndex].labels[2], selectedSection.fields[currentSectionIndex].labels[3], selectedSection.fields[currentSectionIndex].labels[4], selectedSection.fields[currentSectionIndex].labels[5], selectedSection.fields[currentSectionIndex].labels[6], selectedSection.fields[currentSectionIndex].labels[7], selectedSection.fields[currentSectionIndex].labels[8], selectedSection.fields[currentSectionIndex].labels[9], selectedSection.fields[currentSectionIndex].labels[10], selectedSection.fields[currentSectionIndex].labels[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.label22) {\n        console.log('Label 2 --> ', data.label2);\n        const newObj = [selectedSection.fields[currentSectionIndex].labels[0], data.label2 ? data.label2 : '', selectedSection.fields[currentSectionIndex].labels[2], selectedSection.fields[currentSectionIndex].labels[3], selectedSection.fields[currentSectionIndex].labels[4], selectedSection.fields[currentSectionIndex].labels[5], selectedSection.fields[currentSectionIndex].labels[6], selectedSection.fields[currentSectionIndex].labels[7], selectedSection.fields[currentSectionIndex].labels[8], selectedSection.fields[currentSectionIndex].labels[9], selectedSection.fields[currentSectionIndex].labels[10], selectedSection.fields[currentSectionIndex].labels[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.label33) {\n        console.log('Label 3 --> ', data.label3);\n        const newObj = [selectedSection.fields[currentSectionIndex].labels[0], selectedSection.fields[currentSectionIndex].labels[1], data.label3 ? data.label3 : '', selectedSection.fields[currentSectionIndex].labels[3], selectedSection.fields[currentSectionIndex].labels[4], selectedSection.fields[currentSectionIndex].labels[5], selectedSection.fields[currentSectionIndex].labels[6], selectedSection.fields[currentSectionIndex].labels[7], selectedSection.fields[currentSectionIndex].labels[8], selectedSection.fields[currentSectionIndex].labels[9], selectedSection.fields[currentSectionIndex].labels[10], selectedSection.fields[currentSectionIndex].labels[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.label44) {\n        const newObj = [selectedSection.fields[currentSectionIndex].labels[0], selectedSection.fields[currentSectionIndex].labels[1], selectedSection.fields[currentSectionIndex].labels[2], data.label4 ? data.label4 : '', selectedSection.fields[currentSectionIndex].labels[4], selectedSection.fields[currentSectionIndex].labels[5], selectedSection.fields[currentSectionIndex].labels[6], selectedSection.fields[currentSectionIndex].labels[7], selectedSection.fields[currentSectionIndex].labels[8], selectedSection.fields[currentSectionIndex].labels[9], selectedSection.fields[currentSectionIndex].labels[10], selectedSection.fields[currentSectionIndex].labels[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.label55) {\n        const newObj = [selectedSection.fields[currentSectionIndex].labels[0], selectedSection.fields[currentSectionIndex].labels[1], selectedSection.fields[currentSectionIndex].labels[2], selectedSection.fields[currentSectionIndex].labels[3], data.label5 ? data.label5 : '', selectedSection.fields[currentSectionIndex].labels[5], selectedSection.fields[currentSectionIndex].labels[6], selectedSection.fields[currentSectionIndex].labels[7], selectedSection.fields[currentSectionIndex].labels[8], selectedSection.fields[currentSectionIndex].labels[9], selectedSection.fields[currentSectionIndex].labels[10], selectedSection.fields[currentSectionIndex].labels[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.label66) {\n        const newObj = [selectedSection.fields[currentSectionIndex].labels[0], selectedSection.fields[currentSectionIndex].labels[1], selectedSection.fields[currentSectionIndex].labels[2], selectedSection.fields[currentSectionIndex].labels[3], selectedSection.fields[currentSectionIndex].labels[4], data.label6 ? data.label6 : '', selectedSection.fields[currentSectionIndex].labels[6], selectedSection.fields[currentSectionIndex].labels[7], selectedSection.fields[currentSectionIndex].labels[8], selectedSection.fields[currentSectionIndex].labels[9], selectedSection.fields[currentSectionIndex].labels[10], selectedSection.fields[currentSectionIndex].labels[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.label77) {\n        const newObj = [selectedSection.fields[currentSectionIndex].labels[0], selectedSection.fields[currentSectionIndex].labels[1], selectedSection.fields[currentSectionIndex].labels[2], selectedSection.fields[currentSectionIndex].labels[3], selectedSection.fields[currentSectionIndex].labels[4], selectedSection.fields[currentSectionIndex].labels[5], data.label7 ? data.label7 : '', selectedSection.fields[currentSectionIndex].labels[7], selectedSection.fields[currentSectionIndex].labels[8], selectedSection.fields[currentSectionIndex].labels[9], selectedSection.fields[currentSectionIndex].labels[10], selectedSection.fields[currentSectionIndex].labels[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.label88) {\n        const newObj = [selectedSection.fields[currentSectionIndex].labels[0], selectedSection.fields[currentSectionIndex].labels[1], selectedSection.fields[currentSectionIndex].labels[2], selectedSection.fields[currentSectionIndex].labels[3], selectedSection.fields[currentSectionIndex].labels[4], selectedSection.fields[currentSectionIndex].labels[5], selectedSection.fields[currentSectionIndex].labels[6], data.label8 ? data.label8 : '', selectedSection.fields[currentSectionIndex].labels[8], selectedSection.fields[currentSectionIndex].labels[9], selectedSection.fields[currentSectionIndex].labels[10], selectedSection.fields[currentSectionIndex].labels[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.label99) {\n        const newObj = [selectedSection.fields[currentSectionIndex].labels[0], selectedSection.fields[currentSectionIndex].labels[1], selectedSection.fields[currentSectionIndex].labels[2], selectedSection.fields[currentSectionIndex].labels[3], selectedSection.fields[currentSectionIndex].labels[4], selectedSection.fields[currentSectionIndex].labels[5], selectedSection.fields[currentSectionIndex].labels[6], selectedSection.fields[currentSectionIndex].labels[7], data.label9 ? data.label9 : '', selectedSection.fields[currentSectionIndex].labels[9], selectedSection.fields[currentSectionIndex].labels[10], selectedSection.fields[currentSectionIndex].labels[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.label100) {\n        const newObj = [selectedSection.fields[currentSectionIndex].labels[0], selectedSection.fields[currentSectionIndex].labels[1], selectedSection.fields[currentSectionIndex].labels[2], selectedSection.fields[currentSectionIndex].labels[3], selectedSection.fields[currentSectionIndex].labels[4], selectedSection.fields[currentSectionIndex].labels[5], selectedSection.fields[currentSectionIndex].labels[6], selectedSection.fields[currentSectionIndex].labels[7], selectedSection.fields[currentSectionIndex].labels[8], data.label10 ? data.label10 : '', selectedSection.fields[currentSectionIndex].labels[10], selectedSection.fields[currentSectionIndex].labels[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.label111) {\n        const newObj = [selectedSection.fields[currentSectionIndex].labels[0], selectedSection.fields[currentSectionIndex].labels[1], selectedSection.fields[currentSectionIndex].labels[2], selectedSection.fields[currentSectionIndex].labels[3], selectedSection.fields[currentSectionIndex].labels[4], selectedSection.fields[currentSectionIndex].labels[5], selectedSection.fields[currentSectionIndex].labels[6], selectedSection.fields[currentSectionIndex].labels[7], selectedSection.fields[currentSectionIndex].labels[8], selectedSection.fields[currentSectionIndex].labels[9], data.label11 ? data.label11 : '', selectedSection.fields[currentSectionIndex].labels[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.label120) {\n        const newObj = [selectedSection.fields[currentSectionIndex].labels[0], selectedSection.fields[currentSectionIndex].labels[1], selectedSection.fields[currentSectionIndex].labels[2], selectedSection.fields[currentSectionIndex].labels[3], selectedSection.fields[currentSectionIndex].labels[4], selectedSection.fields[currentSectionIndex].labels[5], selectedSection.fields[currentSectionIndex].labels[6], selectedSection.fields[currentSectionIndex].labels[7], selectedSection.fields[currentSectionIndex].labels[8], selectedSection.fields[currentSectionIndex].labels[9], selectedSection.fields[currentSectionIndex].labels[10], data.label12 ? data.label12 : ''];\n        newArrayObj.push(...newObj);\n      } // Take current array copy\n\n\n      let newFieldsArray = [...this.state.selectedSection.fields];\n      newFieldsArray[currentSectionIndex] = {\n        index,\n        type: 'chart',\n        chartType: selectedSection.fields[currentSectionIndex].chartType,\n        stacked: selectedSection.fields[currentSectionIndex].stacked,\n        labels: newArrayObj,\n        dataset1: selectedSection.fields[currentSectionIndex].dataset1,\n        dataset2: selectedSection.fields[currentSectionIndex].dataset2,\n        dataset3: selectedSection.fields[currentSectionIndex].dataset3,\n        dataset4: selectedSection.fields[currentSectionIndex].dataset4,\n        dataset5: selectedSection.fields[currentSectionIndex].dataset5,\n        dataset6: selectedSection.fields[currentSectionIndex].dataset6,\n        // Dataset labels\n        dataset1Label: selectedSection.fields[currentSectionIndex].dataset1Label,\n        dataset2Label: selectedSection.fields[currentSectionIndex].dataset2Label,\n        dataset3Label: selectedSection.fields[currentSectionIndex].dataset3Label,\n        dataset4Label: selectedSection.fields[currentSectionIndex].dataset4Label,\n        dataset5Label: selectedSection.fields[currentSectionIndex].dataset5Label,\n        dataset6Label: selectedSection.fields[currentSectionIndex].dataset6Label\n      };\n      const newSection = {\n        title: this.state.selectedSection.title,\n        createdAt: this.state.selectedSection.createdAt,\n        fields: newFieldsArray,\n        id: this.state.selectedSection.id\n      };\n      await this.setState({\n        selectedSection: newSection\n      }); // Update database\n\n      db.collection('projects').doc(this.state.projectId).collection('businessPlan').doc(Router.query.project).collection('inputs') // .collection('currentBusinessPlan')\n      //   .doc('GrcvhyJwvlWVy31QsiudoQKdKI72')\n      //   .collection('inputs')\n      .doc(this.state.selectedSection.id).update({\n        fields: newFieldsArray\n      });\n    });\n\n    _defineProperty(this, \"onDataset1Update\", async (data, index, currentSectionIndex, selectedSection) => {\n      const newArrayObj = [];\n      console.log('IMPORTANT --> ', data.dataset1ValueOne);\n\n      if (data.dataset1ValueOne) {\n        const newObj = [data.dataset1Value1 ? data.dataset1Value1 : '', selectedSection.fields[currentSectionIndex].dataset1[1], selectedSection.fields[currentSectionIndex].dataset1[2], selectedSection.fields[currentSectionIndex].dataset1[3], selectedSection.fields[currentSectionIndex].dataset1[4], selectedSection.fields[currentSectionIndex].dataset1[5], selectedSection.fields[currentSectionIndex].dataset1[6], selectedSection.fields[currentSectionIndex].dataset1[7], selectedSection.fields[currentSectionIndex].dataset1[8], selectedSection.fields[currentSectionIndex].dataset1[9], selectedSection.fields[currentSectionIndex].dataset1[10], selectedSection.fields[currentSectionIndex].dataset1[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.dataset1Value22) {\n        const newObj = [selectedSection.fields[currentSectionIndex].dataset1[0], data.dataset1Value2 ? data.dataset1Value2 : '', selectedSection.fields[currentSectionIndex].dataset1[2], selectedSection.fields[currentSectionIndex].dataset1[3], selectedSection.fields[currentSectionIndex].dataset1[4], selectedSection.fields[currentSectionIndex].dataset1[5], selectedSection.fields[currentSectionIndex].dataset1[6], selectedSection.fields[currentSectionIndex].dataset1[7], selectedSection.fields[currentSectionIndex].dataset1[8], selectedSection.fields[currentSectionIndex].dataset1[9], selectedSection.fields[currentSectionIndex].dataset1[10], selectedSection.fields[currentSectionIndex].dataset1[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.dataset1Value33) {\n        const newObj = [selectedSection.fields[currentSectionIndex].dataset1[0], selectedSection.fields[currentSectionIndex].dataset1[1], data.dataset1Value3 ? data.dataset1Value3 : '', selectedSection.fields[currentSectionIndex].dataset1[3], selectedSection.fields[currentSectionIndex].dataset1[4], selectedSection.fields[currentSectionIndex].dataset1[5], selectedSection.fields[currentSectionIndex].dataset1[6], selectedSection.fields[currentSectionIndex].dataset1[7], selectedSection.fields[currentSectionIndex].dataset1[8], selectedSection.fields[currentSectionIndex].dataset1[9], selectedSection.fields[currentSectionIndex].dataset1[10], selectedSection.fields[currentSectionIndex].dataset1[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.dataset1Value44) {\n        const newObj = [selectedSection.fields[currentSectionIndex].dataset1[0], selectedSection.fields[currentSectionIndex].dataset1[1], selectedSection.fields[currentSectionIndex].dataset1[2], data.dataset1Value4 ? data.dataset1Value4 : '', selectedSection.fields[currentSectionIndex].dataset1[4], selectedSection.fields[currentSectionIndex].dataset1[5], selectedSection.fields[currentSectionIndex].dataset1[6], selectedSection.fields[currentSectionIndex].dataset1[7], selectedSection.fields[currentSectionIndex].dataset1[8], selectedSection.fields[currentSectionIndex].dataset1[9], selectedSection.fields[currentSectionIndex].dataset1[10], selectedSection.fields[currentSectionIndex].dataset1[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.dataset1Value55) {\n        const newObj = [selectedSection.fields[currentSectionIndex].dataset1[0], selectedSection.fields[currentSectionIndex].dataset1[1], selectedSection.fields[currentSectionIndex].dataset1[2], selectedSection.fields[currentSectionIndex].dataset1[3], data.dataset1Value5 ? data.dataset1Value5 : '', selectedSection.fields[currentSectionIndex].dataset1[5], selectedSection.fields[currentSectionIndex].dataset1[6], selectedSection.fields[currentSectionIndex].dataset1[7], selectedSection.fields[currentSectionIndex].dataset1[8], selectedSection.fields[currentSectionIndex].dataset1[9], selectedSection.fields[currentSectionIndex].dataset1[10], selectedSection.fields[currentSectionIndex].dataset1[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.dataset1Value66) {\n        const newObj = [selectedSection.fields[currentSectionIndex].dataset1[0], selectedSection.fields[currentSectionIndex].dataset1[1], selectedSection.fields[currentSectionIndex].dataset1[2], selectedSection.fields[currentSectionIndex].dataset1[3], selectedSection.fields[currentSectionIndex].dataset1[4], data.dataset1Value6 ? data.dataset1Value6 : '', selectedSection.fields[currentSectionIndex].dataset1[6], selectedSection.fields[currentSectionIndex].dataset1[7], selectedSection.fields[currentSectionIndex].dataset1[8], selectedSection.fields[currentSectionIndex].dataset1[9], selectedSection.fields[currentSectionIndex].dataset1[10], selectedSection.fields[currentSectionIndex].dataset1[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.dataset1Value77) {\n        const newObj = [selectedSection.fields[currentSectionIndex].dataset1[0], selectedSection.fields[currentSectionIndex].dataset1[1], selectedSection.fields[currentSectionIndex].dataset1[2], selectedSection.fields[currentSectionIndex].dataset1[3], selectedSection.fields[currentSectionIndex].dataset1[4], selectedSection.fields[currentSectionIndex].dataset1[5], data.dataset1Value7 ? data.dataset1Value7 : '', selectedSection.fields[currentSectionIndex].dataset1[7], selectedSection.fields[currentSectionIndex].dataset1[8], selectedSection.fields[currentSectionIndex].dataset1[9], selectedSection.fields[currentSectionIndex].dataset1[10], selectedSection.fields[currentSectionIndex].dataset1[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.dataset1Value88) {\n        const newObj = [selectedSection.fields[currentSectionIndex].dataset1[0], selectedSection.fields[currentSectionIndex].dataset1[1], selectedSection.fields[currentSectionIndex].dataset1[2], selectedSection.fields[currentSectionIndex].dataset1[3], selectedSection.fields[currentSectionIndex].dataset1[4], selectedSection.fields[currentSectionIndex].dataset1[5], selectedSection.fields[currentSectionIndex].dataset1[6], data.dataset1Value8 ? data.dataset1Value8 : '', selectedSection.fields[currentSectionIndex].dataset1[8], selectedSection.fields[currentSectionIndex].dataset1[9], selectedSection.fields[currentSectionIndex].dataset1[10], selectedSection.fields[currentSectionIndex].dataset1[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.dataset1Value99) {\n        const newObj = [selectedSection.fields[currentSectionIndex].dataset1[0], selectedSection.fields[currentSectionIndex].dataset1[1], selectedSection.fields[currentSectionIndex].dataset1[2], selectedSection.fields[currentSectionIndex].dataset1[3], selectedSection.fields[currentSectionIndex].dataset1[4], selectedSection.fields[currentSectionIndex].dataset1[5], selectedSection.fields[currentSectionIndex].dataset1[6], selectedSection.fields[currentSectionIndex].dataset1[7], data.dataset1Value9 ? data.dataset1Value9 : '', selectedSection.fields[currentSectionIndex].dataset1[9], selectedSection.fields[currentSectionIndex].dataset1[10], selectedSection.fields[currentSectionIndex].dataset1[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.dataset1Value100) {\n        const newObj = [selectedSection.fields[currentSectionIndex].dataset1[0], selectedSection.fields[currentSectionIndex].dataset1[1], selectedSection.fields[currentSectionIndex].dataset1[2], selectedSection.fields[currentSectionIndex].dataset1[3], selectedSection.fields[currentSectionIndex].dataset1[4], selectedSection.fields[currentSectionIndex].dataset1[5], selectedSection.fields[currentSectionIndex].dataset1[6], selectedSection.fields[currentSectionIndex].dataset1[7], selectedSection.fields[currentSectionIndex].dataset1[8], data.dataset1Value10 ? data.dataset1Value10 : '', selectedSection.fields[currentSectionIndex].dataset1[10], selectedSection.fields[currentSectionIndex].dataset1[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.dataset1Value111) {\n        const newObj = [selectedSection.fields[currentSectionIndex].dataset1[0], selectedSection.fields[currentSectionIndex].dataset1[1], selectedSection.fields[currentSectionIndex].dataset1[2], selectedSection.fields[currentSectionIndex].dataset1[3], selectedSection.fields[currentSectionIndex].dataset1[4], selectedSection.fields[currentSectionIndex].dataset1[5], selectedSection.fields[currentSectionIndex].dataset1[6], selectedSection.fields[currentSectionIndex].dataset1[7], selectedSection.fields[currentSectionIndex].dataset1[8], selectedSection.fields[currentSectionIndex].dataset1[9], data.dataset1Value11 ? data.dataset1Value11 : '', selectedSection.fields[currentSectionIndex].dataset1[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.dataset1Value120) {\n        const newObj = [selectedSection.fields[currentSectionIndex].dataset1[0], selectedSection.fields[currentSectionIndex].dataset1[1], selectedSection.fields[currentSectionIndex].dataset1[2], selectedSection.fields[currentSectionIndex].dataset1[3], selectedSection.fields[currentSectionIndex].dataset1[4], selectedSection.fields[currentSectionIndex].dataset1[5], selectedSection.fields[currentSectionIndex].dataset1[6], selectedSection.fields[currentSectionIndex].dataset1[7], selectedSection.fields[currentSectionIndex].dataset1[8], selectedSection.fields[currentSectionIndex].dataset1[9], selectedSection.fields[currentSectionIndex].dataset1[10], data.dataset1Value12 ? data.dataset1Value12 : ''];\n        newArrayObj.push(...newObj);\n      }\n\n      const filteredArrayObj = newArrayObj.map(obj => {\n        if (obj == undefined) {\n          return '';\n        } else {\n          return obj;\n        }\n      });\n      const newArr = filteredArrayObj.filter(element => element !== '');\n      ; // Take current array copy\n\n      let newFieldsArray = [...this.state.selectedSection.fields];\n      newFieldsArray[currentSectionIndex] = {\n        index,\n        type: 'chart',\n        chartType: selectedSection.fields[currentSectionIndex].chartType,\n        stacked: selectedSection.fields[currentSectionIndex].stacked,\n        dataset1: newArr,\n        labels: selectedSection.fields[currentSectionIndex].labels,\n        dataset2: selectedSection.fields[currentSectionIndex].dataset2,\n        dataset3: selectedSection.fields[currentSectionIndex].dataset3,\n        dataset4: selectedSection.fields[currentSectionIndex].dataset4,\n        dataset5: selectedSection.fields[currentSectionIndex].dataset5,\n        dataset6: selectedSection.fields[currentSectionIndex].dataset6,\n        // Dataset labels\n        dataset1Label: selectedSection.fields[currentSectionIndex].dataset1Label,\n        dataset2Label: selectedSection.fields[currentSectionIndex].dataset2Label,\n        dataset3Label: selectedSection.fields[currentSectionIndex].dataset3Label,\n        dataset4Label: selectedSection.fields[currentSectionIndex].dataset4Label,\n        dataset5Label: selectedSection.fields[currentSectionIndex].dataset5Label,\n        dataset6Label: selectedSection.fields[currentSectionIndex].dataset6Label\n      };\n      console.log(newFieldsArray);\n      const newSection = {\n        title: this.state.selectedSection.title,\n        createdAt: this.state.selectedSection.createdAt,\n        fields: newFieldsArray,\n        id: this.state.selectedSection.id\n      };\n      await this.setState({\n        selectedSection: newSection\n      }); // Update database\n\n      db.collection('projects').doc(this.state.projectId).collection('businessPlan').doc(Router.query.project).collection('inputs') // .collection('currentBusinessPlan')\n      //   .doc('GrcvhyJwvlWVy31QsiudoQKdKI72')\n      //   .collection('inputs')\n      .doc(this.state.selectedSection.id).update({\n        fields: newFieldsArray\n      });\n    });\n\n    _defineProperty(this, \"onDataset2Update\", async (data, index, currentSectionIndex, selectedSection) => {\n      const newArrayObj = [];\n      console.log('DATA --> ', selectedSection);\n\n      if (data.dataset2ValueOne) {\n        const newObj = [data.dataset2Value1 ? data.dataset2Value1 : '', selectedSection.fields[currentSectionIndex].dataset2[1], selectedSection.fields[currentSectionIndex].dataset2[2], selectedSection.fields[currentSectionIndex].dataset2[3], selectedSection.fields[currentSectionIndex].dataset2[4], selectedSection.fields[currentSectionIndex].dataset2[5], selectedSection.fields[currentSectionIndex].dataset2[6], selectedSection.fields[currentSectionIndex].dataset2[7], selectedSection.fields[currentSectionIndex].dataset2[8], selectedSection.fields[currentSectionIndex].dataset2[9], selectedSection.fields[currentSectionIndex].dataset2[10], selectedSection.fields[currentSectionIndex].dataset2[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.dataset2Value22) {\n        const newObj = [selectedSection.fields[currentSectionIndex].dataset2[0], data.dataset2Value2 ? data.dataset2Value2 : '', selectedSection.fields[currentSectionIndex].dataset2[2], selectedSection.fields[currentSectionIndex].dataset2[3], selectedSection.fields[currentSectionIndex].dataset2[4], selectedSection.fields[currentSectionIndex].dataset2[5], selectedSection.fields[currentSectionIndex].dataset2[6], selectedSection.fields[currentSectionIndex].dataset2[7], selectedSection.fields[currentSectionIndex].dataset2[8], selectedSection.fields[currentSectionIndex].dataset2[9], selectedSection.fields[currentSectionIndex].dataset2[10], selectedSection.fields[currentSectionIndex].dataset2[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.dataset2Value33) {\n        const newObj = [selectedSection.fields[currentSectionIndex].dataset2[0], selectedSection.fields[currentSectionIndex].dataset2[1], data.dataset2Value3 ? data.dataset2Value3 : '', selectedSection.fields[currentSectionIndex].dataset2[3], selectedSection.fields[currentSectionIndex].dataset2[4], selectedSection.fields[currentSectionIndex].dataset2[5], selectedSection.fields[currentSectionIndex].dataset2[6], selectedSection.fields[currentSectionIndex].dataset2[7], selectedSection.fields[currentSectionIndex].dataset2[8], selectedSection.fields[currentSectionIndex].dataset2[9], selectedSection.fields[currentSectionIndex].dataset2[10], selectedSection.fields[currentSectionIndex].dataset2[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.dataset2Value44) {\n        const newObj = [selectedSection.fields[currentSectionIndex].dataset2[0], selectedSection.fields[currentSectionIndex].dataset2[1], selectedSection.fields[currentSectionIndex].dataset2[2], data.dataset2Value4 ? data.dataset2Value4 : '', selectedSection.fields[currentSectionIndex].dataset2[4], selectedSection.fields[currentSectionIndex].dataset2[5], selectedSection.fields[currentSectionIndex].dataset2[6], selectedSection.fields[currentSectionIndex].dataset2[7], selectedSection.fields[currentSectionIndex].dataset2[8], selectedSection.fields[currentSectionIndex].dataset2[9], selectedSection.fields[currentSectionIndex].dataset2[10], selectedSection.fields[currentSectionIndex].dataset2[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.dataset2Value55) {\n        const newObj = [selectedSection.fields[currentSectionIndex].dataset2[0], selectedSection.fields[currentSectionIndex].dataset2[1], selectedSection.fields[currentSectionIndex].dataset2[2], selectedSection.fields[currentSectionIndex].dataset2[3], data.dataset2Value5 ? data.dataset2Value5 : '', selectedSection.fields[currentSectionIndex].dataset2[5], selectedSection.fields[currentSectionIndex].dataset2[6], selectedSection.fields[currentSectionIndex].dataset2[7], selectedSection.fields[currentSectionIndex].dataset2[8], selectedSection.fields[currentSectionIndex].dataset2[9], selectedSection.fields[currentSectionIndex].dataset2[10], selectedSection.fields[currentSectionIndex].dataset2[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.dataset2Value66) {\n        const newObj = [selectedSection.fields[currentSectionIndex].dataset2[0], selectedSection.fields[currentSectionIndex].dataset2[1], selectedSection.fields[currentSectionIndex].dataset2[2], selectedSection.fields[currentSectionIndex].dataset2[3], selectedSection.fields[currentSectionIndex].dataset2[4], data.dataset2Value6 ? data.dataset2Value6 : '', selectedSection.fields[currentSectionIndex].dataset2[6], selectedSection.fields[currentSectionIndex].dataset2[7], selectedSection.fields[currentSectionIndex].dataset2[8], selectedSection.fields[currentSectionIndex].dataset2[9], selectedSection.fields[currentSectionIndex].dataset2[10], selectedSection.fields[currentSectionIndex].dataset2[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.dataset2Value77) {\n        const newObj = [selectedSection.fields[currentSectionIndex].dataset2[0], selectedSection.fields[currentSectionIndex].dataset2[1], selectedSection.fields[currentSectionIndex].dataset2[2], selectedSection.fields[currentSectionIndex].dataset2[3], selectedSection.fields[currentSectionIndex].dataset2[4], selectedSection.fields[currentSectionIndex].dataset2[5], data.dataset2Value7 ? data.dataset2Value7 : '', selectedSection.fields[currentSectionIndex].dataset2[7], selectedSection.fields[currentSectionIndex].dataset2[8], selectedSection.fields[currentSectionIndex].dataset2[9], selectedSection.fields[currentSectionIndex].dataset2[10], selectedSection.fields[currentSectionIndex].dataset2[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.dataset2Value88) {\n        const newObj = [selectedSection.fields[currentSectionIndex].dataset2[0], selectedSection.fields[currentSectionIndex].dataset2[1], selectedSection.fields[currentSectionIndex].dataset2[2], selectedSection.fields[currentSectionIndex].dataset2[3], selectedSection.fields[currentSectionIndex].dataset2[4], selectedSection.fields[currentSectionIndex].dataset2[5], selectedSection.fields[currentSectionIndex].dataset2[6], data.dataset2Value8 ? data.dataset2Value8 : '', selectedSection.fields[currentSectionIndex].dataset2[8], selectedSection.fields[currentSectionIndex].dataset2[9], selectedSection.fields[currentSectionIndex].dataset2[10], selectedSection.fields[currentSectionIndex].dataset2[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.dataset2Value99) {\n        const newObj = [selectedSection.fields[currentSectionIndex].dataset2[0], selectedSection.fields[currentSectionIndex].dataset2[1], selectedSection.fields[currentSectionIndex].dataset2[2], selectedSection.fields[currentSectionIndex].dataset2[3], selectedSection.fields[currentSectionIndex].dataset2[4], selectedSection.fields[currentSectionIndex].dataset2[5], selectedSection.fields[currentSectionIndex].dataset2[6], selectedSection.fields[currentSectionIndex].dataset2[7], data.dataset2Value9 ? data.dataset2Value9 : '', selectedSection.fields[currentSectionIndex].dataset2[9], selectedSection.fields[currentSectionIndex].dataset2[10], selectedSection.fields[currentSectionIndex].dataset2[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.dataset2Value100) {\n        const newObj = [selectedSection.fields[currentSectionIndex].dataset2[0], selectedSection.fields[currentSectionIndex].dataset2[1], selectedSection.fields[currentSectionIndex].dataset2[2], selectedSection.fields[currentSectionIndex].dataset2[3], selectedSection.fields[currentSectionIndex].dataset2[4], selectedSection.fields[currentSectionIndex].dataset2[5], selectedSection.fields[currentSectionIndex].dataset2[6], selectedSection.fields[currentSectionIndex].dataset2[7], selectedSection.fields[currentSectionIndex].dataset2[8], data.dataset2Value10 ? data.dataset2Value10 : '', selectedSection.fields[currentSectionIndex].dataset2[10], selectedSection.fields[currentSectionIndex].dataset2[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.dataset2Value111) {\n        const newObj = [selectedSection.fields[currentSectionIndex].dataset2[0], selectedSection.fields[currentSectionIndex].dataset2[1], selectedSection.fields[currentSectionIndex].dataset2[2], selectedSection.fields[currentSectionIndex].dataset2[3], selectedSection.fields[currentSectionIndex].dataset2[4], selectedSection.fields[currentSectionIndex].dataset2[5], selectedSection.fields[currentSectionIndex].dataset2[6], selectedSection.fields[currentSectionIndex].dataset2[7], selectedSection.fields[currentSectionIndex].dataset2[8], selectedSection.fields[currentSectionIndex].dataset2[9], data.dataset2Value11 ? data.dataset2Value11 : '', selectedSection.fields[currentSectionIndex].dataset2[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.dataset2Value120) {\n        const newObj = [selectedSection.fields[currentSectionIndex].dataset2[0], selectedSection.fields[currentSectionIndex].dataset2[1], selectedSection.fields[currentSectionIndex].dataset2[2], selectedSection.fields[currentSectionIndex].dataset2[3], selectedSection.fields[currentSectionIndex].dataset2[4], selectedSection.fields[currentSectionIndex].dataset2[5], selectedSection.fields[currentSectionIndex].dataset2[6], selectedSection.fields[currentSectionIndex].dataset2[7], selectedSection.fields[currentSectionIndex].dataset2[8], selectedSection.fields[currentSectionIndex].dataset2[9], selectedSection.fields[currentSectionIndex].dataset2[10], data.dataset2Value12 ? data.dataset2Value12 : ''];\n        newArrayObj.push(...newObj);\n      }\n\n      const filteredArrayObj = newArrayObj.map(obj => {\n        if (obj == undefined) {\n          return '';\n        } else {\n          return obj;\n        }\n      });\n      const newArr = filteredArrayObj.filter(element => element !== ''); // Take current array copy\n\n      let newFieldsArray = [...this.state.selectedSection.fields];\n      newFieldsArray[currentSectionIndex] = {\n        index,\n        type: 'chart',\n        chartType: selectedSection.fields[currentSectionIndex].chartType,\n        stacked: selectedSection.fields[currentSectionIndex].stacked,\n        dataset2: newArr,\n        labels: selectedSection.fields[currentSectionIndex].labels,\n        dataset1: selectedSection.fields[currentSectionIndex].dataset1,\n        dataset3: selectedSection.fields[currentSectionIndex].dataset3,\n        dataset4: selectedSection.fields[currentSectionIndex].dataset4,\n        dataset5: selectedSection.fields[currentSectionIndex].dataset5,\n        dataset6: selectedSection.fields[currentSectionIndex].dataset6,\n        // Dataset labels\n        dataset1Label: selectedSection.fields[currentSectionIndex].dataset1Label,\n        dataset2Label: selectedSection.fields[currentSectionIndex].dataset2Label,\n        dataset3Label: selectedSection.fields[currentSectionIndex].dataset3Label,\n        dataset4Label: selectedSection.fields[currentSectionIndex].dataset4Label,\n        dataset5Label: selectedSection.fields[currentSectionIndex].dataset5Label,\n        dataset6Label: selectedSection.fields[currentSectionIndex].dataset6Label\n      };\n      const newSection = {\n        title: this.state.selectedSection.title,\n        createdAt: this.state.selectedSection.createdAt,\n        fields: newFieldsArray,\n        id: this.state.selectedSection.id\n      };\n      await this.setState({\n        selectedSection: newSection\n      }); // console.log(newFieldsArray[0]);\n      // Update database\n\n      db.collection('projects').doc(this.state.projectId).collection('businessPlan').doc(Router.query.project).collection('inputs') // .collection('currentBusinessPlan')\n      //   .doc('GrcvhyJwvlWVy31QsiudoQKdKI72')\n      //   .collection('inputs')\n      .doc(this.state.selectedSection.id).update({\n        fields: newFieldsArray\n      });\n    });\n\n    _defineProperty(this, \"onDataset3Update\", async (data, index, currentSectionIndex, selectedSection) => {\n      const newArrayObj = [];\n\n      if (data.dataset3ValueOne) {\n        const newObj = [data.dataset3Value1 ? data.dataset3Value1 : '', selectedSection.fields[currentSectionIndex].dataset3[1], selectedSection.fields[currentSectionIndex].dataset3[2], selectedSection.fields[currentSectionIndex].dataset3[3], selectedSection.fields[currentSectionIndex].dataset3[4], selectedSection.fields[currentSectionIndex].dataset3[5], selectedSection.fields[currentSectionIndex].dataset3[6], selectedSection.fields[currentSectionIndex].dataset3[7], selectedSection.fields[currentSectionIndex].dataset3[8], selectedSection.fields[currentSectionIndex].dataset3[9], selectedSection.fields[currentSectionIndex].dataset3[10], selectedSection.fields[currentSectionIndex].dataset3[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.dataset3Value22) {\n        const newObj = [selectedSection.fields[currentSectionIndex].dataset3[0], data.dataset3Value2 ? data.dataset3Value2 : '', selectedSection.fields[currentSectionIndex].dataset3[2], selectedSection.fields[currentSectionIndex].dataset3[3], selectedSection.fields[currentSectionIndex].dataset3[4], selectedSection.fields[currentSectionIndex].dataset3[5], selectedSection.fields[currentSectionIndex].dataset3[6], selectedSection.fields[currentSectionIndex].dataset3[7], selectedSection.fields[currentSectionIndex].dataset3[8], selectedSection.fields[currentSectionIndex].dataset3[9], selectedSection.fields[currentSectionIndex].dataset3[10], selectedSection.fields[currentSectionIndex].dataset3[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.dataset3Value33) {\n        const newObj = [selectedSection.fields[currentSectionIndex].dataset3[0], selectedSection.fields[currentSectionIndex].dataset3[1], data.dataset3Value3 ? data.dataset3Value3 : '', selectedSection.fields[currentSectionIndex].dataset3[3], selectedSection.fields[currentSectionIndex].dataset3[4], selectedSection.fields[currentSectionIndex].dataset3[5], selectedSection.fields[currentSectionIndex].dataset3[6], selectedSection.fields[currentSectionIndex].dataset3[7], selectedSection.fields[currentSectionIndex].dataset3[8], selectedSection.fields[currentSectionIndex].dataset3[9], selectedSection.fields[currentSectionIndex].dataset3[10], selectedSection.fields[currentSectionIndex].dataset3[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.dataset3Value44) {\n        const newObj = [selectedSection.fields[currentSectionIndex].dataset3[0], selectedSection.fields[currentSectionIndex].dataset3[1], selectedSection.fields[currentSectionIndex].dataset3[2], data.dataset3Value4 ? data.dataset3Value4 : '', selectedSection.fields[currentSectionIndex].dataset3[4], selectedSection.fields[currentSectionIndex].dataset3[5], selectedSection.fields[currentSectionIndex].dataset3[6], selectedSection.fields[currentSectionIndex].dataset3[7], selectedSection.fields[currentSectionIndex].dataset3[8], selectedSection.fields[currentSectionIndex].dataset3[9], selectedSection.fields[currentSectionIndex].dataset3[10], selectedSection.fields[currentSectionIndex].dataset3[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.dataset3Value55) {\n        const newObj = [selectedSection.fields[currentSectionIndex].dataset3[0], selectedSection.fields[currentSectionIndex].dataset3[1], selectedSection.fields[currentSectionIndex].dataset3[2], selectedSection.fields[currentSectionIndex].dataset3[3], data.dataset3Value5 ? data.dataset3Value5 : '', selectedSection.fields[currentSectionIndex].dataset3[5], selectedSection.fields[currentSectionIndex].dataset3[6], selectedSection.fields[currentSectionIndex].dataset3[7], selectedSection.fields[currentSectionIndex].dataset3[8], selectedSection.fields[currentSectionIndex].dataset3[9], selectedSection.fields[currentSectionIndex].dataset3[10], selectedSection.fields[currentSectionIndex].dataset3[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.dataset3Value66) {\n        const newObj = [selectedSection.fields[currentSectionIndex].dataset3[0], selectedSection.fields[currentSectionIndex].dataset3[1], selectedSection.fields[currentSectionIndex].dataset3[2], selectedSection.fields[currentSectionIndex].dataset3[3], selectedSection.fields[currentSectionIndex].dataset3[4], data.dataset3Value6 ? data.dataset3Value6 : '', selectedSection.fields[currentSectionIndex].dataset3[6], selectedSection.fields[currentSectionIndex].dataset3[7], selectedSection.fields[currentSectionIndex].dataset3[8], selectedSection.fields[currentSectionIndex].dataset3[9], selectedSection.fields[currentSectionIndex].dataset3[10], selectedSection.fields[currentSectionIndex].dataset3[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.dataset3Value77) {\n        const newObj = [selectedSection.fields[currentSectionIndex].dataset3[0], selectedSection.fields[currentSectionIndex].dataset3[1], selectedSection.fields[currentSectionIndex].dataset3[2], selectedSection.fields[currentSectionIndex].dataset3[3], selectedSection.fields[currentSectionIndex].dataset3[4], selectedSection.fields[currentSectionIndex].dataset3[5], data.dataset3Value7 ? data.dataset3Value7 : '', selectedSection.fields[currentSectionIndex].dataset3[7], selectedSection.fields[currentSectionIndex].dataset3[8], selectedSection.fields[currentSectionIndex].dataset3[9], selectedSection.fields[currentSectionIndex].dataset3[10], selectedSection.fields[currentSectionIndex].dataset3[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.dataset3Value88) {\n        const newObj = [selectedSection.fields[currentSectionIndex].dataset3[0], selectedSection.fields[currentSectionIndex].dataset3[1], selectedSection.fields[currentSectionIndex].dataset3[2], selectedSection.fields[currentSectionIndex].dataset3[3], selectedSection.fields[currentSectionIndex].dataset3[4], selectedSection.fields[currentSectionIndex].dataset3[5], selectedSection.fields[currentSectionIndex].dataset3[6], data.dataset3Value8 ? data.dataset3Value8 : '', selectedSection.fields[currentSectionIndex].dataset3[8], selectedSection.fields[currentSectionIndex].dataset3[9], selectedSection.fields[currentSectionIndex].dataset3[10], selectedSection.fields[currentSectionIndex].dataset3[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.dataset3Value99) {\n        const newObj = [selectedSection.fields[currentSectionIndex].dataset3[0], selectedSection.fields[currentSectionIndex].dataset3[1], selectedSection.fields[currentSectionIndex].dataset3[2], selectedSection.fields[currentSectionIndex].dataset3[3], selectedSection.fields[currentSectionIndex].dataset3[4], selectedSection.fields[currentSectionIndex].dataset3[5], selectedSection.fields[currentSectionIndex].dataset3[6], selectedSection.fields[currentSectionIndex].dataset3[7], data.dataset3Value9 ? data.dataset3Value9 : '', selectedSection.fields[currentSectionIndex].dataset3[9], selectedSection.fields[currentSectionIndex].dataset3[10], selectedSection.fields[currentSectionIndex].dataset3[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.dataset3Value100) {\n        const newObj = [selectedSection.fields[currentSectionIndex].dataset3[0], selectedSection.fields[currentSectionIndex].dataset3[1], selectedSection.fields[currentSectionIndex].dataset3[2], selectedSection.fields[currentSectionIndex].dataset3[3], selectedSection.fields[currentSectionIndex].dataset3[4], selectedSection.fields[currentSectionIndex].dataset3[5], selectedSection.fields[currentSectionIndex].dataset3[6], selectedSection.fields[currentSectionIndex].dataset3[7], selectedSection.fields[currentSectionIndex].dataset3[8], data.dataset3Value10 ? data.dataset3Value10 : '', selectedSection.fields[currentSectionIndex].dataset3[10], selectedSection.fields[currentSectionIndex].dataset3[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.dataset3Value111) {\n        const newObj = [selectedSection.fields[currentSectionIndex].dataset3[0], selectedSection.fields[currentSectionIndex].dataset3[1], selectedSection.fields[currentSectionIndex].dataset3[2], selectedSection.fields[currentSectionIndex].dataset3[3], selectedSection.fields[currentSectionIndex].dataset3[4], selectedSection.fields[currentSectionIndex].dataset3[5], selectedSection.fields[currentSectionIndex].dataset3[6], selectedSection.fields[currentSectionIndex].dataset3[7], selectedSection.fields[currentSectionIndex].dataset3[8], selectedSection.fields[currentSectionIndex].dataset3[9], data.dataset3Value11 ? data.dataset3Value11 : '', selectedSection.fields[currentSectionIndex].dataset3[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.dataset3Value120) {\n        const newObj = [selectedSection.fields[currentSectionIndex].dataset3[0], selectedSection.fields[currentSectionIndex].dataset3[1], selectedSection.fields[currentSectionIndex].dataset3[2], selectedSection.fields[currentSectionIndex].dataset3[3], selectedSection.fields[currentSectionIndex].dataset3[4], selectedSection.fields[currentSectionIndex].dataset3[5], selectedSection.fields[currentSectionIndex].dataset3[6], selectedSection.fields[currentSectionIndex].dataset3[7], selectedSection.fields[currentSectionIndex].dataset3[8], selectedSection.fields[currentSectionIndex].dataset3[9], selectedSection.fields[currentSectionIndex].dataset3[10], data.dataset3Value12 ? data.dataset3Value12 : ''];\n        newArrayObj.push(...newObj);\n      }\n\n      const filteredArrayObj = newArrayObj.map(obj => {\n        if (obj == undefined) {\n          return '';\n        } else {\n          return obj;\n        }\n      });\n      const newArr = filteredArrayObj.filter(element => element !== ''); // Take current array copy\n\n      let newFieldsArray = [...this.state.selectedSection.fields];\n      newFieldsArray[currentSectionIndex] = {\n        index,\n        type: 'chart',\n        chartType: selectedSection.fields[currentSectionIndex].chartType,\n        stacked: selectedSection.fields[currentSectionIndex].stacked,\n        dataset3: newArr,\n        labels: selectedSection.fields[currentSectionIndex].labels,\n        dataset1: selectedSection.fields[currentSectionIndex].dataset1,\n        dataset2: selectedSection.fields[currentSectionIndex].dataset2,\n        dataset4: selectedSection.fields[currentSectionIndex].dataset4,\n        dataset5: selectedSection.fields[currentSectionIndex].dataset5,\n        dataset6: selectedSection.fields[currentSectionIndex].dataset6,\n        // Dataset labels\n        dataset1Label: selectedSection.fields[currentSectionIndex].dataset1Label,\n        dataset2Label: selectedSection.fields[currentSectionIndex].dataset2Label,\n        dataset3Label: selectedSection.fields[currentSectionIndex].dataset3Label,\n        dataset4Label: selectedSection.fields[currentSectionIndex].dataset4Label,\n        dataset5Label: selectedSection.fields[currentSectionIndex].dataset5Label,\n        dataset6Label: selectedSection.fields[currentSectionIndex].dataset6Label\n      };\n      const newSection = {\n        title: this.state.selectedSection.title,\n        createdAt: this.state.selectedSection.createdAt,\n        fields: newFieldsArray,\n        id: this.state.selectedSection.id\n      };\n      await this.setState({\n        selectedSection: newSection\n      }); // Update database\n\n      db.collection('projects').doc(this.state.projectId).collection('businessPlan').doc(Router.query.project).collection('inputs') // .collection('currentBusinessPlan')\n      //   .doc('GrcvhyJwvlWVy31QsiudoQKdKI72')\n      //   .collection('inputs')\n      .doc(this.state.selectedSection.id).update({\n        fields: newFieldsArray\n      });\n    });\n\n    _defineProperty(this, \"onDataset4Update\", async (data, index, currentSectionIndex, selectedSection) => {\n      const newArrayObj = [];\n\n      if (data.dataset4ValueOne) {\n        const newObj = [data.dataset4Value1 ? data.dataset4Value1 : '', selectedSection.fields[currentSectionIndex].dataset4[1], selectedSection.fields[currentSectionIndex].dataset4[2], selectedSection.fields[currentSectionIndex].dataset4[3], selectedSection.fields[currentSectionIndex].dataset4[4], selectedSection.fields[currentSectionIndex].dataset4[5], selectedSection.fields[currentSectionIndex].dataset4[6], selectedSection.fields[currentSectionIndex].dataset4[7], selectedSection.fields[currentSectionIndex].dataset4[8], selectedSection.fields[currentSectionIndex].dataset4[9], selectedSection.fields[currentSectionIndex].dataset4[10], selectedSection.fields[currentSectionIndex].dataset4[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.dataset4Value22) {\n        const newObj = [selectedSection.fields[currentSectionIndex].dataset4[0], data.dataset4Value2 ? data.dataset4Value2 : '', selectedSection.fields[currentSectionIndex].dataset4[2], selectedSection.fields[currentSectionIndex].dataset4[3], selectedSection.fields[currentSectionIndex].dataset4[4], selectedSection.fields[currentSectionIndex].dataset4[5], selectedSection.fields[currentSectionIndex].dataset4[6], selectedSection.fields[currentSectionIndex].dataset4[7], selectedSection.fields[currentSectionIndex].dataset4[8], selectedSection.fields[currentSectionIndex].dataset4[9], selectedSection.fields[currentSectionIndex].dataset4[10], selectedSection.fields[currentSectionIndex].dataset4[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.dataset4Value33) {\n        const newObj = [selectedSection.fields[currentSectionIndex].dataset4[0], selectedSection.fields[currentSectionIndex].dataset4[1], data.dataset4Value3 ? data.dataset4Value3 : '', selectedSection.fields[currentSectionIndex].dataset4[3], selectedSection.fields[currentSectionIndex].dataset4[4], selectedSection.fields[currentSectionIndex].dataset4[5], selectedSection.fields[currentSectionIndex].dataset4[6], selectedSection.fields[currentSectionIndex].dataset4[7], selectedSection.fields[currentSectionIndex].dataset4[8], selectedSection.fields[currentSectionIndex].dataset4[9], selectedSection.fields[currentSectionIndex].dataset4[10], selectedSection.fields[currentSectionIndex].dataset4[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.dataset4Value44) {\n        const newObj = [selectedSection.fields[currentSectionIndex].dataset4[0], selectedSection.fields[currentSectionIndex].dataset4[1], selectedSection.fields[currentSectionIndex].dataset4[2], data.dataset4Value4 ? data.dataset4Value4 : '', selectedSection.fields[currentSectionIndex].dataset4[4], selectedSection.fields[currentSectionIndex].dataset4[5], selectedSection.fields[currentSectionIndex].dataset4[6], selectedSection.fields[currentSectionIndex].dataset4[7], selectedSection.fields[currentSectionIndex].dataset4[8], selectedSection.fields[currentSectionIndex].dataset4[9], selectedSection.fields[currentSectionIndex].dataset4[10], selectedSection.fields[currentSectionIndex].dataset4[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.dataset4Value55) {\n        const newObj = [selectedSection.fields[currentSectionIndex].dataset4[0], selectedSection.fields[currentSectionIndex].dataset4[1], selectedSection.fields[currentSectionIndex].dataset4[2], selectedSection.fields[currentSectionIndex].dataset4[3], data.dataset4Value5 ? data.dataset4Value5 : '', selectedSection.fields[currentSectionIndex].dataset4[5], selectedSection.fields[currentSectionIndex].dataset4[6], selectedSection.fields[currentSectionIndex].dataset4[7], selectedSection.fields[currentSectionIndex].dataset4[8], selectedSection.fields[currentSectionIndex].dataset4[9], selectedSection.fields[currentSectionIndex].dataset4[10], selectedSection.fields[currentSectionIndex].dataset4[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.dataset4Value66) {\n        const newObj = [selectedSection.fields[currentSectionIndex].dataset4[0], selectedSection.fields[currentSectionIndex].dataset4[1], selectedSection.fields[currentSectionIndex].dataset4[2], selectedSection.fields[currentSectionIndex].dataset4[3], selectedSection.fields[currentSectionIndex].dataset4[4], data.dataset4Value6 ? data.dataset4Value6 : '', selectedSection.fields[currentSectionIndex].dataset4[6], selectedSection.fields[currentSectionIndex].dataset4[7], selectedSection.fields[currentSectionIndex].dataset4[8], selectedSection.fields[currentSectionIndex].dataset4[9], selectedSection.fields[currentSectionIndex].dataset4[10], selectedSection.fields[currentSectionIndex].dataset4[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.dataset4Value77) {\n        const newObj = [selectedSection.fields[currentSectionIndex].dataset4[0], selectedSection.fields[currentSectionIndex].dataset4[1], selectedSection.fields[currentSectionIndex].dataset4[2], selectedSection.fields[currentSectionIndex].dataset4[3], selectedSection.fields[currentSectionIndex].dataset4[4], selectedSection.fields[currentSectionIndex].dataset4[5], data.dataset4Value7 ? data.dataset4Value7 : '', selectedSection.fields[currentSectionIndex].dataset4[7], selectedSection.fields[currentSectionIndex].dataset4[8], selectedSection.fields[currentSectionIndex].dataset4[9], selectedSection.fields[currentSectionIndex].dataset4[10], selectedSection.fields[currentSectionIndex].dataset4[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.dataset4Value88) {\n        const newObj = [selectedSection.fields[currentSectionIndex].dataset4[0], selectedSection.fields[currentSectionIndex].dataset4[1], selectedSection.fields[currentSectionIndex].dataset4[2], selectedSection.fields[currentSectionIndex].dataset4[3], selectedSection.fields[currentSectionIndex].dataset4[4], selectedSection.fields[currentSectionIndex].dataset4[5], selectedSection.fields[currentSectionIndex].dataset4[6], data.dataset4Value8 ? data.dataset4Value8 : '', selectedSection.fields[currentSectionIndex].dataset4[8], selectedSection.fields[currentSectionIndex].dataset4[9], selectedSection.fields[currentSectionIndex].dataset4[10], selectedSection.fields[currentSectionIndex].dataset4[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.dataset4Value99) {\n        const newObj = [selectedSection.fields[currentSectionIndex].dataset4[0], selectedSection.fields[currentSectionIndex].dataset4[1], selectedSection.fields[currentSectionIndex].dataset4[2], selectedSection.fields[currentSectionIndex].dataset4[3], selectedSection.fields[currentSectionIndex].dataset4[4], selectedSection.fields[currentSectionIndex].dataset4[5], selectedSection.fields[currentSectionIndex].dataset4[6], selectedSection.fields[currentSectionIndex].dataset4[7], data.dataset4Value9 ? data.dataset4Value9 : '', selectedSection.fields[currentSectionIndex].dataset4[9], selectedSection.fields[currentSectionIndex].dataset4[10], selectedSection.fields[currentSectionIndex].dataset4[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.dataset4Value100) {\n        const newObj = [selectedSection.fields[currentSectionIndex].dataset4[0], selectedSection.fields[currentSectionIndex].dataset4[1], selectedSection.fields[currentSectionIndex].dataset4[2], selectedSection.fields[currentSectionIndex].dataset4[3], selectedSection.fields[currentSectionIndex].dataset4[4], selectedSection.fields[currentSectionIndex].dataset4[5], selectedSection.fields[currentSectionIndex].dataset4[6], selectedSection.fields[currentSectionIndex].dataset4[7], selectedSection.fields[currentSectionIndex].dataset4[8], data.dataset4Value10 ? data.dataset4Value10 : '', selectedSection.fields[currentSectionIndex].dataset4[10], selectedSection.fields[currentSectionIndex].dataset4[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.dataset4Value111) {\n        const newObj = [selectedSection.fields[currentSectionIndex].dataset4[0], selectedSection.fields[currentSectionIndex].dataset4[1], selectedSection.fields[currentSectionIndex].dataset4[2], selectedSection.fields[currentSectionIndex].dataset4[3], selectedSection.fields[currentSectionIndex].dataset4[4], selectedSection.fields[currentSectionIndex].dataset4[5], selectedSection.fields[currentSectionIndex].dataset4[6], selectedSection.fields[currentSectionIndex].dataset4[7], selectedSection.fields[currentSectionIndex].dataset4[8], selectedSection.fields[currentSectionIndex].dataset4[9], data.dataset4Value11 ? data.dataset4Value11 : '', selectedSection.fields[currentSectionIndex].dataset4[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.dataset4Value120) {\n        const newObj = [selectedSection.fields[currentSectionIndex].dataset4[0], selectedSection.fields[currentSectionIndex].dataset4[1], selectedSection.fields[currentSectionIndex].dataset4[2], selectedSection.fields[currentSectionIndex].dataset4[3], selectedSection.fields[currentSectionIndex].dataset4[4], selectedSection.fields[currentSectionIndex].dataset4[5], selectedSection.fields[currentSectionIndex].dataset4[6], selectedSection.fields[currentSectionIndex].dataset4[7], selectedSection.fields[currentSectionIndex].dataset4[8], selectedSection.fields[currentSectionIndex].dataset4[9], selectedSection.fields[currentSectionIndex].dataset4[10], data.dataset4Value12 ? data.dataset4Value12 : ''];\n        newArrayObj.push(...newObj);\n      }\n\n      const filteredArrayObj = newArrayObj.map(obj => {\n        if (obj == undefined) {\n          return '';\n        } else {\n          return obj;\n        }\n      });\n      const newArr = filteredArrayObj.filter(element => element !== ''); // Take current array copy\n\n      let newFieldsArray = [...this.state.selectedSection.fields];\n      newFieldsArray[currentSectionIndex] = {\n        index,\n        type: 'chart',\n        chartType: selectedSection.fields[currentSectionIndex].chartType,\n        stacked: selectedSection.fields[currentSectionIndex].stacked,\n        dataset4: newArr,\n        labels: selectedSection.fields[currentSectionIndex].labels,\n        dataset1: selectedSection.fields[currentSectionIndex].dataset1,\n        dataset2: selectedSection.fields[currentSectionIndex].dataset2,\n        dataset3: selectedSection.fields[currentSectionIndex].dataset3,\n        dataset5: selectedSection.fields[currentSectionIndex].dataset5,\n        dataset6: selectedSection.fields[currentSectionIndex].dataset6,\n        // Dataset labels\n        dataset1Label: selectedSection.fields[currentSectionIndex].dataset1Label,\n        dataset2Label: selectedSection.fields[currentSectionIndex].dataset2Label,\n        dataset3Label: selectedSection.fields[currentSectionIndex].dataset3Label,\n        dataset4Label: selectedSection.fields[currentSectionIndex].dataset4Label,\n        dataset5Label: selectedSection.fields[currentSectionIndex].dataset5Label,\n        dataset6Label: selectedSection.fields[currentSectionIndex].dataset6Label\n      };\n      const newSection = {\n        title: this.state.selectedSection.title,\n        createdAt: this.state.selectedSection.createdAt,\n        fields: newFieldsArray,\n        id: this.state.selectedSection.id\n      };\n      await this.setState({\n        selectedSection: newSection\n      }); // Update database\n\n      db.collection('projects').doc(this.state.projectId).collection('businessPlan').doc(Router.query.project).collection('inputs') // .collection('currentBusinessPlan')\n      //   .doc('GrcvhyJwvlWVy31QsiudoQKdKI72')\n      //   .collection('inputs')\n      .doc(this.state.selectedSection.id).update({\n        fields: newFieldsArray\n      });\n    });\n\n    _defineProperty(this, \"onDataset5Update\", async (data, index, currentSectionIndex, selectedSection) => {\n      const newArrayObj = [];\n\n      if (data.dataset5ValueOne) {\n        const newObj = [data.dataset5Value1 ? data.dataset5Value1 : '', selectedSection.fields[currentSectionIndex].dataset5[1], selectedSection.fields[currentSectionIndex].dataset5[2], selectedSection.fields[currentSectionIndex].dataset5[3], selectedSection.fields[currentSectionIndex].dataset5[4], selectedSection.fields[currentSectionIndex].dataset5[5], selectedSection.fields[currentSectionIndex].dataset5[6], selectedSection.fields[currentSectionIndex].dataset5[7], selectedSection.fields[currentSectionIndex].dataset5[8], selectedSection.fields[currentSectionIndex].dataset5[9], selectedSection.fields[currentSectionIndex].dataset5[10], selectedSection.fields[currentSectionIndex].dataset5[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.dataset5Value22) {\n        const newObj = [selectedSection.fields[currentSectionIndex].dataset5[0], data.dataset5Value2 ? data.dataset5Value2 : '', selectedSection.fields[currentSectionIndex].dataset5[2], selectedSection.fields[currentSectionIndex].dataset5[3], selectedSection.fields[currentSectionIndex].dataset5[4], selectedSection.fields[currentSectionIndex].dataset5[5], selectedSection.fields[currentSectionIndex].dataset5[6], selectedSection.fields[currentSectionIndex].dataset5[7], selectedSection.fields[currentSectionIndex].dataset5[8], selectedSection.fields[currentSectionIndex].dataset5[9], selectedSection.fields[currentSectionIndex].dataset5[10], selectedSection.fields[currentSectionIndex].dataset5[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.dataset5Value33) {\n        const newObj = [selectedSection.fields[currentSectionIndex].dataset5[0], selectedSection.fields[currentSectionIndex].dataset5[1], data.dataset5Value3 ? data.dataset5Value3 : '', selectedSection.fields[currentSectionIndex].dataset5[3], selectedSection.fields[currentSectionIndex].dataset5[4], selectedSection.fields[currentSectionIndex].dataset5[5], selectedSection.fields[currentSectionIndex].dataset5[6], selectedSection.fields[currentSectionIndex].dataset5[7], selectedSection.fields[currentSectionIndex].dataset5[8], selectedSection.fields[currentSectionIndex].dataset5[9], selectedSection.fields[currentSectionIndex].dataset5[10], selectedSection.fields[currentSectionIndex].dataset5[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.dataset5Value44) {\n        const newObj = [selectedSection.fields[currentSectionIndex].dataset5[0], selectedSection.fields[currentSectionIndex].dataset5[1], selectedSection.fields[currentSectionIndex].dataset5[2], data.dataset5Value4 ? data.dataset5Value4 : '', selectedSection.fields[currentSectionIndex].dataset5[4], selectedSection.fields[currentSectionIndex].dataset5[5], selectedSection.fields[currentSectionIndex].dataset5[6], selectedSection.fields[currentSectionIndex].dataset5[7], selectedSection.fields[currentSectionIndex].dataset5[8], selectedSection.fields[currentSectionIndex].dataset5[9], selectedSection.fields[currentSectionIndex].dataset5[10], selectedSection.fields[currentSectionIndex].dataset5[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.dataset5Value55) {\n        const newObj = [selectedSection.fields[currentSectionIndex].dataset5[0], selectedSection.fields[currentSectionIndex].dataset5[1], selectedSection.fields[currentSectionIndex].dataset5[2], selectedSection.fields[currentSectionIndex].dataset5[3], data.dataset5Value5 ? data.dataset5Value5 : '', selectedSection.fields[currentSectionIndex].dataset5[5], selectedSection.fields[currentSectionIndex].dataset5[6], selectedSection.fields[currentSectionIndex].dataset5[7], selectedSection.fields[currentSectionIndex].dataset5[8], selectedSection.fields[currentSectionIndex].dataset5[9], selectedSection.fields[currentSectionIndex].dataset5[10], selectedSection.fields[currentSectionIndex].dataset5[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.dataset5Value66) {\n        const newObj = [selectedSection.fields[currentSectionIndex].dataset5[0], selectedSection.fields[currentSectionIndex].dataset5[1], selectedSection.fields[currentSectionIndex].dataset5[2], selectedSection.fields[currentSectionIndex].dataset5[3], selectedSection.fields[currentSectionIndex].dataset5[4], data.dataset5Value6 ? data.dataset5Value6 : '', selectedSection.fields[currentSectionIndex].dataset5[6], selectedSection.fields[currentSectionIndex].dataset5[7], selectedSection.fields[currentSectionIndex].dataset5[8], selectedSection.fields[currentSectionIndex].dataset5[9], selectedSection.fields[currentSectionIndex].dataset5[10], selectedSection.fields[currentSectionIndex].dataset5[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.dataset5Value77) {\n        const newObj = [selectedSection.fields[currentSectionIndex].dataset5[0], selectedSection.fields[currentSectionIndex].dataset5[1], selectedSection.fields[currentSectionIndex].dataset5[2], selectedSection.fields[currentSectionIndex].dataset5[3], selectedSection.fields[currentSectionIndex].dataset5[4], selectedSection.fields[currentSectionIndex].dataset5[5], data.dataset5Value7 ? data.dataset5Value7 : '', selectedSection.fields[currentSectionIndex].dataset5[7], selectedSection.fields[currentSectionIndex].dataset5[8], selectedSection.fields[currentSectionIndex].dataset5[9], selectedSection.fields[currentSectionIndex].dataset5[10], selectedSection.fields[currentSectionIndex].dataset5[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.dataset5Value88) {\n        const newObj = [selectedSection.fields[currentSectionIndex].dataset5[0], selectedSection.fields[currentSectionIndex].dataset5[1], selectedSection.fields[currentSectionIndex].dataset5[2], selectedSection.fields[currentSectionIndex].dataset5[3], selectedSection.fields[currentSectionIndex].dataset5[4], selectedSection.fields[currentSectionIndex].dataset5[5], selectedSection.fields[currentSectionIndex].dataset5[6], data.dataset5Value8 ? data.dataset5Value8 : '', selectedSection.fields[currentSectionIndex].dataset5[8], selectedSection.fields[currentSectionIndex].dataset5[9], selectedSection.fields[currentSectionIndex].dataset5[10], selectedSection.fields[currentSectionIndex].dataset5[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.dataset5Value99) {\n        const newObj = [selectedSection.fields[currentSectionIndex].dataset5[0], selectedSection.fields[currentSectionIndex].dataset5[1], selectedSection.fields[currentSectionIndex].dataset5[2], selectedSection.fields[currentSectionIndex].dataset5[3], selectedSection.fields[currentSectionIndex].dataset5[4], selectedSection.fields[currentSectionIndex].dataset5[5], selectedSection.fields[currentSectionIndex].dataset5[6], selectedSection.fields[currentSectionIndex].dataset5[7], data.dataset5Value9 ? data.dataset5Value9 : '', selectedSection.fields[currentSectionIndex].dataset5[9], selectedSection.fields[currentSectionIndex].dataset5[10], selectedSection.fields[currentSectionIndex].dataset5[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.dataset5Value100) {\n        const newObj = [selectedSection.fields[currentSectionIndex].dataset5[0], selectedSection.fields[currentSectionIndex].dataset5[1], selectedSection.fields[currentSectionIndex].dataset5[2], selectedSection.fields[currentSectionIndex].dataset5[3], selectedSection.fields[currentSectionIndex].dataset5[4], selectedSection.fields[currentSectionIndex].dataset5[5], selectedSection.fields[currentSectionIndex].dataset5[6], selectedSection.fields[currentSectionIndex].dataset5[7], selectedSection.fields[currentSectionIndex].dataset5[8], data.dataset5Value10 ? data.dataset5Value10 : '', selectedSection.fields[currentSectionIndex].dataset5[10], selectedSection.fields[currentSectionIndex].dataset5[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.dataset5Value111) {\n        const newObj = [selectedSection.fields[currentSectionIndex].dataset5[0], selectedSection.fields[currentSectionIndex].dataset5[1], selectedSection.fields[currentSectionIndex].dataset5[2], selectedSection.fields[currentSectionIndex].dataset5[3], selectedSection.fields[currentSectionIndex].dataset5[4], selectedSection.fields[currentSectionIndex].dataset5[5], selectedSection.fields[currentSectionIndex].dataset5[6], selectedSection.fields[currentSectionIndex].dataset5[7], selectedSection.fields[currentSectionIndex].dataset5[8], selectedSection.fields[currentSectionIndex].dataset5[9], data.dataset5Value11 ? data.dataset5Value11 : '', selectedSection.fields[currentSectionIndex].dataset5[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.dataset5Value120) {\n        const newObj = [selectedSection.fields[currentSectionIndex].dataset5[0], selectedSection.fields[currentSectionIndex].dataset5[1], selectedSection.fields[currentSectionIndex].dataset5[2], selectedSection.fields[currentSectionIndex].dataset5[3], selectedSection.fields[currentSectionIndex].dataset5[4], selectedSection.fields[currentSectionIndex].dataset5[5], selectedSection.fields[currentSectionIndex].dataset5[6], selectedSection.fields[currentSectionIndex].dataset5[7], selectedSection.fields[currentSectionIndex].dataset5[8], selectedSection.fields[currentSectionIndex].dataset5[9], selectedSection.fields[currentSectionIndex].dataset5[10], data.dataset5Value12 ? data.dataset5Value12 : ''];\n        newArrayObj.push(...newObj);\n      }\n\n      const filteredArrayObj = newArrayObj.map(obj => {\n        if (obj == undefined) {\n          return '';\n        } else {\n          return obj;\n        }\n      });\n      const newArr = filteredArrayObj.filter(element => element !== ''); // Take current array copy\n\n      let newFieldsArray = [...this.state.selectedSection.fields];\n      newFieldsArray[currentSectionIndex] = {\n        index,\n        type: 'chart',\n        chartType: selectedSection.fields[currentSectionIndex].chartType,\n        stacked: selectedSection.fields[currentSectionIndex].stacked,\n        dataset5: newArr,\n        labels: selectedSection.fields[currentSectionIndex].labels,\n        dataset1: selectedSection.fields[currentSectionIndex].dataset1,\n        dataset2: selectedSection.fields[currentSectionIndex].dataset2,\n        dataset3: selectedSection.fields[currentSectionIndex].dataset3,\n        dataset4: selectedSection.fields[currentSectionIndex].dataset4,\n        dataset6: selectedSection.fields[currentSectionIndex].dataset6,\n        // Dataset labels\n        dataset1Label: selectedSection.fields[currentSectionIndex].dataset1Label,\n        dataset2Label: selectedSection.fields[currentSectionIndex].dataset2Label,\n        dataset3Label: selectedSection.fields[currentSectionIndex].dataset3Label,\n        dataset4Label: selectedSection.fields[currentSectionIndex].dataset4Label,\n        dataset5Label: selectedSection.fields[currentSectionIndex].dataset5Label,\n        dataset6Label: selectedSection.fields[currentSectionIndex].dataset6Label\n      };\n      const newSection = {\n        title: this.state.selectedSection.title,\n        createdAt: this.state.selectedSection.createdAt,\n        fields: newFieldsArray,\n        id: this.state.selectedSection.id\n      };\n      await this.setState({\n        selectedSection: newSection\n      }); // Update database\n\n      db.collection('projects').doc(this.state.projectId).collection('businessPlan').doc(Router.query.project).collection('inputs') // .collection('currentBusinessPlan')\n      //   .doc('GrcvhyJwvlWVy31QsiudoQKdKI72')\n      //   .collection('inputs')\n      .doc(this.state.selectedSection.id).update({\n        fields: newFieldsArray\n      });\n    });\n\n    _defineProperty(this, \"onDataset6Update\", async (data, index, currentSectionIndex, selectedSection) => {\n      const newArrayObj = [];\n\n      if (data.dataset6ValueOne) {\n        const newObj = [data.dataset6Value1 ? data.dataset6Value1 : '', selectedSection.fields[currentSectionIndex].dataset6[1], selectedSection.fields[currentSectionIndex].dataset6[2], selectedSection.fields[currentSectionIndex].dataset6[3], selectedSection.fields[currentSectionIndex].dataset6[4], selectedSection.fields[currentSectionIndex].dataset6[5], selectedSection.fields[currentSectionIndex].dataset6[6], selectedSection.fields[currentSectionIndex].dataset6[7], selectedSection.fields[currentSectionIndex].dataset6[8], selectedSection.fields[currentSectionIndex].dataset6[9], selectedSection.fields[currentSectionIndex].dataset6[10], selectedSection.fields[currentSectionIndex].dataset6[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.dataset6Value22) {\n        const newObj = [selectedSection.fields[currentSectionIndex].dataset6[0], data.dataset6Value2 ? data.dataset6Value2 : '', selectedSection.fields[currentSectionIndex].dataset6[2], selectedSection.fields[currentSectionIndex].dataset6[3], selectedSection.fields[currentSectionIndex].dataset6[4], selectedSection.fields[currentSectionIndex].dataset6[5], selectedSection.fields[currentSectionIndex].dataset6[6], selectedSection.fields[currentSectionIndex].dataset6[7], selectedSection.fields[currentSectionIndex].dataset6[8], selectedSection.fields[currentSectionIndex].dataset6[9], selectedSection.fields[currentSectionIndex].dataset6[10], selectedSection.fields[currentSectionIndex].dataset6[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.dataset6Value33) {\n        const newObj = [selectedSection.fields[currentSectionIndex].dataset6[0], selectedSection.fields[currentSectionIndex].dataset6[1], data.dataset6Value3 ? data.dataset6Value3 : '', selectedSection.fields[currentSectionIndex].dataset6[3], selectedSection.fields[currentSectionIndex].dataset6[4], selectedSection.fields[currentSectionIndex].dataset6[5], selectedSection.fields[currentSectionIndex].dataset6[6], selectedSection.fields[currentSectionIndex].dataset6[7], selectedSection.fields[currentSectionIndex].dataset6[8], selectedSection.fields[currentSectionIndex].dataset6[9], selectedSection.fields[currentSectionIndex].dataset6[10], selectedSection.fields[currentSectionIndex].dataset6[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.dataset6Value44) {\n        const newObj = [selectedSection.fields[currentSectionIndex].dataset6[0], selectedSection.fields[currentSectionIndex].dataset6[1], selectedSection.fields[currentSectionIndex].dataset6[2], data.dataset6Value4 ? data.dataset6Value4 : '', selectedSection.fields[currentSectionIndex].dataset6[4], selectedSection.fields[currentSectionIndex].dataset6[5], selectedSection.fields[currentSectionIndex].dataset6[6], selectedSection.fields[currentSectionIndex].dataset6[7], selectedSection.fields[currentSectionIndex].dataset6[8], selectedSection.fields[currentSectionIndex].dataset6[9], selectedSection.fields[currentSectionIndex].dataset6[10], selectedSection.fields[currentSectionIndex].dataset6[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.dataset6Value55) {\n        const newObj = [selectedSection.fields[currentSectionIndex].dataset6[0], selectedSection.fields[currentSectionIndex].dataset6[1], selectedSection.fields[currentSectionIndex].dataset6[2], selectedSection.fields[currentSectionIndex].dataset6[3], data.dataset6Value5 ? data.dataset6Value5 : '', selectedSection.fields[currentSectionIndex].dataset6[5], selectedSection.fields[currentSectionIndex].dataset6[6], selectedSection.fields[currentSectionIndex].dataset6[7], selectedSection.fields[currentSectionIndex].dataset6[8], selectedSection.fields[currentSectionIndex].dataset6[9], selectedSection.fields[currentSectionIndex].dataset6[10], selectedSection.fields[currentSectionIndex].dataset6[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.dataset6Value66) {\n        const newObj = [selectedSection.fields[currentSectionIndex].dataset6[0], selectedSection.fields[currentSectionIndex].dataset6[1], selectedSection.fields[currentSectionIndex].dataset6[2], selectedSection.fields[currentSectionIndex].dataset6[3], selectedSection.fields[currentSectionIndex].dataset6[4], data.dataset6Value6 ? data.dataset6Value6 : '', selectedSection.fields[currentSectionIndex].dataset6[6], selectedSection.fields[currentSectionIndex].dataset6[7], selectedSection.fields[currentSectionIndex].dataset6[8], selectedSection.fields[currentSectionIndex].dataset6[9], selectedSection.fields[currentSectionIndex].dataset6[10], selectedSection.fields[currentSectionIndex].dataset6[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.dataset6Value77) {\n        const newObj = [selectedSection.fields[currentSectionIndex].dataset6[0], selectedSection.fields[currentSectionIndex].dataset6[1], selectedSection.fields[currentSectionIndex].dataset6[2], selectedSection.fields[currentSectionIndex].dataset6[3], selectedSection.fields[currentSectionIndex].dataset6[4], selectedSection.fields[currentSectionIndex].dataset6[5], data.dataset6Value7 ? data.dataset6Value7 : '', selectedSection.fields[currentSectionIndex].dataset6[7], selectedSection.fields[currentSectionIndex].dataset6[8], selectedSection.fields[currentSectionIndex].dataset6[9], selectedSection.fields[currentSectionIndex].dataset6[10], selectedSection.fields[currentSectionIndex].dataset6[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.dataset6Value88) {\n        const newObj = [selectedSection.fields[currentSectionIndex].dataset6[0], selectedSection.fields[currentSectionIndex].dataset6[1], selectedSection.fields[currentSectionIndex].dataset6[2], selectedSection.fields[currentSectionIndex].dataset6[3], selectedSection.fields[currentSectionIndex].dataset6[4], selectedSection.fields[currentSectionIndex].dataset6[5], selectedSection.fields[currentSectionIndex].dataset6[6], data.dataset6Value8 ? data.dataset6Value8 : '', selectedSection.fields[currentSectionIndex].dataset6[8], selectedSection.fields[currentSectionIndex].dataset6[9], selectedSection.fields[currentSectionIndex].dataset6[10], selectedSection.fields[currentSectionIndex].dataset6[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.dataset6Value99) {\n        const newObj = [selectedSection.fields[currentSectionIndex].dataset6[0], selectedSection.fields[currentSectionIndex].dataset6[1], selectedSection.fields[currentSectionIndex].dataset6[2], selectedSection.fields[currentSectionIndex].dataset6[3], selectedSection.fields[currentSectionIndex].dataset6[4], selectedSection.fields[currentSectionIndex].dataset6[5], selectedSection.fields[currentSectionIndex].dataset6[6], selectedSection.fields[currentSectionIndex].dataset6[7], data.dataset6Value9 ? data.dataset6Value9 : '', selectedSection.fields[currentSectionIndex].dataset6[9], selectedSection.fields[currentSectionIndex].dataset6[10], selectedSection.fields[currentSectionIndex].dataset6[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.dataset6Value100) {\n        const newObj = [selectedSection.fields[currentSectionIndex].dataset6[0], selectedSection.fields[currentSectionIndex].dataset6[1], selectedSection.fields[currentSectionIndex].dataset6[2], selectedSection.fields[currentSectionIndex].dataset6[3], selectedSection.fields[currentSectionIndex].dataset6[4], selectedSection.fields[currentSectionIndex].dataset6[5], selectedSection.fields[currentSectionIndex].dataset6[6], selectedSection.fields[currentSectionIndex].dataset6[7], selectedSection.fields[currentSectionIndex].dataset6[8], data.dataset6Value10 ? data.dataset6Value10 : '', selectedSection.fields[currentSectionIndex].dataset6[10], selectedSection.fields[currentSectionIndex].dataset6[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.dataset6Value111) {\n        const newObj = [selectedSection.fields[currentSectionIndex].dataset6[0], selectedSection.fields[currentSectionIndex].dataset6[1], selectedSection.fields[currentSectionIndex].dataset6[2], selectedSection.fields[currentSectionIndex].dataset6[3], selectedSection.fields[currentSectionIndex].dataset6[4], selectedSection.fields[currentSectionIndex].dataset6[5], selectedSection.fields[currentSectionIndex].dataset6[6], selectedSection.fields[currentSectionIndex].dataset6[7], selectedSection.fields[currentSectionIndex].dataset6[8], selectedSection.fields[currentSectionIndex].dataset6[9], data.dataset6Value11 ? data.dataset6Value11 : '', selectedSection.fields[currentSectionIndex].dataset6[11]];\n        newArrayObj.push(...newObj);\n      } else if (data.dataset6Value120) {\n        const newObj = [selectedSection.fields[currentSectionIndex].dataset6[0], selectedSection.fields[currentSectionIndex].dataset6[1], selectedSection.fields[currentSectionIndex].dataset6[2], selectedSection.fields[currentSectionIndex].dataset6[3], selectedSection.fields[currentSectionIndex].dataset6[4], selectedSection.fields[currentSectionIndex].dataset6[5], selectedSection.fields[currentSectionIndex].dataset6[6], selectedSection.fields[currentSectionIndex].dataset6[7], selectedSection.fields[currentSectionIndex].dataset6[8], selectedSection.fields[currentSectionIndex].dataset6[9], selectedSection.fields[currentSectionIndex].dataset6[10], data.dataset6Value12 ? data.dataset6Value12 : ''];\n        newArrayObj.push(...newObj);\n      }\n\n      const filteredArrayObj = newArrayObj.map(obj => {\n        if (obj == undefined) {\n          return '';\n        } else {\n          return obj;\n        }\n      });\n      const newArr = filteredArrayObj.filter(element => element !== ''); // Take current array copy\n\n      let newFieldsArray = [...this.state.selectedSection.fields];\n      newFieldsArray[currentSectionIndex] = {\n        index,\n        type: 'chart',\n        chartType: selectedSection.fields[currentSectionIndex].chartType,\n        stacked: selectedSection.fields[currentSectionIndex].stacked,\n        dataset6: newArr,\n        labels: selectedSection.fields[currentSectionIndex].labels,\n        dataset1: selectedSection.fields[currentSectionIndex].dataset1,\n        dataset2: selectedSection.fields[currentSectionIndex].dataset2,\n        dataset3: selectedSection.fields[currentSectionIndex].dataset3,\n        dataset4: selectedSection.fields[currentSectionIndex].dataset4,\n        dataset5: selectedSection.fields[currentSectionIndex].dataset5,\n        // Dataset labels\n        dataset1Label: selectedSection.fields[currentSectionIndex].dataset1Label,\n        dataset2Label: selectedSection.fields[currentSectionIndex].dataset2Label,\n        dataset3Label: selectedSection.fields[currentSectionIndex].dataset3Label,\n        dataset4Label: selectedSection.fields[currentSectionIndex].dataset4Label,\n        dataset5Label: selectedSection.fields[currentSectionIndex].dataset5Label,\n        dataset6Label: selectedSection.fields[currentSectionIndex].dataset6Label\n      };\n      const newSection = {\n        title: this.state.selectedSection.title,\n        createdAt: this.state.selectedSection.createdAt,\n        fields: newFieldsArray,\n        id: this.state.selectedSection.id\n      };\n      await this.setState({\n        selectedSection: newSection\n      }); // Update database\n\n      db.collection('projects').doc(this.state.projectId).collection('businessPlan').doc(Router.query.project).collection('inputs') // .collection('currentBusinessPlan')\n      //   .doc('GrcvhyJwvlWVy31QsiudoQKdKI72')\n      //   .collection('inputs')\n      .doc(this.state.selectedSection.id).update({\n        fields: newFieldsArray\n      });\n    });\n\n    _defineProperty(this, \"onDatasetLabel1Update\", async (data, index, currentSectionIndex, selectedSection) => {\n      // Take current array copy\n      let newFieldsArray = [...this.state.selectedSection.fields];\n      newFieldsArray[currentSectionIndex] = {\n        index,\n        type: 'chart',\n        chartType: selectedSection.fields[currentSectionIndex].chartType,\n        stacked: selectedSection.fields[currentSectionIndex].stacked,\n        labels: selectedSection.fields[currentSectionIndex].labels,\n        dataset1: selectedSection.fields[currentSectionIndex].dataset1,\n        dataset2: selectedSection.fields[currentSectionIndex].dataset2,\n        dataset3: selectedSection.fields[currentSectionIndex].dataset3,\n        dataset4: selectedSection.fields[currentSectionIndex].dataset4,\n        dataset5: selectedSection.fields[currentSectionIndex].dataset5,\n        dataset6: selectedSection.fields[currentSectionIndex].dataset6,\n        // Dataset labels\n        dataset1Label: data.dataset1Label,\n        dataset2Label: selectedSection.fields[currentSectionIndex].dataset2Label,\n        dataset3Label: selectedSection.fields[currentSectionIndex].dataset3Label,\n        dataset4Label: selectedSection.fields[currentSectionIndex].dataset4Label,\n        dataset5Label: selectedSection.fields[currentSectionIndex].dataset5Label,\n        dataset6Label: selectedSection.fields[currentSectionIndex].dataset6Label\n      };\n      const newSection = {\n        title: this.state.selectedSection.title,\n        createdAt: this.state.selectedSection.createdAt,\n        fields: newFieldsArray,\n        id: this.state.selectedSection.id\n      };\n      await this.setState({\n        selectedSection: newSection\n      }); // Update database\n\n      db.collection('projects').doc(this.state.projectId).collection('businessPlan').doc(Router.query.project).collection('inputs') // .collection('currentBusinessPlan')\n      //   .doc('GrcvhyJwvlWVy31QsiudoQKdKI72')\n      //   .collection('inputs')\n      .doc(this.state.selectedSection.id).update({\n        fields: newFieldsArray\n      });\n    });\n\n    _defineProperty(this, \"onDatasetLabel2Update\", async (data, index, currentSectionIndex, selectedSection) => {\n      // Take current array copy\n      let newFieldsArray = [...this.state.selectedSection.fields];\n      newFieldsArray[currentSectionIndex] = {\n        index,\n        type: 'chart',\n        chartType: selectedSection.fields[currentSectionIndex].chartType,\n        stacked: selectedSection.fields[currentSectionIndex].stacked,\n        labels: selectedSection.fields[currentSectionIndex].labels,\n        dataset1: selectedSection.fields[currentSectionIndex].dataset1,\n        dataset2: selectedSection.fields[currentSectionIndex].dataset2,\n        dataset3: selectedSection.fields[currentSectionIndex].dataset3,\n        dataset4: selectedSection.fields[currentSectionIndex].dataset4,\n        dataset5: selectedSection.fields[currentSectionIndex].dataset5,\n        dataset6: selectedSection.fields[currentSectionIndex].dataset6,\n        // Dataset labels\n        dataset1Label: selectedSection.fields[currentSectionIndex].dataset1Label,\n        dataset2Label: data.dataset2Label,\n        dataset3Label: selectedSection.fields[currentSectionIndex].dataset3Label,\n        dataset4Label: selectedSection.fields[currentSectionIndex].dataset4Label,\n        dataset5Label: selectedSection.fields[currentSectionIndex].dataset5Label,\n        dataset6Label: selectedSection.fields[currentSectionIndex].dataset6Label\n      };\n      const newSection = {\n        title: this.state.selectedSection.title,\n        createdAt: this.state.selectedSection.createdAt,\n        fields: newFieldsArray,\n        id: this.state.selectedSection.id\n      };\n      await this.setState({\n        selectedSection: newSection\n      }); // Update database\n\n      db.collection('projects').doc(this.state.projectId).collection('businessPlan').doc(Router.query.project).collection('inputs') // .collection('currentBusinessPlan')\n      //   .doc('GrcvhyJwvlWVy31QsiudoQKdKI72')\n      //   .collection('inputs')\n      .doc(this.state.selectedSection.id).update({\n        fields: newFieldsArray\n      });\n    });\n\n    _defineProperty(this, \"onDatasetLabel3Update\", async (data, index, currentSectionIndex, selectedSection) => {\n      // Take current array copy\n      let newFieldsArray = [...this.state.selectedSection.fields];\n      newFieldsArray[currentSectionIndex] = {\n        index,\n        type: 'chart',\n        chartType: selectedSection.fields[currentSectionIndex].chartType,\n        stacked: selectedSection.fields[currentSectionIndex].stacked,\n        labels: selectedSection.fields[currentSectionIndex].labels,\n        dataset1: selectedSection.fields[currentSectionIndex].dataset1,\n        dataset2: selectedSection.fields[currentSectionIndex].dataset2,\n        dataset3: selectedSection.fields[currentSectionIndex].dataset3,\n        dataset4: selectedSection.fields[currentSectionIndex].dataset4,\n        dataset5: selectedSection.fields[currentSectionIndex].dataset5,\n        dataset6: selectedSection.fields[currentSectionIndex].dataset6,\n        // Dataset labels\n        dataset1Label: selectedSection.fields[currentSectionIndex].dataset1Label,\n        dataset2Label: selectedSection.fields[currentSectionIndex].dataset2Label,\n        dataset3Label: data.dataset3Label,\n        dataset4Label: selectedSection.fields[currentSectionIndex].dataset4Label,\n        dataset5Label: selectedSection.fields[currentSectionIndex].dataset5Label,\n        dataset6Label: selectedSection.fields[currentSectionIndex].dataset6Label\n      };\n      const newSection = {\n        title: this.state.selectedSection.title,\n        createdAt: this.state.selectedSection.createdAt,\n        fields: newFieldsArray,\n        id: this.state.selectedSection.id\n      };\n      await this.setState({\n        selectedSection: newSection\n      }); // Update database\n\n      db.collection('projects').doc(this.state.projectId).collection('businessPlan').doc(Router.query.project).collection('inputs') // .collection('currentBusinessPlan')\n      //   .doc('GrcvhyJwvlWVy31QsiudoQKdKI72')\n      //   .collection('inputs')\n      .doc(this.state.selectedSection.id).update({\n        fields: newFieldsArray\n      });\n    });\n\n    _defineProperty(this, \"onDatasetLabel4Update\", async (data, index, currentSectionIndex, selectedSection) => {\n      // Take current array copy\n      let newFieldsArray = [...this.state.selectedSection.fields];\n      newFieldsArray[currentSectionIndex] = {\n        index,\n        type: 'chart',\n        chartType: selectedSection.fields[currentSectionIndex].chartType,\n        stacked: selectedSection.fields[currentSectionIndex].stacked,\n        labels: selectedSection.fields[currentSectionIndex].labels,\n        dataset1: selectedSection.fields[currentSectionIndex].dataset1,\n        dataset2: selectedSection.fields[currentSectionIndex].dataset2,\n        dataset3: selectedSection.fields[currentSectionIndex].dataset3,\n        dataset4: selectedSection.fields[currentSectionIndex].dataset4,\n        dataset5: selectedSection.fields[currentSectionIndex].dataset5,\n        dataset6: selectedSection.fields[currentSectionIndex].dataset6,\n        // Dataset labels\n        dataset1Label: selectedSection.fields[currentSectionIndex].dataset1Label,\n        dataset2Label: selectedSection.fields[currentSectionIndex].dataset2Label,\n        dataset3Label: selectedSection.fields[currentSectionIndex].dataset3Label,\n        dataset4Label: data.dataset4Label,\n        dataset5Label: selectedSection.fields[currentSectionIndex].dataset5Label,\n        dataset6Label: selectedSection.fields[currentSectionIndex].dataset6Label\n      };\n      const newSection = {\n        title: this.state.selectedSection.title,\n        createdAt: this.state.selectedSection.createdAt,\n        fields: newFieldsArray,\n        id: this.state.selectedSection.id\n      };\n      await this.setState({\n        selectedSection: newSection\n      }); // Update database\n\n      db.collection('projects').doc(this.state.projectId).collection('businessPlan').doc(Router.query.project).collection('inputs') // .collection('currentBusinessPlan')\n      //   .doc('GrcvhyJwvlWVy31QsiudoQKdKI72')\n      //   .collection('inputs')\n      .doc(this.state.selectedSection.id).update({\n        fields: newFieldsArray\n      });\n    });\n\n    _defineProperty(this, \"onDatasetLabel5Update\", async (data, index, currentSectionIndex, selectedSection) => {\n      // Take current array copy\n      let newFieldsArray = [...this.state.selectedSection.fields];\n      newFieldsArray[currentSectionIndex] = {\n        index,\n        type: 'chart',\n        chartType: selectedSection.fields[currentSectionIndex].chartType,\n        stacked: selectedSection.fields[currentSectionIndex].stacked,\n        labels: selectedSection.fields[currentSectionIndex].labels,\n        dataset1: selectedSection.fields[currentSectionIndex].dataset1,\n        dataset2: selectedSection.fields[currentSectionIndex].dataset2,\n        dataset3: selectedSection.fields[currentSectionIndex].dataset3,\n        dataset4: selectedSection.fields[currentSectionIndex].dataset4,\n        dataset5: selectedSection.fields[currentSectionIndex].dataset5,\n        dataset6: selectedSection.fields[currentSectionIndex].dataset6,\n        // Dataset labels\n        dataset1Label: selectedSection.fields[currentSectionIndex].dataset1Label,\n        dataset2Label: selectedSection.fields[currentSectionIndex].dataset2Label,\n        dataset3Label: selectedSection.fields[currentSectionIndex].dataset3Label,\n        dataset4Label: selectedSection.fields[currentSectionIndex].dataset4Label,\n        dataset5Label: data.dataset5Label,\n        dataset6Label: selectedSection.fields[currentSectionIndex].dataset6Label\n      };\n      const newSection = {\n        title: this.state.selectedSection.title,\n        createdAt: this.state.selectedSection.createdAt,\n        fields: newFieldsArray,\n        id: this.state.selectedSection.id\n      };\n      await this.setState({\n        selectedSection: newSection\n      }); // Update database\n\n      db.collection('projects').doc(this.state.projectId).collection('businessPlan').doc(Router.query.project).collection('inputs') // .collection('currentBusinessPlan')\n      //   .doc('GrcvhyJwvlWVy31QsiudoQKdKI72')\n      //   .collection('inputs')\n      .doc(this.state.selectedSection.id).update({\n        fields: newFieldsArray\n      });\n    });\n\n    _defineProperty(this, \"onDatasetLabel6Update\", async (data, index, currentSectionIndex, selectedSection) => {\n      // Take current array copy\n      let newFieldsArray = [...this.state.selectedSection.fields];\n      newFieldsArray[currentSectionIndex] = {\n        index,\n        type: 'chart',\n        chartType: selectedSection.fields[currentSectionIndex].chartType,\n        stacked: selectedSection.fields[currentSectionIndex].stacked,\n        labels: selectedSection.fields[currentSectionIndex].labels,\n        dataset1: selectedSection.fields[currentSectionIndex].dataset1,\n        dataset2: selectedSection.fields[currentSectionIndex].dataset2,\n        dataset3: selectedSection.fields[currentSectionIndex].dataset3,\n        dataset4: selectedSection.fields[currentSectionIndex].dataset4,\n        dataset5: selectedSection.fields[currentSectionIndex].dataset5,\n        dataset6: selectedSection.fields[currentSectionIndex].dataset6,\n        // Dataset labels\n        dataset1Label: selectedSection.fields[currentSectionIndex].dataset1Label,\n        dataset2Label: selectedSection.fields[currentSectionIndex].dataset2Label,\n        dataset3Label: selectedSection.fields[currentSectionIndex].dataset3Label,\n        dataset4Label: selectedSection.fields[currentSectionIndex].dataset4Label,\n        dataset5Label: selectedSection.fields[currentSectionIndex].dataset5Label,\n        dataset6Label: data.dataset6Label\n      };\n      const newSection = {\n        title: this.state.selectedSection.title,\n        createdAt: this.state.selectedSection.createdAt,\n        fields: newFieldsArray,\n        id: this.state.selectedSection.id\n      };\n      await this.setState({\n        selectedSection: newSection\n      }); // Update database\n\n      db.collection('projects').doc(this.state.projectId).collection('businessPlan').doc(Router.query.project).collection('inputs') // .collection('currentBusinessPlan')\n      //   .doc('GrcvhyJwvlWVy31QsiudoQKdKI72')\n      //   .collection('inputs')\n      .doc(this.state.selectedSection.id).update({\n        fields: newFieldsArray\n      });\n    });\n\n    _defineProperty(this, \"chartValueUpdate\", async (value, index, currentSectionIndex) => {\n      console.log(value);\n      console.log(index);\n      console.log(currentSectionIndex); // console.log(this.state.selectedSection);\n\n      if (value.name) {\n        console.log(value.name);\n      }\n\n      const name = value.name ? value.name : this.state.selectedSection.fields[currentSectionIndex].data.name;\n      const type = value.type ? value.type : this.state.selectedSection.fields[currentSectionIndex].data.type;\n      const valuev = value.value ? value.value : this.state.selectedSection.fields[currentSectionIndex].data.value;\n      const color = value.color ? value.color : this.state.selectedSection.fields[currentSectionIndex].data.color;\n      const newObj = {\n        name,\n        type,\n        value: valuev,\n        color\n      }; // Take current array copy\n\n      let newFieldsArray = [...this.state.selectedSection.fields];\n      newFieldsArray[currentSectionIndex] = {\n        index,\n        type: 'chart',\n        data: newObj\n      };\n      const newSection = {\n        title: this.state.selectedSection.title,\n        createdAt: this.state.selectedSection.createdAt,\n        fields: newFieldsArray,\n        id: this.state.selectedSection.id\n      };\n      this.setState({\n        selectedSection: newSection\n      }); // Update database\n\n      db.collection('projects').doc(this.state.projectId).collection('businessPlan').doc(Router.query.project).collection('inputs') // .collection('currentBusinessPlan')\n      //   .doc('GrcvhyJwvlWVy31QsiudoQKdKI72')\n      //   .collection('inputs')\n      .doc(this.state.selectedSection.id).update({\n        fields: newFieldsArray\n      });\n    });\n\n    _defineProperty(this, \"newSectionPage\", async title => {\n      const section = {\n        position: this.state.sections.length,\n        title: title,\n        body: ''\n      };\n      const newFromDB = await db.collection('projects').doc(this.state.projectId).collection('businessPlan').doc(Router.query.project).collection('inputs').add({\n        position: section.position,\n        title: section.title,\n        // body: section.body,\n        fields: [],\n        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n        createdAt: new Date()\n      });\n      const newID = newFromDB.id; // await this.setState({ sections: [...this.state.sections, section] });\n\n      const newSectionIndex = this.state.sections.indexOf(this.state.sections.filter(_section => _section.id === newID)[0]);\n      this.setState({\n        selectedSection: this.state.sections[newSectionIndex],\n        selectedSectionIndex: newSectionIndex\n      });\n    });\n\n    _defineProperty(this, \"deleteSectionPage\", async section => {\n      const sectionIndex = this.state.sections.indexOf(section);\n      await this.setState({\n        sections: this.state.sections.filter(_section => _section !== section)\n      });\n\n      if (this.state.selectedSectionIndex === sectionIndex) {\n        this.setState({\n          selectedSectionIndex: null,\n          selectedSection: null\n        });\n      } else {\n        // this.state.sections.length > 1 ?\n        // this.selectSectionPage(this.state.sections[this.state.selectedSectionIndex - 1], this.state.selectedSectionIndex - 1) :\n        // this.setState({ selectedSectionIndex: null, selectedSection: null });\n        if (this.state.sections.length >= 1) {\n          this.state.selectedSectionIndex < sectionIndex ? this.selectSectionPage(this.state.sections[this.state.selectedSectionIndex], this.state.selectedSectionIndex) : this.selectSectionPage(this.state.sections[this.state.selectedSectionIndex - 1], this.state.selectedSectionIndex - 1);\n        } else {\n          this.setState({\n            selectedNote: null,\n            selectedNote: null\n          }); // DO POPRAWY\n        }\n      }\n\n      db.collection('projects').doc(this.state.projectId).collection('businessPlan').doc(Router.query.project).collection('inputs') // .collection('currentBusinessPlan')\n      //   .doc('GrcvhyJwvlWVy31QsiudoQKdKI72')\n      //   .collection('inputs')\n      .doc(section.id).delete();\n    });\n\n    _defineProperty(this, \"chartTypeUpdate\", async newSection => {\n      await this.setState({\n        selectedSection: newSection\n      });\n    });\n\n    _defineProperty(this, \"onLeftBarHidden\", () => {\n      // --- VERSION 1 ---\n      // EXIT\n      // gsap.to(document.getElementById('exit'), { autoAlpha: 0, duration: 1, ease: Linear })\n      // // TEXT\n      // gsap.to(document.getElementById('left-text'), { scale: 0, duration: 1, ease: Linear });\n      // gsap.to(document.getElementById('left-text1'), { scale: 0, duration: 1, ease: Linear });\n      // gsap.to(document.getElementById('left-text2'), { scale: 0, duration: 1, ease: Linear });\n      // // IMAGES\n      // gsap.to(document.getElementById('left-element'), { scale: 0, duration: 1, ease: Linear });\n      // gsap.to(document.getElementById('left-element1'), { scale: 0, duration: 1, ease: Linear });\n      // gsap.to(document.getElementById('left-element2'), { scale: 0, duration: 1, ease: Linear });\n      // gsap.to(document.getElementById('left-bar'), {width: 0, transformOrigin: 'left', duration: 1, ease: Linear, delay: 1 });\n      // --- VERSION 2 ---\n      // CONTAINERS\n      gsap.to(document.getElementById('container'), {\n        autoAlpha: 0,\n        delay: 1\n      });\n      gsap.to(document.getElementById('container1'), {\n        autoAlpha: 0,\n        delay: 1\n      });\n      gsap.to(document.getElementById('container2'), {\n        autoAlpha: 0,\n        delay: 1\n      });\n      gsap.to(document.getElementById('container3'), {\n        autoAlpha: 0,\n        delay: 1\n      });\n      gsap.to(document.getElementById('container4'), {\n        autoAlpha: 0,\n        delay: 1\n      }); // LEFT BAR\n\n      gsap.to(document.getElementById('left-bar'), {\n        height: 0,\n        transformOrigin: 'top',\n        duration: 2.5,\n        ease: Linear\n      }); // EXIT\n\n      gsap.to(document.getElementById('exit'), {\n        autoAlpha: 0,\n        duration: 2,\n        ease: Linear\n      }); // TEXTS\n\n      gsap.to(document.getElementById('left-text4'), {\n        scale: 0,\n        transformOrigin: 'top',\n        duration: 1,\n        ease: Linear\n      });\n      gsap.to(document.getElementById('left-text3'), {\n        scale: 0,\n        transformOrigin: 'top',\n        duration: 1,\n        ease: Linear,\n        delay: .2\n      });\n      gsap.to(document.getElementById('left-text2'), {\n        scale: 0,\n        transformOrigin: 'top',\n        duration: 1,\n        ease: Linear,\n        delay: .4\n      });\n      gsap.to(document.getElementById('left-text1'), {\n        scale: 0,\n        transformOrigin: 'top',\n        duration: 1,\n        ease: Linear,\n        delay: .6\n      });\n      gsap.to(document.getElementById('left-text'), {\n        scale: 0,\n        transformOrigin: 'top',\n        duration: 1,\n        ease: Linear,\n        delay: .8\n      }); // IMAGES\n\n      gsap.to(document.getElementById('left-element4'), {\n        scale: 0,\n        transformOrigin: 'top',\n        duration: 1,\n        ease: Linear\n      });\n      gsap.to(document.getElementById('left-element3'), {\n        scale: 0,\n        transformOrigin: 'top',\n        duration: 1,\n        ease: Linear,\n        delay: .2\n      });\n      gsap.to(document.getElementById('left-element2'), {\n        scale: 0,\n        transformOrigin: 'top',\n        duration: 1,\n        ease: Linear,\n        delay: .4\n      });\n      gsap.to(document.getElementById('left-element1'), {\n        scale: 0,\n        transformOrigin: 'top',\n        duration: 1,\n        ease: Linear,\n        delay: .6\n      });\n      gsap.to(document.getElementById('left-element'), {\n        scale: 0,\n        transformOrigin: 'top',\n        duration: 1,\n        ease: Linear,\n        delay: .8\n      });\n    });\n\n    _defineProperty(this, \"pdfChartsCreate\", async sections => {\n      // console.log(sections);\n      const images = [];\n      sections.map(section => {\n        section.fields.map(async field => {\n          if (field.type == 'chart') {\n            console.log(field);\n            const colors = field.chartType == 'Pie chart' || field.chartType == 'Doughnut chart' ? ['rgba(205,220,57,1)', 'rgba(255,235,59,1)', 'rgba(255,193,7,1)', 'rgba(255,152,0,1)', 'rgba(255,87,34,1)', 'rgba(244,67,54,1)', 'rgba(233,30,99,1)', 'rgba(156,39,176,1)', 'rgba(103,58,183,1)', 'rgba(63,81,181,1)', 'rgba(96,125,139,1)', 'rgba(121,85,72,1)'] : field.chartType == 'Line chart' || field.chartType == 'Area chart' ? 'rgba(255,185,0 ,1 )' : ['rgba(255,185,0 ,1 )', 'rgba(255,185,0 ,1 )', 'rgba(255,185,0 ,1 )', 'rgba(255,185,0 ,1 )', 'rgba(255,185,0 ,1 )', 'rgba(255,185,0 ,1 )', 'rgba(255,185,0 ,1 )', 'rgba(255,185,0 ,1 )', 'rgba(255,185,0 ,1 )', 'rgba(255,185,0 ,1 )', 'rgba(255,185,0 ,1 )', 'rgba(255,185,0 ,1 )'];\n            const colors1 = field.chartType == 'Pie chart' || field.chartType == 'Doughnut chart' ? ['rgba(205,220,57,1)', 'rgba(255,235,59,1)', 'rgba(255,193,7,1)', 'rgba(255,152,0,1)', 'rgba(255,87,34,1)', 'rgba(244,67,54,1)', 'rgba(233,30,99,1)', 'rgba(156,39,176,1)', 'rgba(103,58,183,1)', 'rgba(63,81,181,1)', 'rgba(96,125,139,1)', 'rgba(121,85,72,1)'] : field.chartType == 'Line chart' || field.chartType == 'Area chart' ? 'rgba(0,204,106 ,1 )' : ['rgba(0,204,106 ,1 )', 'rgba(0,204,106 ,1 )', 'rgba(0,204,106 ,1 )', 'rgba(0,204,106 ,1 )', 'rgba(0,204,106 ,1 )', 'rgba(0,204,106 ,1 )', 'rgba(0,204,106 ,1 )', 'rgba(0,204,106 ,1 )', 'rgba(0,204,106 ,1 )', 'rgba(0,204,106 ,1 )', 'rgba(0,204,106 ,1 )', 'rgba(0,204,106 ,1 )'];\n            const colors2 = field.chartType == 'Pie chart' || field.chartType == 'Doughnut chart' ? ['rgba(205,220,57,1)', 'rgba(255,235,59,1)', 'rgba(255,193,7,1)', 'rgba(255,152,0,1)', 'rgba(255,87,34,1)', 'rgba(244,67,54,1)', 'rgba(233,30,99,1)', 'rgba(156,39,176,1)', 'rgba(103,58,183,1)', 'rgba(63,81,181,1)', 'rgba(96,125,139,1)', 'rgba(121,85,72,1)'] : field.chartType == 'Line chart' || field.chartType == 'Area chart' ? 'rgba(0,120,215 ,1 )' : ['rgba(0,120,215 ,1 )', 'rgba(0,120,215 ,1 )', 'rgba(0,120,215 ,1 )', 'rgba(0,120,215 ,1 )', 'rgba(0,120,215 ,1 )', 'rgba(0,120,215 ,1 )', 'rgba(0,120,215 ,1 )', 'rgba(0,120,215 ,1 )', 'rgba(0,120,215 ,1 )', 'rgba(0,120,215 ,1 )', 'rgba(0,120,215 ,1 )', 'rgba(0,120,215 ,1 )'];\n            const colors3 = field.chartType == 'Pie chart' || field.chartType == 'Doughnut chart' ? ['rgba(205,220,57,1)', 'rgba(255,235,59,1)', 'rgba(255,193,7,1)', 'rgba(255,152,0,1)', 'rgba(255,87,34,1)', 'rgba(244,67,54,1)', 'rgba(233,30,99,1)', 'rgba(156,39,176,1)', 'rgba(103,58,183,1)', 'rgba(63,81,181,1)', 'rgba(96,125,139,1)', 'rgba(121,85,72,1)'] : field.chartType == 'Line chart' || field.chartType == 'Area chart' ? 'rgba(231,72,86 ,1 )' : ['rgba(231,72,86 ,1 )', 'rgba(231,72,86 ,1 )', 'rgba(231,72,86 ,1 )', 'rgba(231,72,86 ,1 )', 'rgba(231,72,86 ,1 )', 'rgba(231,72,86 ,1 )', 'rgba(231,72,86 ,1 )', 'rgba(231,72,86 ,1 )', 'rgba(231,72,86 ,1 )', 'rgba(231,72,86 ,1 )', 'rgba(231,72,86 ,1 )', 'rgba(231,72,86 ,1 )'];\n            const colors4 = field.chartType == 'Pie chart' || field.chartType == 'Doughnut chart' ? ['rgba(205,220,57,1)', 'rgba(255,235,59,1)', 'rgba(255,193,7,1)', 'rgba(255,152,0,1)', 'rgba(255,87,34,1)', 'rgba(244,67,54,1)', 'rgba(233,30,99,1)', 'rgba(156,39,176,1)', 'rgba(103,58,183,1)', 'rgba(63,81,181,1)', 'rgba(96,125,139,1)', 'rgba(121,85,72,1)'] : field.chartType == 'Line chart' || field.chartType == 'Area chart' ? 'rgba(126,115,95 ,1 )' : ['rgba(126,115,95 ,1 )', 'rgba(126,115,95 ,1 )', 'rgba(126,115,95 ,1 )', 'rgba(126,115,95 ,1 )', 'rgba(126,115,95 ,1 )', 'rgba(126,115,95 ,1 )', 'rgba(126,115,95 ,1 )', 'rgba(126,115,95 ,1 )', 'rgba(126,115,95 ,1 )', 'rgba(126,115,95 ,1 )', 'rgba(126,115,95 ,1 )', 'rgba(126,115,95 ,1 )'];\n            const colors5 = field.chartType == 'Pie chart' || field.chartType == 'Doughnut chart' ? ['rgba(205,220,57,1)', 'rgba(255,235,59,1)', 'rgba(255,193,7,1)', 'rgba(255,152,0,1)', 'rgba(255,87,34,1)', 'rgba(244,67,54,1)', 'rgba(233,30,99,1)', 'rgba(156,39,176,1)', 'rgba(103,58,183,1)', 'rgba(63,81,181,1)', 'rgba(96,125,139,1)', 'rgba(121,85,72,1)'] : field.chartType == 'Line chart' || field.chartType == 'Area chart' ? 'rgba(177,70,194 ,1 )' : ['rgba(177,70,194 ,1 )', 'rgba(177,70,194 ,1 )', 'rgba(177,70,194 ,1 )', 'rgba(177,70,194 ,1 )', 'rgba(177,70,194 ,1 )', 'rgba(177,70,194 ,1 )', 'rgba(177,70,194 ,1 )', 'rgba(177,70,194 ,1 )', 'rgba(177,70,194 ,1 )', 'rgba(177,70,194 ,1 )', 'rgba(177,70,194 ,1 )', 'rgba(177,70,194 ,1 )'];\n            const data = {\n              labels: field.labels && [...field.labels.map(label => {\n                if (label !== '') {\n                  return label;\n                } else {\n                  return '';\n                }\n              })],\n              datasets: [// Dataset1\n              {\n                label: field.dataset1Label && field.dataset1Label,\n                data: field.dataset1 && field.dataset1.map(data => {\n                  if (data !== '') {\n                    return data;\n                  }\n                }),\n                backgroundColor: colors,\n                borderWidth: field.chartType == 'Area chart' ? 0 : field.chartType == 'Pie chart' || field.chartType == 'Doughnut chart' && 2\n              }, // Dataset2\n              {\n                label: field.dataset2Label && field.dataset2Label,\n                data: field.dataset2 && field.dataset2.map(data => {\n                  if (data !== '') {\n                    return data;\n                  }\n                }),\n                backgroundColor: colors1,\n                borderWidth: field.chartType == 'Area chart' ? 0 : field.chartType == 'Pie chart' || field.chartType == 'Doughnut chart' && 2\n              }, // Dataset3\n              {\n                label: field.dataset3Label && field.dataset3Label,\n                data: field.dataset3 && field.dataset3.map(data => {\n                  if (data !== '') {\n                    return data;\n                  }\n                }),\n                backgroundColor: colors2,\n                borderWidth: field.chartType == 'Area chart' ? 0 : field.chartType == 'Pie chart' || field.chartType == 'Doughnut chart' && 2\n              }, // Dataset4\n              {\n                label: field.dataset4Label && field.dataset4Label,\n                data: field.dataset4 && field.dataset4.map(data => {\n                  if (data !== '') {\n                    return data;\n                  }\n                }),\n                backgroundColor: colors3,\n                borderWidth: field.chartType == 'Area chart' ? 0 : field.chartType == 'Pie chart' || field.chartType == 'Doughnut chart' && 2\n              }, // Dataset5\n              {\n                label: field.dataset5Label && field.dataset5Label,\n                data: field.dataset5 && field.dataset5.map(data => {\n                  if (data !== '') {\n                    return data;\n                  }\n                }),\n                backgroundColor: colors4,\n                borderWidth: field.chartType == 'Area chart' ? 0 : field.chartType == 'Pie chart' || field.chartType == 'Doughnut chart' && 2\n              }, // Dataset6\n              {\n                label: field.dataset6Label && field.dataset6Label,\n                data: field.dataset6 && field.dataset6.map(data => {\n                  if (data !== '') {\n                    return data;\n                  }\n                }),\n                backgroundColor: colors5,\n                borderWidth: field.chartType == 'Area chart' ? 0 : field.chartType == 'Pie chart' || field.chartType == 'Doughnut chart' && 2\n              }]\n            };\n            const toSaveChart = new ChartJsImage();\n            toSaveChart.setConfig({\n              type: 'bar',\n              data: data,\n              options: {\n                responsive: false,\n                scales: {\n                  y: {\n                    beginAtZero: true\n                  }\n                }\n              }\n            });\n            const imageUrl = toSaveChart.toDataUrl(); // const returnedChart = imageUrl.then((data) => data);\n            // return imageUrl.then((data) => `<img src='${data}' />`)\n            // imageUrl.then((data) => images.push({\n            //   index: field.index,\n            //   imageUrl: data\n            // }))\n\n            imageUrl.then(data => {\n              if (data) {\n                db.collection('projects').doc(this.state.projectId).collection('businessPlan').doc(Router.query.project).collection('inputs') // .collection('currentBusinessPlan')\n                //   .doc('GrcvhyJwvlWVy31QsiudoQKdKI72')\n                //   .collection('inputs')\n                .doc('chartImages').add({\n                  index: field.index,\n                  imageUrl: data\n                });\n              }\n            });\n          }\n        });\n      });\n      console.log(images);\n    });\n\n    this.state = {\n      selectedSectionIndex: null,\n      selectedSection: null,\n      sections: null,\n      projectId: null // routerPath: useRouter().query.project\n\n    };\n    this.addNewElement = /*#__PURE__*/React.createRef();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsx(_Fragment, {\n      children: /*#__PURE__*/_jsx(NavbarTemplate, {\n        children: /*#__PURE__*/_jsxs(\"div\", {\n          className: \"min-h-screen w-full relative flex flex-col items-center\",\n          children: [/*#__PURE__*/_jsxs(\"div\", {\n            id: \"left-bar\",\n            className: \"z-50 h-0 w-40 bg-primary fixed top-0 left-0\",\n            children: [/*#__PURE__*/_jsxs(\"ul\", {\n              className: \"circles1\",\n              style: {\n                zIndex: -1\n              },\n              children: [/*#__PURE__*/_jsx(\"li\", {}), /*#__PURE__*/_jsx(\"li\", {}), /*#__PURE__*/_jsx(\"li\", {}), /*#__PURE__*/_jsx(\"li\", {}), /*#__PURE__*/_jsx(\"li\", {}), /*#__PURE__*/_jsx(\"li\", {}), /*#__PURE__*/_jsx(\"li\", {}), /*#__PURE__*/_jsx(\"li\", {}), /*#__PURE__*/_jsx(\"li\", {}), /*#__PURE__*/_jsx(\"li\", {})]\n            }), /*#__PURE__*/_jsx(\"img\", {\n              id: \"exit\",\n              onClick: this.onLeftBarHidden,\n              src: \"/chart/exit1.svg\",\n              width: 15,\n              width: 15,\n              style: {\n                position: 'absolute',\n                top: '1%',\n                right: '-15%',\n                visibility: 'hidden',\n                opacity: 0\n              }\n            }), /*#__PURE__*/_jsxs(\"div\", {\n              className: \"h-full w-full grid grid-cols-1frr grid-rows-5fr justify-items-center items-center\",\n              children: [/*#__PURE__*/_jsxs(\"div\", {\n                onClick: () => this.addNewHeader(),\n                id: \"container\",\n                className: \"invisible opacity-0 mt-4 w-full h-full flex flex-col justify-center items-center hover:shadow-2xl transform transition duration-500 ease-in-out cursor-pointer\",\n                children: [/*#__PURE__*/_jsx(\"div\", {\n                  id: \"left-element\",\n                  className: \"transform scale-0 w-4/6 h-16 bg-background rounded-2xl shadow-lg flex justify-center items-center\",\n                  children: /*#__PURE__*/_jsx(Image, {\n                    src: \"/chart/header.svg\",\n                    width: 55,\n                    height: 55\n                  })\n                }), /*#__PURE__*/_jsx(\"p\", {\n                  id: \"left-text\",\n                  className: \"transform scale-0 text-center text-background mt-1 text-sm cursor-default\",\n                  children: \"Header\"\n                })]\n              }), /*#__PURE__*/_jsxs(\"div\", {\n                onClick: () => this.addNewField(),\n                id: \"container1\",\n                className: \"invisible opacity-0 mt-4 w-full h-full flex flex-col justify-center items-center hover:shadow-2xl transform transition duration-500 ease-in-out cursor-pointer\",\n                children: [/*#__PURE__*/_jsx(\"div\", {\n                  id: \"left-element1\",\n                  className: \"transform scale-0 w-4/6 h-16 bg-background rounded-2xl shadow-lg flex justify-center items-center\",\n                  children: /*#__PURE__*/_jsx(Image, {\n                    src: \"/chart/text.svg\",\n                    width: 55,\n                    height: 55\n                  })\n                }), /*#__PURE__*/_jsx(\"p\", {\n                  id: \"left-text1\",\n                  className: \"transform scale-0 text-center text-background mt-1 text-sm cursor-default\",\n                  children: \"Text\"\n                })]\n              }), /*#__PURE__*/_jsxs(\"div\", {\n                onClick: () => this.addNewSpacing(),\n                id: \"container2\",\n                className: \"invisible opacity-0 mt-4 w-full h-full flex flex-col justify-center items-center hover:shadow-2xl transform transition duration-500 ease-in-out cursor-pointer\",\n                children: [/*#__PURE__*/_jsx(\"div\", {\n                  id: \"left-element2\",\n                  className: \"transform scale-0 w-4/6 h-16 bg-background rounded-2xl shadow-lg flex justify-center items-center\",\n                  children: /*#__PURE__*/_jsx(Image, {\n                    src: \"/spacing/spacing.svg\",\n                    width: 55,\n                    height: 55\n                  })\n                }), /*#__PURE__*/_jsx(\"p\", {\n                  id: \"left-text2\",\n                  className: \"transform scale-0 text-center text-background mt-1 text-sm cursor-default\",\n                  children: \"Spacing\"\n                })]\n              }), /*#__PURE__*/_jsxs(\"div\", {\n                onClick: () => this.addNewChart(),\n                id: \"container3\",\n                className: \"invisible opacity-0 mt-4 w-full h-full flex flex-col justify-center items-center hover:shadow-2xl transform transition duration-500 ease-in-out cursor-pointer\",\n                children: [/*#__PURE__*/_jsx(\"div\", {\n                  id: \"left-element3\",\n                  className: \"transform scale-0 w-4/6 h-16 bg-background rounded-2xl shadow-lg flex justify-center items-center\",\n                  children: /*#__PURE__*/_jsx(Image, {\n                    src: \"/chart/chart.svg\",\n                    width: 55,\n                    height: 55\n                  })\n                }), /*#__PURE__*/_jsx(\"p\", {\n                  id: \"left-text3\",\n                  className: \"transform scale-0 text-center text-background mt-1 text-sm cursor-default\",\n                  children: \"Chart\"\n                })]\n              }), /*#__PURE__*/_jsxs(\"div\", {\n                onClick: () => this.addNewTable(),\n                id: \"container4\",\n                className: \"invisible opacity-0 mt-4 w-full h-full flex flex-col justify-center items-center hover:shadow-2xl transform transition duration-500 ease-in-out cursor-pointer\",\n                children: [/*#__PURE__*/_jsx(\"div\", {\n                  id: \"left-element4\",\n                  className: \"transform scale-0 w-4/6 h-16 bg-background rounded-2xl shadow-lg flex justify-center items-center\",\n                  children: /*#__PURE__*/_jsx(Image, {\n                    src: \"/table/table.svg\",\n                    width: 55,\n                    height: 55\n                  })\n                }), /*#__PURE__*/_jsx(\"p\", {\n                  id: \"left-text4\",\n                  className: \"transform scale-0 text-center text-background mt-1 text-sm cursor-default\",\n                  children: \"Table\"\n                })]\n              })]\n            })]\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            className: \"w-full max-w-full relative mt-16 px-32\",\n            children: [/*#__PURE__*/_jsxs(\"div\", {\n              className: \"grid grid-cols-2 grid-rows-1 grid-flow-col\",\n              children: [/*#__PURE__*/_jsxs(\"div\", {\n                className: \"flex items-center\",\n                children: [/*#__PURE__*/_jsxs(\"svg\", {\n                  height: \"30\",\n                  width: \"30\",\n                  className: \"fill-current text-primary dark:text-primarydark\",\n                  xmlns: \"http://www.w3.org/2000/svg\",\n                  viewBox: \"0 0 128 128\",\n                  children: [/*#__PURE__*/_jsx(\"title\", {\n                    children: \"Landing Success\"\n                  }), /*#__PURE__*/_jsx(\"g\", {\n                    id: \"Landing_Success\",\n                    \"data-name\": \"Landing Success\",\n                    children: /*#__PURE__*/_jsx(\"path\", {\n                      className: \"cls-1\",\n                      d: \"M109.3,90.1A46,46,0,0,0,65,36V20.08c1.78-.62,7.21-2.14,12.57.23a19.33,19.33,0,0,0,14.82,0c.87-.38.61.31.61-17.93a1,1,0,0,0-1.43-.93c-.07,0-6.69,2.87-13.18,0A19.41,19.41,0,0,0,65,.93,1,1,0,0,0,63,1V36a45.86,45.86,0,0,0-28.66,10.8C16.18,40.48,4,40,.79,45.51-2.29,50.86,3.94,59.3,10,65.68A11,11,0,0,0,18,83c.81,38.41,46.08,59.2,75.66,34.21,8.53,3,29,9.15,33.55,1.31C130.39,113,123.86,102.65,109.3,90.1ZM77.59,3.31A19.39,19.39,0,0,0,91,3.83V18.68c-1.79.62-7.22,2.13-12.57-.23A19.19,19.19,0,0,0,65,17.93V3.08C66.81,2.46,72.24,1,77.59,3.31ZM65,45v-7c39.69.91,58,50.27,28.21,76.81C71.32,107,46,92.66,27.77,78.64a11,11,0,0,0-3.2-16.13A43.88,43.88,0,0,1,63,38.06V45A1,1,0,0,0,65,45ZM32.55,48.36a46.21,46.21,0,0,0-9.83,13.28,10.93,10.93,0,0,0-11.4,2.47C-8.39,43.23,5.23,39.08,32.55,48.36ZM10,72a9,9,0,1,1,9,9A9,9,0,0,1,10,72Zm10,11a11,11,0,0,0,6.34-2.82c18.45,14.21,43.45,28.35,65.05,36.22C63,139.16,20.83,119.1,20.05,83Zm105.4,34.5c-2.51,4.35-14,3.62-30-1.85a45.61,45.61,0,0,0,13.42-23.21C121.59,103.58,128,113.12,125.45,117.47Z\"\n                    })\n                  })]\n                }), /*#__PURE__*/_jsx(\"p\", {\n                  className: \"text-primarydark text-2xl mt-2 pl-2 dark:text-background\",\n                  children: \"Business plan\"\n                })]\n              }), /*#__PURE__*/_jsx(PDFDocument, {\n                allData: this.state.sections,\n                pdfChartsCreate: this.pdfChartsCreate,\n                projectId: this.state.projectId\n              })]\n            }), /*#__PURE__*/_jsx(\"div\", {\n              children: /*#__PURE__*/_jsx(\"h1\", {\n                className: \"text-secondary text-md text-gray\",\n                children: \"Create your business plan any way you want\"\n              })\n            }), /*#__PURE__*/_jsxs(\"div\", {\n              className: \"grid grid-cols-8fr grid-flow-col\",\n              children: [/*#__PURE__*/_jsx(\"div\", {\n                className: \"col-start-1 col-end-7 w-full h-maxcontent mt-12 pb-20\",\n                children: this.state.selectedSection ? (console.log('selected --> ', this.state.selectedSection), /*#__PURE__*/_jsx(EditorInputElement // sectionUpdate={sectionUpdate}\n                // sectionUpdate={sectionUpdate}\n                , {\n                  sectionTitleUpdate: this.sectionTitleUpdate,\n                  tableUpdate: this.tableUpdate,\n                  headerUpdate: this.headerUpdate,\n                  reorderElements: this.reorderElements,\n                  projectId: this.state.projectId,\n                  addChart: this.addChart,\n                  addNewHeader: this.addNewHeader,\n                  chartTypeUpdate: this.chartTypeUpdate,\n                  onDatasetLabel6Update: this.onDatasetLabel6Update,\n                  onDatasetLabel5Update: this.onDatasetLabel5Update,\n                  onDatasetLabel4Update: this.onDatasetLabel4Update,\n                  onDatasetLabel3Update: this.onDatasetLabel3Update,\n                  onDatasetLabel2Update: this.onDatasetLabel2Update,\n                  onDatasetLabel1Update: this.onDatasetLabel1Update,\n                  onDataset6Update: this.onDataset6Update,\n                  onDataset5Update: this.onDataset5Update,\n                  onDataset4Update: this.onDataset4Update,\n                  onDataset3Update: this.onDataset3Update,\n                  onDataset2Update: this.onDataset2Update,\n                  onDataset1Update: this.onDataset1Update,\n                  chartLabelsUpdate: this.chartLabelsUpdate,\n                  chartValueUpdate: this.chartValueUpdate,\n                  addNewChart: this.addNewChart,\n                  deleteParticularField: this.deleteParticularField,\n                  addNewField: this.addNewField,\n                  fieldUpdate: this.fieldUpdate,\n                  sectionUpdate: this.sectionUpdate,\n                  selectedSection: this.state.selectedSection,\n                  selectedSectionIndex: this.state.selectedSectionIndex,\n                  sections: this.state.sections\n                })) : /*#__PURE__*/_jsx(\"div\", {\n                  children: \"Text section or chart???\"\n                })\n              }), /*#__PURE__*/_jsx(SectionManager, {\n                selectedSection: this.state.selectedSection,\n                reorderSections: this.reorderSections,\n                sections: this.state.sections,\n                selectedSectionIndex: this.state.selectedSectionIndex,\n                selectSectionPage: this.selectSectionPage,\n                newSectionPage: this.newSectionPage,\n                deleteSectionPage: this.deleteSectionPage\n              })]\n            })]\n          })]\n        })\n      })\n    });\n  }\n\n}\n\nexport default BusinessPlanApp;","map":null,"metadata":{},"sourceType":"module"}