{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useCallback, useEffect, useState } from 'react';\nimport Image from 'next/image';\nimport gsap, { Linear } from 'gsap';\nimport debounce from '../../../../../utils/helpers';\nimport Router from 'next/router';\n\nconst TableElement = ({\n  currentIndex,\n  tableUpdate,\n  provided,\n  field,\n  deleteField\n}) => {\n  console.log(field);\n  const {\n    0: newField,\n    1: setNewField\n  } = useState();\n  useEffect(() => {\n    document.getElementById(`${field.index}container`) && document.getElementById(`${field.index}container`).addEventListener('mouseenter', () => {\n      gsap.to(document.getElementById(`${field.index}table`), {\n        height: 80,\n        marginTop: 10,\n        duration: 0.8,\n        transformOrigin: 'top',\n        ease: Linear\n      });\n    });\n    document.getElementById(`${field.index}container`) && document.getElementById(`${field.index}container`).addEventListener('mouseleave', () => {\n      gsap.to(document.getElementById(`${field.index}table`), {\n        height: 0,\n        marginTop: 0,\n        duration: 0.8,\n        transformOrigin: 'top',\n        ease: Linear\n      });\n    });\n  }, []);\n  useEffect(() => {\n    setNewField(field);\n  }, []);\n\n  const onRowDataChange = (data, rowIndex, rowDataIndex) => {\n    const newArray = [...newField.rows];\n    newArray[rowIndex].row[rowDataIndex] = data;\n    const updatedField = {\n      headRows: field.headRows,\n      rows: newArray,\n      index: field.index,\n      tableId: field.tableId,\n      type: 'table',\n      currentIndex\n    };\n    setNewField(updatedField); // Firebase update\n\n    databaseUpdate(updatedField);\n  };\n\n  const databaseUpdate = useCallback(debounce(async data => {\n    tableUpdate(data, data.currentIndex, field.tableId, field.index);\n  }, 500), []);\n\n  const onHeadRowDataChange = (data, headRowIndex) => {\n    console.log(data);\n    const newArray = [...newField.headRows];\n    newArray[headRowIndex] = data;\n    const updatedField = {\n      headRows: newArray,\n      rows: field.rows,\n      index: field.index,\n      tableId: field.tableId,\n      type: 'table',\n      currentIndex\n    };\n    setNewField(updatedField); // Firebase update\n\n    databaseUpdate(updatedField);\n  };\n\n  const onNewRowAdd = () => {\n    const newArray = [...newField.rows];\n    console.log(newArray);\n    const rowArray = [];\n    newField.headRows.map(headRow => rowArray.push(''));\n    newArray.push({\n      row: rowArray\n    });\n    const updatedField = {\n      headRows: field.headRows,\n      rows: newArray,\n      index: field.index,\n      tableId: field.tableId,\n      type: 'table',\n      currentIndex\n    };\n    setNewField(updatedField); // If empty, won't be updated to firebase\n\n    databaseUpdate(updatedField);\n  };\n\n  const onNewRowAboveAdd = () => {\n    const newArray = [...newField.rows];\n    const rowArray = [];\n    newField.headRows.map(headRow => rowArray.push(''));\n    newArray.unshift({\n      row: rowArray\n    });\n    const updatedField = {\n      headRows: field.headRows,\n      rows: newArray,\n      index: field.index,\n      tableId: field.tableId,\n      type: 'table',\n      currentIndex\n    };\n    setNewField(updatedField); // If empty, won't be updated to firebase\n\n    databaseUpdate(updatedField);\n  };\n\n  const onNewColumnAdd = () => {\n    const newArrayRows = [...newField.rows];\n    newArrayRows.map(row => {\n      console.log(row);\n      row.row.push('');\n    });\n    const newArrayHeadRows = [...newField.headRows];\n    newArrayHeadRows.push('');\n    const updatedField = {\n      headRows: newArrayHeadRows,\n      rows: newArrayRows,\n      index: field.index,\n      tableId: field.tableId,\n      type: 'table',\n      currentIndex\n    };\n    setNewField(updatedField); // Firebase update\n\n    databaseUpdate(updatedField);\n  };\n\n  const onNewColumnLeftAdd = () => {\n    const newArrayRows = [...newField.rows];\n    newArrayRows.map(row => {\n      row.row.unshift('');\n    });\n    const newArrayHeadRows = [...newField.headRows];\n    newArrayHeadRows.unshift('');\n    const updatedField = {\n      headRows: newArrayHeadRows,\n      rows: newArrayRows,\n      index: field.index,\n      tableId: field.tableId,\n      type: 'table',\n      currentIndex\n    };\n    setNewField(updatedField); // Firebase update\n\n    databaseUpdate(updatedField);\n  };\n\n  const onRowDelete = () => {\n    const newArray = [...newField.rows];\n    newArray.pop();\n    const updatedField = {\n      headRows: field.headRows,\n      rows: newArray,\n      index: field.index,\n      tableId: field.tableId,\n      type: 'table',\n      currentIndex\n    };\n    setNewField(updatedField); // If empty, won't be updated to firebase\n\n    databaseUpdate(updatedField);\n  };\n\n  const onRowAboveDelete = () => {\n    const newArray = [...newField.rows];\n    newArray.shift();\n    const updatedField = {\n      headRows: field.headRows,\n      rows: newArray,\n      index: field.index,\n      tableId: field.tableId,\n      type: 'table',\n      currentIndex\n    };\n    setNewField(updatedField); // If empty, won't be updated to firebase\n\n    databaseUpdate(updatedField);\n  };\n\n  const onColumnDelete = () => {\n    const newArrayRows = [...newField.rows];\n    newArrayRows.map(row => {\n      row.row.pop();\n    });\n    const newArrayHeadRows = [...newField.headRows];\n    newArrayHeadRows.pop();\n    const updatedField = {\n      headRows: newArrayHeadRows,\n      rows: newArrayRows,\n      index: field.index,\n      tableId: field.tableId,\n      type: 'table',\n      currentIndex\n    };\n    setNewField(updatedField); // Firebase update\n\n    databaseUpdate(updatedField);\n  };\n\n  const onColumnLeftDelete = () => {\n    const newArrayRows = [...newField.rows];\n    newArrayRows.map(row => {\n      row.row.shift();\n    });\n    const newArrayHeadRows = [...newField.headRows];\n    newArrayHeadRows.shift();\n    const updatedField = {\n      headRows: newArrayHeadRows,\n      rows: newArrayRows,\n      index: field.index,\n      tableId: field.tableId,\n      type: 'table',\n      currentIndex\n    };\n    setNewField(updatedField); // Firebase update\n\n    databaseUpdate(updatedField);\n  };\n\n  return /*#__PURE__*/_jsxs(\"div\", _objectSpread(_objectSpread({\n    ref: provided.innerRef\n  }, provided.draggableProps), {}, {\n    className: \"w-full grid grid-cols-12fr justify-items-center items-center mt-6\",\n    children: [/*#__PURE__*/_jsxs(\"div\", {\n      id: `${field.index}container`,\n      className: \"col-start-2 col-end-12 relative flex flex-col h-full w-full flex px-8 py-8 rounded-2xl bg-white dark:bg-background\",\n      children: [/*#__PURE__*/_jsxs(\"table\", {\n        className: \"table-element\",\n        children: [/*#__PURE__*/_jsx(\"thead\", {\n          children: /*#__PURE__*/_jsx(\"tr\", {\n            children: newField && newField.headRows.map((row, headRowIndex) => /*#__PURE__*/_jsx(\"th\", {\n              children: /*#__PURE__*/_jsx(\"input\", {\n                className: \"w-full bg-primary text-background focus:outline-none\",\n                value: row,\n                onChange: e => onHeadRowDataChange(e.target.value, headRowIndex)\n              })\n            }))\n          })\n        }), /*#__PURE__*/_jsx(\"tbody\", {\n          children: newField && newField.rows.map((row, rowIndex) => /*#__PURE__*/_jsx(\"tr\", {\n            children: row.row.map((rowData, rowDataIndex) => /*#__PURE__*/_jsx(\"td\", {\n              children: /*#__PURE__*/_jsx(\"input\", {\n                className: \"w-full bg-white focus:outline-none border-l border-primarydark pl-1\",\n                value: rowData,\n                onChange: e => onRowDataChange(e.target.value, rowIndex, rowDataIndex)\n              })\n            }))\n          }))\n        })]\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        id: `${field.index}table`,\n        className: \"w-full overflow-hidden h-0 flex justify-between items-center gap-4\",\n        children: [/*#__PURE__*/_jsxs(\"div\", {\n          className: \"grid grid-flow-row grid-rows-2fr h-full\",\n          children: [/*#__PURE__*/_jsxs(\"div\", {\n            className: \"flex\",\n            children: [/*#__PURE__*/_jsx(\"img\", {\n              onClick: onNewRowAdd,\n              className: \"cursor-pointer\",\n              src: `/table/row-add.svg`,\n              height: 22,\n              width: 22\n            }), /*#__PURE__*/_jsx(\"img\", {\n              onClick: onRowDelete,\n              className: \"cursor-pointer ml-2\",\n              src: `/table/remove1.svg`,\n              height: 26,\n              width: 26\n            })]\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            className: \"flex\",\n            children: [/*#__PURE__*/_jsx(\"img\", {\n              onClick: onNewRowAboveAdd,\n              className: \"cursor-pointer\",\n              src: `/table/row-add-above.svg`,\n              height: 22,\n              width: 22\n            }), /*#__PURE__*/_jsx(\"img\", {\n              onClick: onRowAboveDelete,\n              className: \"cursor-pointer ml-2\",\n              src: `/table/remove1.svg`,\n              height: 26,\n              width: 26\n            })]\n          })]\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          className: \"grid grid-flow-row grid-rows-2fr h-full\",\n          children: [/*#__PURE__*/_jsxs(\"div\", {\n            className: \"flex\",\n            children: [/*#__PURE__*/_jsx(\"img\", {\n              onClick: onNewColumnAdd,\n              className: \"cursor-pointer mr-2\",\n              src: `/table/column-add.svg`,\n              height: 22,\n              width: 22\n            }), /*#__PURE__*/_jsx(\"img\", {\n              onClick: onColumnDelete,\n              className: \"cursor-pointer\",\n              src: `/table/remove1.svg`,\n              height: 26,\n              width: 26\n            })]\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            className: \"flex\",\n            children: [/*#__PURE__*/_jsx(\"img\", {\n              onClick: onNewColumnLeftAdd,\n              className: \"cursor-pointer mr-2\",\n              src: `/table/column-add-left.svg`,\n              height: 22,\n              width: 22\n            }), /*#__PURE__*/_jsx(\"img\", {\n              onClick: onColumnLeftDelete,\n              className: \"cursor-pointer\",\n              src: `/table/remove1.svg`,\n              height: 26,\n              width: 26\n            })]\n          })]\n        })]\n      })]\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      className: \"col-start-12 col-end-13 justify-self-center self-start flex flex-col flex-wrap gap-2\",\n      children: [/*#__PURE__*/_jsx(Image, {\n        onClick: () => deleteField(field.index),\n        className: \"cursor-pointer\",\n        src: `/plan-bar/exit4.svg`,\n        height: 36,\n        width: 36\n      }), /*#__PURE__*/_jsx(Image, _objectSpread(_objectSpread({}, provided.dragHandleProps), {}, {\n        className: \"cursor-pointer mt-2\",\n        src: `/plan-bar/drag2.svg`,\n        height: 36,\n        width: 36\n      }))]\n    })]\n  }));\n};\n\nexport default TableElement;","map":null,"metadata":{},"sourceType":"module"}